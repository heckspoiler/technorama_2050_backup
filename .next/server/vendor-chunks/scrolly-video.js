"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/scrolly-video";
exports.ids = ["vendor-chunks/scrolly-video"];
exports.modules = {

/***/ "(ssr)/./node_modules/scrolly-video/dist/ScrollyVideo.cjs.jsx":
/*!**************************************************************!*\
  !*** ./node_modules/scrolly-video/dist/ScrollyVideo.cjs.jsx ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nvar React__default = /*#__PURE__*/ _interopDefaultLegacy(React);\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nvar uaParser = {\n    exports: {}\n};\n(function(module1, exports) {\n    /////////////////////////////////////////////////////////////////////////////////\n    /* UAParser.js v1.0.33\n   Copyright Â© 2012-2021 Faisal Salman <f@faisalman.com>\n   MIT License */ /*\n   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.\n   Supports browser & node.js environment. \n   Demo   : https://faisalman.github.io/ua-parser-js\n   Source : https://github.com/faisalman/ua-parser-js */ /////////////////////////////////////////////////////////////////////////////////\n    (function(window1, undefined$1) {\n        //////////////\n        // Constants\n        /////////////\n        var LIBVERSION = \"1.0.33\", EMPTY = \"\", UNKNOWN = \"?\", FUNC_TYPE = \"function\", UNDEF_TYPE = \"undefined\", OBJ_TYPE = \"object\", STR_TYPE = \"string\", MAJOR = \"major\", MODEL = \"model\", NAME = \"name\", TYPE = \"type\", VENDOR = \"vendor\", VERSION = \"version\", ARCHITECTURE = \"architecture\", CONSOLE = \"console\", MOBILE = \"mobile\", TABLET = \"tablet\", SMARTTV = \"smarttv\", WEARABLE = \"wearable\", EMBEDDED = \"embedded\", UA_MAX_LENGTH = 350;\n        var AMAZON = \"Amazon\", APPLE = \"Apple\", ASUS = \"ASUS\", BLACKBERRY = \"BlackBerry\", BROWSER = \"Browser\", CHROME = \"Chrome\", EDGE = \"Edge\", FIREFOX = \"Firefox\", GOOGLE = \"Google\", HUAWEI = \"Huawei\", LG = \"LG\", MICROSOFT = \"Microsoft\", MOTOROLA = \"Motorola\", OPERA = \"Opera\", SAMSUNG = \"Samsung\", SHARP = \"Sharp\", SONY = \"Sony\", XIAOMI = \"Xiaomi\", ZEBRA = \"Zebra\", FACEBOOK = \"Facebook\";\n        ///////////\n        // Helper\n        //////////\n        var extend = function(regexes, extensions) {\n            var mergedRegexes = {};\n            for(var i in regexes){\n                if (extensions[i] && extensions[i].length % 2 === 0) {\n                    mergedRegexes[i] = extensions[i].concat(regexes[i]);\n                } else {\n                    mergedRegexes[i] = regexes[i];\n                }\n            }\n            return mergedRegexes;\n        }, enumerize = function(arr) {\n            var enums = {};\n            for(var i = 0; i < arr.length; i++){\n                enums[arr[i].toUpperCase()] = arr[i];\n            }\n            return enums;\n        }, has = function(str1, str2) {\n            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;\n        }, lowerize = function(str) {\n            return str.toLowerCase();\n        }, majorize = function(version) {\n            return typeof version === STR_TYPE ? version.replace(/[^\\d\\.]/g, EMPTY).split(\".\")[0] : undefined$1;\n        }, trim = function(str, len) {\n            if (typeof str === STR_TYPE) {\n                str = str.replace(/^\\s\\s*/, EMPTY);\n                return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n            }\n        };\n        ///////////////\n        // Map helper\n        //////////////\n        var rgxMapper = function(ua, arrays) {\n            var i = 0, j, k, p, q, matches, match;\n            // loop through all regexes maps\n            while(i < arrays.length && !matches){\n                var regex = arrays[i], props = arrays[i + 1]; // odd sequence (1,3,5,..)\n                j = k = 0;\n                // try matching uastring with regexes\n                while(j < regex.length && !matches){\n                    matches = regex[j++].exec(ua);\n                    if (!!matches) {\n                        for(p = 0; p < props.length; p++){\n                            match = matches[++k];\n                            q = props[p];\n                            // check if given property is actually array\n                            if (typeof q === OBJ_TYPE && q.length > 0) {\n                                if (q.length === 2) {\n                                    if (typeof q[1] == FUNC_TYPE) {\n                                        // assign modified match\n                                        this[q[0]] = q[1].call(this, match);\n                                    } else {\n                                        // assign given value, ignore regex match\n                                        this[q[0]] = q[1];\n                                    }\n                                } else if (q.length === 3) {\n                                    // check whether function or regex\n                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {\n                                        // call function (usually string mapper)\n                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined$1;\n                                    } else {\n                                        // sanitize match using given regex\n                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined$1;\n                                    }\n                                } else if (q.length === 4) {\n                                    this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined$1;\n                                }\n                            } else {\n                                this[q] = match ? match : undefined$1;\n                            }\n                        }\n                    }\n                }\n                i += 2;\n            }\n        }, strMapper = function(str, map) {\n            for(var i in map){\n                // check if current value is array\n                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {\n                    for(var j = 0; j < map[i].length; j++){\n                        if (has(map[i][j], str)) {\n                            return i === UNKNOWN ? undefined$1 : i;\n                        }\n                    }\n                } else if (has(map[i], str)) {\n                    return i === UNKNOWN ? undefined$1 : i;\n                }\n            }\n            return str;\n        };\n        ///////////////\n        // String map\n        //////////////\n        // Safari < 3.0\n        var oldSafariMap = {\n            \"1.0\": \"/8\",\n            \"1.2\": \"/1\",\n            \"1.3\": \"/3\",\n            \"2.0\": \"/412\",\n            \"2.0.2\": \"/416\",\n            \"2.0.3\": \"/417\",\n            \"2.0.4\": \"/419\",\n            \"?\": \"/\"\n        }, windowsVersionMap = {\n            \"ME\": \"4.90\",\n            \"NT 3.11\": \"NT3.51\",\n            \"NT 4.0\": \"NT4.0\",\n            \"2000\": \"NT 5.0\",\n            \"XP\": [\n                \"NT 5.1\",\n                \"NT 5.2\"\n            ],\n            \"Vista\": \"NT 6.0\",\n            \"7\": \"NT 6.1\",\n            \"8\": \"NT 6.2\",\n            \"8.1\": \"NT 6.3\",\n            \"10\": [\n                \"NT 6.4\",\n                \"NT 10.0\"\n            ],\n            \"RT\": \"ARM\"\n        };\n        //////////////\n        // Regex map\n        /////////////\n        var regexes = {\n            browser: [\n                [\n                    /\\b(?:crmo|crios)\\/([\\w\\.]+)/i // Chrome for Android/iOS\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Chrome\"\n                    ]\n                ],\n                [\n                    /edg(?:e|ios|a)?\\/([\\w\\.]+)/i // Microsoft Edge\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Edge\"\n                    ]\n                ],\n                [\n                    // Presto based\n                    /(opera mini)\\/([-\\w\\.]+)/i,\n                    /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,\n                    /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i // Opera\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /opios[\\/ ]+([\\w\\.]+)/i // Opera mini on iphone >= 8.0\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        OPERA + \" Mini\"\n                    ]\n                ],\n                [\n                    /\\bopr\\/([\\w\\.]+)/i // Opera Webkit\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        OPERA\n                    ]\n                ],\n                [\n                    // Mixed\n                    /(kindle)\\/([\\w\\.]+)/i,\n                    /(lunascape|maxthon|netfront|jasmine|blazer)[\\/ ]?([\\w\\.]*)/i,\n                    // Trident based\n                    /(avant |iemobile|slim)(?:browser)?[\\/ ]?([\\w\\.]*)/i,\n                    /(ba?idubrowser)[\\/ ]?([\\w\\.]+)/i,\n                    /(?:ms|\\()(ie) ([\\w\\.]+)/i,\n                    // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon\n                    /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq|duckduckgo)\\/([-\\w\\.]+)/i,\n                    // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ\n                    /(weibo)__([\\d\\.]+)/i // Weibo\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i // UCBrowser\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"UC\" + BROWSER\n                    ]\n                ],\n                [\n                    /microm.+\\bqbcore\\/([\\w\\.]+)/i,\n                    /\\bqbcore\\/([\\w\\.]+).+microm/i\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"WeChat(Win) Desktop\"\n                    ]\n                ],\n                [\n                    /micromessenger\\/([\\w\\.]+)/i // WeChat\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"WeChat\"\n                    ]\n                ],\n                [\n                    /konqueror\\/([\\w\\.]+)/i // Konqueror\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Konqueror\"\n                    ]\n                ],\n                [\n                    /trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i // IE11\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"IE\"\n                    ]\n                ],\n                [\n                    /yabrowser\\/([\\w\\.]+)/i // Yandex\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Yandex\"\n                    ]\n                ],\n                [\n                    /(avast|avg)\\/([\\w\\.]+)/i // Avast/AVG Secure Browser\n                ],\n                [\n                    [\n                        NAME,\n                        /(.+)/,\n                        \"$1 Secure \" + BROWSER\n                    ],\n                    VERSION\n                ],\n                [\n                    /\\bfocus\\/([\\w\\.]+)/i // Firefox Focus\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        FIREFOX + \" Focus\"\n                    ]\n                ],\n                [\n                    /\\bopt\\/([\\w\\.]+)/i // Opera Touch\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        OPERA + \" Touch\"\n                    ]\n                ],\n                [\n                    /coc_coc\\w+\\/([\\w\\.]+)/i // Coc Coc Browser\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Coc Coc\"\n                    ]\n                ],\n                [\n                    /dolfin\\/([\\w\\.]+)/i // Dolphin\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Dolphin\"\n                    ]\n                ],\n                [\n                    /coast\\/([\\w\\.]+)/i // Opera Coast\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        OPERA + \" Coast\"\n                    ]\n                ],\n                [\n                    /miuibrowser\\/([\\w\\.]+)/i // MIUI Browser\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"MIUI \" + BROWSER\n                    ]\n                ],\n                [\n                    /fxios\\/([-\\w\\.]+)/i // Firefox for iOS\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        FIREFOX\n                    ]\n                ],\n                [\n                    /\\bqihu|(qi?ho?o?|360)browser/i // 360\n                ],\n                [\n                    [\n                        NAME,\n                        \"360 \" + BROWSER\n                    ]\n                ],\n                [\n                    /(oculus|samsung|sailfish|huawei)browser\\/([\\w\\.]+)/i\n                ],\n                [\n                    [\n                        NAME,\n                        /(.+)/,\n                        \"$1 \" + BROWSER\n                    ],\n                    VERSION\n                ],\n                [\n                    /(comodo_dragon)\\/([\\w\\.]+)/i // Comodo Dragon\n                ],\n                [\n                    [\n                        NAME,\n                        /_/g,\n                        \" \"\n                    ],\n                    VERSION\n                ],\n                [\n                    /(electron)\\/([\\w\\.]+) safari/i,\n                    /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,\n                    /m?(qqbrowser|baiduboxapp|2345Explorer)[\\/ ]?([\\w\\.]+)/i // QQBrowser/Baidu App/2345 Browser\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /(metasr)[\\/ ]?([\\w\\.]+)/i,\n                    /(lbbrowser)/i,\n                    /\\[(linkedin)app\\]/i // LinkedIn App for iOS & Android\n                ],\n                [\n                    NAME\n                ],\n                [\n                    // WebView\n                    /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i // Facebook App for iOS & Android\n                ],\n                [\n                    [\n                        NAME,\n                        FACEBOOK\n                    ],\n                    VERSION\n                ],\n                [\n                    /safari (line)\\/([\\w\\.]+)/i,\n                    /\\b(line)\\/([\\w\\.]+)\\/iab/i,\n                    /(chromium|instagram)[\\/ ]([-\\w\\.]+)/i // Chromium/Instagram\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /\\bgsa\\/([\\w\\.]+) .*safari\\//i // Google Search Appliance on iOS\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"GSA\"\n                    ]\n                ],\n                [\n                    /headlesschrome(?:\\/([\\w\\.]+)| )/i // Chrome Headless\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        CHROME + \" Headless\"\n                    ]\n                ],\n                [\n                    / wv\\).+(chrome)\\/([\\w\\.]+)/i // Chrome WebView\n                ],\n                [\n                    [\n                        NAME,\n                        CHROME + \" WebView\"\n                    ],\n                    VERSION\n                ],\n                [\n                    /droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i // Android Browser\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Android \" + BROWSER\n                    ]\n                ],\n                [\n                    /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /version\\/([\\w\\.\\,]+) .*mobile\\/\\w+ (safari)/i // Mobile Safari\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Mobile Safari\"\n                    ]\n                ],\n                [\n                    /version\\/([\\w(\\.|\\,)]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile\n                ],\n                [\n                    VERSION,\n                    NAME\n                ],\n                [\n                    /webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i // Safari < 3.0\n                ],\n                [\n                    NAME,\n                    [\n                        VERSION,\n                        strMapper,\n                        oldSafariMap\n                    ]\n                ],\n                [\n                    /(webkit|khtml)\\/([\\w\\.]+)/i\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    // Gecko based\n                    /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i // Netscape\n                ],\n                [\n                    [\n                        NAME,\n                        \"Netscape\"\n                    ],\n                    VERSION\n                ],\n                [\n                    /mobile vr; rv:([\\w\\.]+)\\).+firefox/i // Firefox Reality\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        FIREFOX + \" Reality\"\n                    ]\n                ],\n                [\n                    /ekiohf.+(flow)\\/([\\w\\.]+)/i,\n                    /(swiftfox)/i,\n                    /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\\/ ]?([\\w\\.\\+]+)/i,\n                    // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar\n                    /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n                    // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n                    /(firefox)\\/([\\w\\.]+)/i,\n                    /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,\n                    // Other\n                    /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n                    // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser\n                    /(links) \\(([\\w\\.]+)/i // Links\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /(cobalt)\\/([\\w\\.]+)/i // Cobalt\n                ],\n                [\n                    NAME,\n                    [\n                        VERSION,\n                        /master.|lts./,\n                        \"\"\n                    ]\n                ]\n            ],\n            cpu: [\n                [\n                    /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\\)]/i // AMD64 (x64)\n                ],\n                [\n                    [\n                        ARCHITECTURE,\n                        \"amd64\"\n                    ]\n                ],\n                [\n                    /(ia32(?=;))/i // IA32 (quicktime)\n                ],\n                [\n                    [\n                        ARCHITECTURE,\n                        lowerize\n                    ]\n                ],\n                [\n                    /((?:i[346]|x)86)[;\\)]/i // IA32 (x86)\n                ],\n                [\n                    [\n                        ARCHITECTURE,\n                        \"ia32\"\n                    ]\n                ],\n                [\n                    /\\b(aarch64|arm(v?8e?l?|_?64))\\b/i // ARM64\n                ],\n                [\n                    [\n                        ARCHITECTURE,\n                        \"arm64\"\n                    ]\n                ],\n                [\n                    /\\b(arm(?:v[67])?ht?n?[fl]p?)\\b/i // ARMHF\n                ],\n                [\n                    [\n                        ARCHITECTURE,\n                        \"armhf\"\n                    ]\n                ],\n                [\n                    // PocketPC mistakenly identified as PowerPC\n                    /windows (ce|mobile); ppc;/i\n                ],\n                [\n                    [\n                        ARCHITECTURE,\n                        \"arm\"\n                    ]\n                ],\n                [\n                    /((?:ppc|powerpc)(?:64)?)(?: mac|;|\\))/i // PowerPC\n                ],\n                [\n                    [\n                        ARCHITECTURE,\n                        /ower/,\n                        EMPTY,\n                        lowerize\n                    ]\n                ],\n                [\n                    /(sun4\\w)[;\\)]/i // SPARC\n                ],\n                [\n                    [\n                        ARCHITECTURE,\n                        \"sparc\"\n                    ]\n                ],\n                [\n                    /((?:avr32|ia64(?=;))|68k(?=\\))|\\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\\b|pa-risc)/i\n                ],\n                [\n                    [\n                        ARCHITECTURE,\n                        lowerize\n                    ]\n                ]\n            ],\n            device: [\n                [\n                    //////////////////////////\n                    // MOBILES & TABLETS\n                    // Ordered by popularity\n                    /////////////////////////\n                    // Samsung\n                    /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        SAMSUNG\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b((?:s[cgp]h|gt|sm)-\\w+|galaxy nexus)/i,\n                    /samsung[- ]([-\\w]+)/i,\n                    /sec-(sgh\\w+)/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        SAMSUNG\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Apple\n                    /\\((ip(?:hone|od)[\\w ]*);/i // iPod/iPhone\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        APPLE\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\((ipad);[-\\w\\),; ]+apple/i,\n                    /applecoremedia\\/[\\w\\.]+ \\((ipad)/i,\n                    /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        APPLE\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /(macintosh);/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        APPLE\n                    ]\n                ],\n                [\n                    // Huawei\n                    /\\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\\d{2})\\b(?!.+d\\/s)/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        HUAWEI\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /(?:huawei|honor)([-\\w ]+)[;\\)]/i,\n                    /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        HUAWEI\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Xiaomi\n                    /\\b(poco[\\w ]+)(?: bui|\\))/i,\n                    /\\b; (\\w+) build\\/hm\\1/i,\n                    /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,\n                    /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,\n                    /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\\))/i // Xiaomi Mi\n                ],\n                [\n                    [\n                        MODEL,\n                        /_/g,\n                        \" \"\n                    ],\n                    [\n                        VENDOR,\n                        XIAOMI\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\b(mi[-_ ]?(?:pad)(?:[\\w_ ]+))(?: bui|\\))/i // Mi Pad tablets\n                ],\n                [\n                    [\n                        MODEL,\n                        /_/g,\n                        \" \"\n                    ],\n                    [\n                        VENDOR,\n                        XIAOMI\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    // OPPO\n                    /; (\\w+) bui.+ oppo/i,\n                    /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"OPPO\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Vivo\n                    /vivo (\\w+)(?: bui|\\))/i,\n                    /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Vivo\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Realme\n                    /\\b(rmx[12]\\d{3})(?: bui|;|\\))/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Realme\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Motorola\n                    /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i,\n                    /\\bmot(?:orola)?[- ](\\w*)/i,\n                    /((?:moto[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        MOTOROLA\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        MOTOROLA\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    // LG\n                    /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        LG\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i,\n                    /\\blg[-e;\\/ ]+((?!browser|netcast|android tv)\\w+)/i,\n                    /\\blg-?([\\d\\w]+) bui/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        LG\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Lenovo\n                    /(ideatab[-\\w ]+)/i,\n                    /lenovo ?(s[56]000[-\\w]+|tab(?:[\\w ]+)|yt[-\\d\\w]{6}|tb[-\\d\\w]{6})/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Lenovo\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    // Nokia\n                    /(?:maemo|nokia).*(n900|lumia \\d+)/i,\n                    /nokia[-_ ]?([-\\w\\.]*)/i\n                ],\n                [\n                    [\n                        MODEL,\n                        /_/g,\n                        \" \"\n                    ],\n                    [\n                        VENDOR,\n                        \"Nokia\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Google\n                    /(pixel c)\\b/i // Google Pixel C\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        GOOGLE\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i // Google Pixel\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        GOOGLE\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Sony\n                    /droid.+ (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        SONY\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /sony tablet [ps]/i,\n                    /\\b(?:sony)?sgp\\w+(?: bui|\\))/i\n                ],\n                [\n                    [\n                        MODEL,\n                        \"Xperia Tablet\"\n                    ],\n                    [\n                        VENDOR,\n                        SONY\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    // OnePlus\n                    / (kb2005|in20[12]5|be20[12][59])\\b/i,\n                    /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"OnePlus\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Amazon\n                    /(alexa)webm/i,\n                    /(kf[a-z]{2}wi)( bui|\\))/i,\n                    /(kf[a-z]+)( bui|\\)).+silk\\//i // Kindle Fire HD\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        AMAZON\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i // Fire Phone\n                ],\n                [\n                    [\n                        MODEL,\n                        /(.+)/g,\n                        \"Fire Phone $1\"\n                    ],\n                    [\n                        VENDOR,\n                        AMAZON\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // BlackBerry\n                    /(playbook);[-\\w\\),; ]+(rim)/i // BlackBerry PlayBook\n                ],\n                [\n                    MODEL,\n                    VENDOR,\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b((?:bb[a-f]|st[hv])100-\\d)/i,\n                    /\\(bb10; (\\w+)/i // BlackBerry 10\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        BLACKBERRY\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Asus\n                    /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        ASUS\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    / (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        ASUS\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // HTC\n                    /(nexus 9)/i // HTC Nexus 9\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"HTC\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,\n                    // ZTE\n                    /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i,\n                    /(alcatel|geeksphone|nexian|panasonic|sony(?!-bra))[-_ ]?([-\\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n                ],\n                [\n                    VENDOR,\n                    [\n                        MODEL,\n                        /_/g,\n                        \" \"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Acer\n                    /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Acer\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    // Meizu\n                    /droid.+; (m[1-5] note) bui/i,\n                    /\\bmz-([-\\w]{2,})/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Meizu\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // Sharp\n                    /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        SHARP\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    // MIXED\n                    /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\\w]*)/i,\n                    // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron\n                    /(hp) ([\\w ]+\\w)/i,\n                    /(asus)-?(\\w+)/i,\n                    /(microsoft); (lumia[\\w ]+)/i,\n                    /(lenovo)[-_ ]?([-\\w]+)/i,\n                    /(jolla)/i,\n                    /(oppo) ?([\\w ]+) bui/i // OPPO\n                ],\n                [\n                    VENDOR,\n                    MODEL,\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /(archos) (gamepad2?)/i,\n                    /(hp).+(touchpad(?!.+tablet)|tablet)/i,\n                    /(kindle)\\/([\\w\\.]+)/i,\n                    /(nook)[\\w ]+build\\/(\\w+)/i,\n                    /(dell) (strea[kpr\\d ]*[\\dko])/i,\n                    /(le[- ]+pan)[- ]+(\\w{1,9}) bui/i,\n                    /(trinity)[- ]*(t\\d{3}) bui/i,\n                    /(gigaset)[- ]+(q\\w{1,9}) bui/i,\n                    /(vodafone) ([\\w ]+)(?:\\)| bui)/i // Vodafone\n                ],\n                [\n                    VENDOR,\n                    MODEL,\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /(surface duo)/i // Surface Duo\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        MICROSOFT\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i // Fairphone\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Fairphone\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /(u304aa)/i // AT&T\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"AT&T\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\bsie-(\\w*)/i // Siemens\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Siemens\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\b(rct\\w+) b/i // RCA Tablets\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"RCA\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b(venue[\\d ]{2,7}) b/i // Dell Venue Tablets\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Dell\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b(q(?:mv|ta)\\w+) b/i // Verizon Tablet\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Verizon\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b(?:barnes[& ]+noble |bn[rt])([\\w\\+ ]*) b/i // Barnes & Noble Tablet\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Barnes & Noble\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b(tm\\d{3}\\w+) b/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"NuVision\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b(k88) b/i // ZTE K Series Tablet\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"ZTE\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b(nx\\d{3}j) b/i // ZTE Nubia\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"ZTE\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\b(gen\\d{3}) b.+49h/i // Swiss GEN Mobile\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Swiss\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\b(zur\\d{3}) b/i // Swiss ZUR Tablet\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Swiss\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b((zeki)?tb.*\\b) b/i // Zeki Tablets\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Zeki\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b([yr]\\d{2}) b/i,\n                    /\\b(dragon[- ]+touch |dt)(\\w{5}) b/i // Dragon Touch Tablet\n                ],\n                [\n                    [\n                        VENDOR,\n                        \"Dragon Touch\"\n                    ],\n                    MODEL,\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b(ns-?\\w{0,9}) b/i // Insignia Tablets\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Insignia\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b((nxa|next)-?\\w{0,9}) b/i // NextBook Tablets\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"NextBook\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b(xtreme\\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones\n                ],\n                [\n                    [\n                        VENDOR,\n                        \"Voice\"\n                    ],\n                    MODEL,\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\b(lvtel\\-)?(v1[12]) b/i // LvTel Phones\n                ],\n                [\n                    [\n                        VENDOR,\n                        \"LvTel\"\n                    ],\n                    MODEL,\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\b(ph-1) /i // Essential PH-1\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Essential\"\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /\\b(v(100md|700na|7011|917g).*\\b) b/i // Envizen Tablets\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Envizen\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b(trio[-\\w\\. ]+) b/i // MachSpeed Tablets\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"MachSpeed\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\btu_(1491) b/i // Rotor Tablets\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Rotor\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /(shield[\\w ]+) b/i // Nvidia Shield Tablets\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Nvidia\"\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /(sprint) (\\w+)/i // Sprint Phones\n                ],\n                [\n                    VENDOR,\n                    MODEL,\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /(kin\\.[onetw]{3})/i // Microsoft Kin\n                ],\n                [\n                    [\n                        MODEL,\n                        /\\./g,\n                        \" \"\n                    ],\n                    [\n                        VENDOR,\n                        MICROSOFT\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i // Zebra\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        ZEBRA\n                    ],\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        ZEBRA\n                    ],\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    ///////////////////\n                    // CONSOLES\n                    ///////////////////\n                    /(ouya)/i,\n                    /(nintendo) ([wids3utch]+)/i // Nintendo\n                ],\n                [\n                    VENDOR,\n                    MODEL,\n                    [\n                        TYPE,\n                        CONSOLE\n                    ]\n                ],\n                [\n                    /droid.+; (shield) bui/i // Nvidia\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Nvidia\"\n                    ],\n                    [\n                        TYPE,\n                        CONSOLE\n                    ]\n                ],\n                [\n                    /(playstation [345portablevi]+)/i // Playstation\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        SONY\n                    ],\n                    [\n                        TYPE,\n                        CONSOLE\n                    ]\n                ],\n                [\n                    /\\b(xbox(?: one)?(?!; xbox))[\\); ]/i // Microsoft Xbox\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        MICROSOFT\n                    ],\n                    [\n                        TYPE,\n                        CONSOLE\n                    ]\n                ],\n                [\n                    ///////////////////\n                    // SMARTTVS\n                    ///////////////////\n                    /smart-tv.+(samsung)/i // Samsung\n                ],\n                [\n                    VENDOR,\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /hbbtv.+maple;(\\d+)/i\n                ],\n                [\n                    [\n                        MODEL,\n                        /^/,\n                        \"SmartTV\"\n                    ],\n                    [\n                        VENDOR,\n                        SAMSUNG\n                    ],\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i // LG SmartTV\n                ],\n                [\n                    [\n                        VENDOR,\n                        LG\n                    ],\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /(apple) ?tv/i // Apple TV\n                ],\n                [\n                    VENDOR,\n                    [\n                        MODEL,\n                        APPLE + \" TV\"\n                    ],\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /crkey/i // Google Chromecast\n                ],\n                [\n                    [\n                        MODEL,\n                        CHROME + \"cast\"\n                    ],\n                    [\n                        VENDOR,\n                        GOOGLE\n                    ],\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /droid.+aft(\\w)( bui|\\))/i // Fire TV\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        AMAZON\n                    ],\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /\\(dtv[\\);].+(aquos)/i,\n                    /(aquos-tv[\\w ]+)\\)/i // Sharp\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        SHARP\n                    ],\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /(bravia[\\w ]+)( bui|\\))/i // Sony\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        SONY\n                    ],\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /(mitv-\\w{5}) bui/i // Xiaomi\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        XIAOMI\n                    ],\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,\n                    /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w ]*; *(\\w[^;]*);([^;]*)/i // HbbTV devices\n                ],\n                [\n                    [\n                        VENDOR,\n                        trim\n                    ],\n                    [\n                        MODEL,\n                        trim\n                    ],\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    /\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i // SmartTV from Unidentified Vendors\n                ],\n                [\n                    [\n                        TYPE,\n                        SMARTTV\n                    ]\n                ],\n                [\n                    ///////////////////\n                    // WEARABLES\n                    ///////////////////\n                    /((pebble))app/i // Pebble\n                ],\n                [\n                    VENDOR,\n                    MODEL,\n                    [\n                        TYPE,\n                        WEARABLE\n                    ]\n                ],\n                [\n                    /droid.+; (glass) \\d/i // Google Glass\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        GOOGLE\n                    ],\n                    [\n                        TYPE,\n                        WEARABLE\n                    ]\n                ],\n                [\n                    /droid.+; (wt63?0{2,3})\\)/i\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        ZEBRA\n                    ],\n                    [\n                        TYPE,\n                        WEARABLE\n                    ]\n                ],\n                [\n                    /(quest( 2)?)/i // Oculus Quest\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        FACEBOOK\n                    ],\n                    [\n                        TYPE,\n                        WEARABLE\n                    ]\n                ],\n                [\n                    ///////////////////\n                    // EMBEDDED\n                    ///////////////////\n                    /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i // Tesla\n                ],\n                [\n                    VENDOR,\n                    [\n                        TYPE,\n                        EMBEDDED\n                    ]\n                ],\n                [\n                    ////////////////////\n                    // MIXED (GENERIC)\n                    ///////////////////\n                    /droid .+?; ([^;]+?)(?: bui|\\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors\n                ],\n                [\n                    MODEL,\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /droid .+?; ([^;]+?)(?: bui|\\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors\n                ],\n                [\n                    MODEL,\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i // Unidentifiable Tablet\n                ],\n                [\n                    [\n                        TYPE,\n                        TABLET\n                    ]\n                ],\n                [\n                    /(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile\n                ],\n                [\n                    [\n                        TYPE,\n                        MOBILE\n                    ]\n                ],\n                [\n                    /(android[-\\w\\. ]{0,9});.+buil/i // Generic Android Device\n                ],\n                [\n                    MODEL,\n                    [\n                        VENDOR,\n                        \"Generic\"\n                    ]\n                ]\n            ],\n            engine: [\n                [\n                    /windows.+ edge\\/([\\w\\.]+)/i // EdgeHTML\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        EDGE + \"HTML\"\n                    ]\n                ],\n                [\n                    /webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i // Blink\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Blink\"\n                    ]\n                ],\n                [\n                    /(presto)\\/([\\w\\.]+)/i,\n                    /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\\/([\\w\\.]+)/i,\n                    /ekioh(flow)\\/([\\w\\.]+)/i,\n                    /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,\n                    /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i // iCab\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i // Gecko\n                ],\n                [\n                    VERSION,\n                    NAME\n                ]\n            ],\n            os: [\n                [\n                    // Windows\n                    /microsoft (windows) (vista|xp)/i // Windows (iTunes)\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /(windows) nt 6\\.2; (arm)/i,\n                    /(windows (?:phone(?: os)?|mobile))[\\/ ]?([\\d\\.\\w ]*)/i,\n                    /(windows)[\\/ ]?([ntce\\d\\. ]+\\w)(?!.+xbox)/i\n                ],\n                [\n                    NAME,\n                    [\n                        VERSION,\n                        strMapper,\n                        windowsVersionMap\n                    ]\n                ],\n                [\n                    /(win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i\n                ],\n                [\n                    [\n                        NAME,\n                        \"Windows\"\n                    ],\n                    [\n                        VERSION,\n                        strMapper,\n                        windowsVersionMap\n                    ]\n                ],\n                [\n                    // iOS/macOS\n                    /ip[honead]{2,4}\\b(?:.*os ([\\w]+) like mac|; opera)/i,\n                    /cfnetwork\\/.+darwin/i\n                ],\n                [\n                    [\n                        VERSION,\n                        /_/g,\n                        \".\"\n                    ],\n                    [\n                        NAME,\n                        \"iOS\"\n                    ]\n                ],\n                [\n                    /(mac os x) ?([\\w\\. ]*)/i,\n                    /(macintosh|mac_powerpc\\b)(?!.+haiku)/i // Mac OS\n                ],\n                [\n                    [\n                        NAME,\n                        \"Mac OS\"\n                    ],\n                    [\n                        VERSION,\n                        /_/g,\n                        \".\"\n                    ]\n                ],\n                [\n                    // Mobile OSes\n                    /droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i // Android-x86/HarmonyOS\n                ],\n                [\n                    VERSION,\n                    NAME\n                ],\n                [\n                    /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\\/ ]?([\\w\\.]*)/i,\n                    /(blackberry)\\w*\\/([\\w\\.]*)/i,\n                    /(tizen|kaios)[\\/ ]([\\w\\.]+)/i,\n                    /\\((series40);/i // Series 40\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /\\(bb(10);/i // BlackBerry 10\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        BLACKBERRY\n                    ]\n                ],\n                [\n                    /(?:symbian ?os|symbos|s60(?=;)|series60)[-\\/ ]?([\\w\\.]*)/i // Symbian\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"Symbian\"\n                    ]\n                ],\n                [\n                    /mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i // Firefox OS\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        FIREFOX + \" OS\"\n                    ]\n                ],\n                [\n                    /web0s;.+rt(tv)/i,\n                    /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i // WebOS\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        \"webOS\"\n                    ]\n                ],\n                [\n                    // Google Chromecast\n                    /crkey\\/([\\d\\.]+)/i // Google Chromecast\n                ],\n                [\n                    VERSION,\n                    [\n                        NAME,\n                        CHROME + \"cast\"\n                    ]\n                ],\n                [\n                    /(cros) [\\w]+ ([\\w\\.]+\\w)/i // Chromium OS\n                ],\n                [\n                    [\n                        NAME,\n                        \"Chromium OS\"\n                    ],\n                    VERSION\n                ],\n                [\n                    // Console\n                    /(nintendo|playstation) ([wids345portablevuch]+)/i,\n                    /(xbox); +xbox ([^\\);]+)/i,\n                    // Other\n                    /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,\n                    /(mint)[\\/\\(\\) ]?(\\w*)/i,\n                    /(mageia|vectorlinux)[; ]/i,\n                    /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n                    // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire\n                    /(hurd|linux) ?([\\w\\.]*)/i,\n                    /(gnu) ?([\\w\\.]*)/i,\n                    /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i,\n                    /(haiku) (\\w+)/i // Haiku\n                ],\n                [\n                    NAME,\n                    VERSION\n                ],\n                [\n                    /(sunos) ?([\\w\\.\\d]*)/i // Solaris\n                ],\n                [\n                    [\n                        NAME,\n                        \"Solaris\"\n                    ],\n                    VERSION\n                ],\n                [\n                    /((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,\n                    /(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i,\n                    /\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,\n                    /(unix) ?([\\w\\.]*)/i // UNIX\n                ],\n                [\n                    NAME,\n                    VERSION\n                ]\n            ]\n        };\n        /////////////////\n        // Constructor\n        ////////////////\n        var UAParser = function(ua, extensions) {\n            if (typeof ua === OBJ_TYPE) {\n                extensions = ua;\n                ua = undefined$1;\n            }\n            if (!(this instanceof UAParser)) {\n                return new UAParser(ua, extensions).getResult();\n            }\n            var _ua = ua || (typeof window1 !== UNDEF_TYPE && window1.navigator && window1.navigator.userAgent ? window1.navigator.userAgent : EMPTY);\n            var _rgxmap = extensions ? extend(regexes, extensions) : regexes;\n            this.getBrowser = function() {\n                var _browser = {};\n                _browser[NAME] = undefined$1;\n                _browser[VERSION] = undefined$1;\n                rgxMapper.call(_browser, _ua, _rgxmap.browser);\n                _browser.major = majorize(_browser.version);\n                return _browser;\n            };\n            this.getCPU = function() {\n                var _cpu = {};\n                _cpu[ARCHITECTURE] = undefined$1;\n                rgxMapper.call(_cpu, _ua, _rgxmap.cpu);\n                return _cpu;\n            };\n            this.getDevice = function() {\n                var _device = {};\n                _device[VENDOR] = undefined$1;\n                _device[MODEL] = undefined$1;\n                _device[TYPE] = undefined$1;\n                rgxMapper.call(_device, _ua, _rgxmap.device);\n                return _device;\n            };\n            this.getEngine = function() {\n                var _engine = {};\n                _engine[NAME] = undefined$1;\n                _engine[VERSION] = undefined$1;\n                rgxMapper.call(_engine, _ua, _rgxmap.engine);\n                return _engine;\n            };\n            this.getOS = function() {\n                var _os = {};\n                _os[NAME] = undefined$1;\n                _os[VERSION] = undefined$1;\n                rgxMapper.call(_os, _ua, _rgxmap.os);\n                return _os;\n            };\n            this.getResult = function() {\n                return {\n                    ua: this.getUA(),\n                    browser: this.getBrowser(),\n                    engine: this.getEngine(),\n                    os: this.getOS(),\n                    device: this.getDevice(),\n                    cpu: this.getCPU()\n                };\n            };\n            this.getUA = function() {\n                return _ua;\n            };\n            this.setUA = function(ua) {\n                _ua = typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH ? trim(ua, UA_MAX_LENGTH) : ua;\n                return this;\n            };\n            this.setUA(_ua);\n            return this;\n        };\n        UAParser.VERSION = LIBVERSION;\n        UAParser.BROWSER = enumerize([\n            NAME,\n            VERSION,\n            MAJOR\n        ]);\n        UAParser.CPU = enumerize([\n            ARCHITECTURE\n        ]);\n        UAParser.DEVICE = enumerize([\n            MODEL,\n            VENDOR,\n            TYPE,\n            CONSOLE,\n            MOBILE,\n            SMARTTV,\n            TABLET,\n            WEARABLE,\n            EMBEDDED\n        ]);\n        UAParser.ENGINE = UAParser.OS = enumerize([\n            NAME,\n            VERSION\n        ]);\n        ///////////\n        // Export\n        //////////\n        // check js environment\n        {\n            // nodejs env\n            if (module1.exports) {\n                exports = module1.exports = UAParser;\n            }\n            exports.UAParser = UAParser;\n        }\n        // jQuery/Zepto specific (optional)\n        // Note:\n        //   In AMD env the global scope should be kept clean, but jQuery is an exception.\n        //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,\n        //   and we should catch that.\n        var $ = typeof window1 !== UNDEF_TYPE && (window1.jQuery || window1.Zepto);\n        if ($ && !$.ua) {\n            var parser = new UAParser();\n            $.ua = parser.getResult();\n            $.ua.get = function() {\n                return parser.getUA();\n            };\n            $.ua.set = function(ua) {\n                parser.setUA(ua);\n                var result = parser.getResult();\n                for(var prop in result){\n                    $.ua[prop] = result[prop];\n                }\n            };\n        }\n    })( false ? 0 : commonjsGlobal);\n})(uaParser, uaParser.exports);\nvar UAParser = uaParser.exports;\nvar mp4box_all = {};\n(function(exports) {\n    // file:src/log.js\n    /* \n * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato\n * License: BSD-3-Clause (see LICENSE file)\n */ var Log = function() {\n        var start = new Date();\n        var LOG_LEVEL_ERROR = 4;\n        var LOG_LEVEL_WARNING = 3;\n        var LOG_LEVEL_INFO = 2;\n        var LOG_LEVEL_DEBUG = 1;\n        var log_level = LOG_LEVEL_ERROR;\n        var logObject = {\n            setLogLevel: function(level) {\n                if (level == this.debug) log_level = LOG_LEVEL_DEBUG;\n                else if (level == this.info) log_level = LOG_LEVEL_INFO;\n                else if (level == this.warn) log_level = LOG_LEVEL_WARNING;\n                else if (level == this.error) log_level = LOG_LEVEL_ERROR;\n                else log_level = LOG_LEVEL_ERROR;\n            },\n            debug: function(module1, msg) {\n                if (console.debug === undefined) {\n                    console.debug = console.log;\n                }\n                if (LOG_LEVEL_DEBUG >= log_level) {\n                    console.debug(\"[\" + Log.getDurationString(new Date() - start, 1000) + \"]\", \"[\" + module1 + \"]\", msg);\n                }\n            },\n            log: function(module1, msg) {\n                this.debug(module1.msg);\n            },\n            info: function(module1, msg) {\n                if (LOG_LEVEL_INFO >= log_level) {\n                    console.info(\"[\" + Log.getDurationString(new Date() - start, 1000) + \"]\", \"[\" + module1 + \"]\", msg);\n                }\n            },\n            warn: function(module1, msg) {\n                if (LOG_LEVEL_WARNING >= log_level) {\n                    console.warn(\"[\" + Log.getDurationString(new Date() - start, 1000) + \"]\", \"[\" + module1 + \"]\", msg);\n                }\n            },\n            error: function(module1, msg) {\n                if (LOG_LEVEL_ERROR >= log_level) {\n                    console.error(\"[\" + Log.getDurationString(new Date() - start, 1000) + \"]\", \"[\" + module1 + \"]\", msg);\n                }\n            }\n        };\n        return logObject;\n    }();\n    /* Helper function to print a duration value in the form H:MM:SS.MS */ Log.getDurationString = function(duration, _timescale) {\n        var neg;\n        /* Helper function to print a number on a fixed number of digits */ function pad(number, length) {\n            var str = \"\" + number;\n            var a = str.split(\".\");\n            while(a[0].length < length){\n                a[0] = \"0\" + a[0];\n            }\n            return a.join(\".\");\n        }\n        if (duration < 0) {\n            neg = true;\n            duration = -duration;\n        } else {\n            neg = false;\n        }\n        var timescale = _timescale || 1;\n        var duration_sec = duration / timescale;\n        var hours = Math.floor(duration_sec / 3600);\n        duration_sec -= hours * 3600;\n        var minutes = Math.floor(duration_sec / 60);\n        duration_sec -= minutes * 60;\n        var msec = duration_sec * 1000;\n        duration_sec = Math.floor(duration_sec);\n        msec -= duration_sec * 1000;\n        msec = Math.floor(msec);\n        return (neg ? \"-\" : \"\") + hours + \":\" + pad(minutes, 2) + \":\" + pad(duration_sec, 2) + \".\" + pad(msec, 3);\n    };\n    /* Helper function to stringify HTML5 TimeRanges objects */ Log.printRanges = function(ranges) {\n        var length = ranges.length;\n        if (length > 0) {\n            var str = \"\";\n            for(var i = 0; i < length; i++){\n                if (i > 0) str += \",\";\n                str += \"[\" + Log.getDurationString(ranges.start(i)) + \",\" + Log.getDurationString(ranges.end(i)) + \"]\";\n            }\n            return str;\n        } else {\n            return \"(empty)\";\n        }\n    };\n    {\n        exports.Log = Log;\n    }\n    // file:src/stream.js\n    var MP4BoxStream = function(arrayBuffer) {\n        if (arrayBuffer instanceof ArrayBuffer) {\n            this.buffer = arrayBuffer;\n            this.dataview = new DataView(arrayBuffer);\n        } else {\n            throw \"Needs an array buffer\";\n        }\n        this.position = 0;\n    };\n    /*************************************************************************\n  Common API between MultiBufferStream and SimpleStream\n *************************************************************************/ MP4BoxStream.prototype.getPosition = function() {\n        return this.position;\n    };\n    MP4BoxStream.prototype.getEndPosition = function() {\n        return this.buffer.byteLength;\n    };\n    MP4BoxStream.prototype.getLength = function() {\n        return this.buffer.byteLength;\n    };\n    MP4BoxStream.prototype.seek = function(pos) {\n        var npos = Math.max(0, Math.min(this.buffer.byteLength, pos));\n        this.position = isNaN(npos) || !isFinite(npos) ? 0 : npos;\n        return true;\n    };\n    MP4BoxStream.prototype.isEos = function() {\n        return this.getPosition() >= this.getEndPosition();\n    };\n    /*************************************************************************\n  Read methods, simimar to DataStream but simpler\n *************************************************************************/ MP4BoxStream.prototype.readAnyInt = function(size, signed) {\n        var res = 0;\n        if (this.position + size <= this.buffer.byteLength) {\n            switch(size){\n                case 1:\n                    if (signed) {\n                        res = this.dataview.getInt8(this.position);\n                    } else {\n                        res = this.dataview.getUint8(this.position);\n                    }\n                    break;\n                case 2:\n                    if (signed) {\n                        res = this.dataview.getInt16(this.position);\n                    } else {\n                        res = this.dataview.getUint16(this.position);\n                    }\n                    break;\n                case 3:\n                    if (signed) {\n                        throw \"No method for reading signed 24 bits values\";\n                    } else {\n                        res = this.dataview.getUint8(this.position) << 16;\n                        res |= this.dataview.getUint8(this.position + 1) << 8;\n                        res |= this.dataview.getUint8(this.position + 2);\n                    }\n                    break;\n                case 4:\n                    if (signed) {\n                        res = this.dataview.getInt32(this.position);\n                    } else {\n                        res = this.dataview.getUint32(this.position);\n                    }\n                    break;\n                case 8:\n                    if (signed) {\n                        throw \"No method for reading signed 64 bits values\";\n                    } else {\n                        res = this.dataview.getUint32(this.position) << 32;\n                        res |= this.dataview.getUint32(this.position + 4);\n                    }\n                    break;\n                default:\n                    throw \"readInt method not implemented for size: \" + size;\n            }\n            this.position += size;\n            return res;\n        } else {\n            throw \"Not enough bytes in buffer\";\n        }\n    };\n    MP4BoxStream.prototype.readUint8 = function() {\n        return this.readAnyInt(1, false);\n    };\n    MP4BoxStream.prototype.readUint16 = function() {\n        return this.readAnyInt(2, false);\n    };\n    MP4BoxStream.prototype.readUint24 = function() {\n        return this.readAnyInt(3, false);\n    };\n    MP4BoxStream.prototype.readUint32 = function() {\n        return this.readAnyInt(4, false);\n    };\n    MP4BoxStream.prototype.readUint64 = function() {\n        return this.readAnyInt(8, false);\n    };\n    MP4BoxStream.prototype.readString = function(length) {\n        if (this.position + length <= this.buffer.byteLength) {\n            var s = \"\";\n            for(var i = 0; i < length; i++){\n                s += String.fromCharCode(this.readUint8());\n            }\n            return s;\n        } else {\n            throw \"Not enough bytes in buffer\";\n        }\n    };\n    MP4BoxStream.prototype.readCString = function() {\n        var arr = [];\n        while(true){\n            var b = this.readUint8();\n            if (b !== 0) {\n                arr.push(b);\n            } else {\n                break;\n            }\n        }\n        return String.fromCharCode.apply(null, arr);\n    };\n    MP4BoxStream.prototype.readInt8 = function() {\n        return this.readAnyInt(1, true);\n    };\n    MP4BoxStream.prototype.readInt16 = function() {\n        return this.readAnyInt(2, true);\n    };\n    MP4BoxStream.prototype.readInt32 = function() {\n        return this.readAnyInt(4, true);\n    };\n    MP4BoxStream.prototype.readInt64 = function() {\n        return this.readAnyInt(8, false);\n    };\n    MP4BoxStream.prototype.readUint8Array = function(length) {\n        var arr = new Uint8Array(length);\n        for(var i = 0; i < length; i++){\n            arr[i] = this.readUint8();\n        }\n        return arr;\n    };\n    MP4BoxStream.prototype.readInt16Array = function(length) {\n        var arr = new Int16Array(length);\n        for(var i = 0; i < length; i++){\n            arr[i] = this.readInt16();\n        }\n        return arr;\n    };\n    MP4BoxStream.prototype.readUint16Array = function(length) {\n        var arr = new Int16Array(length);\n        for(var i = 0; i < length; i++){\n            arr[i] = this.readUint16();\n        }\n        return arr;\n    };\n    MP4BoxStream.prototype.readUint32Array = function(length) {\n        var arr = new Uint32Array(length);\n        for(var i = 0; i < length; i++){\n            arr[i] = this.readUint32();\n        }\n        return arr;\n    };\n    MP4BoxStream.prototype.readInt32Array = function(length) {\n        var arr = new Int32Array(length);\n        for(var i = 0; i < length; i++){\n            arr[i] = this.readInt32();\n        }\n        return arr;\n    };\n    {\n        exports.MP4BoxStream = MP4BoxStream;\n    }\n    /**\n  DataStream reads scalars, arrays and structs of data from an ArrayBuffer.\n  It's like a file-like DataView on steroids.\n\n  @param {ArrayBuffer} arrayBuffer ArrayBuffer to read from.\n  @param {?Number} byteOffset Offset from arrayBuffer beginning for the DataStream.\n  @param {?Boolean} endianness DataStream.BIG_ENDIAN or DataStream.LITTLE_ENDIAN (the default).\n  */ var DataStream = function(arrayBuffer, byteOffset, endianness) {\n        this._byteOffset = byteOffset || 0;\n        if (arrayBuffer instanceof ArrayBuffer) {\n            this.buffer = arrayBuffer;\n        } else if (typeof arrayBuffer == \"object\") {\n            this.dataView = arrayBuffer;\n            if (byteOffset) {\n                this._byteOffset += byteOffset;\n            }\n        } else {\n            this.buffer = new ArrayBuffer(arrayBuffer || 0);\n        }\n        this.position = 0;\n        this.endianness = endianness == null ? DataStream.LITTLE_ENDIAN : endianness;\n    };\n    DataStream.prototype = {};\n    DataStream.prototype.getPosition = function() {\n        return this.position;\n    };\n    /**\n  Internal function to resize the DataStream buffer when required.\n  @param {number} extra Number of bytes to add to the buffer allocation.\n  @return {null}\n  */ DataStream.prototype._realloc = function(extra) {\n        if (!this._dynamicSize) {\n            return;\n        }\n        var req = this._byteOffset + this.position + extra;\n        var blen = this._buffer.byteLength;\n        if (req <= blen) {\n            if (req > this._byteLength) {\n                this._byteLength = req;\n            }\n            return;\n        }\n        if (blen < 1) {\n            blen = 1;\n        }\n        while(req > blen){\n            blen *= 2;\n        }\n        var buf = new ArrayBuffer(blen);\n        var src = new Uint8Array(this._buffer);\n        var dst = new Uint8Array(buf, 0, src.length);\n        dst.set(src);\n        this.buffer = buf;\n        this._byteLength = req;\n    };\n    /**\n  Internal function to trim the DataStream buffer when required.\n  Used for stripping out the extra bytes from the backing buffer when\n  the virtual byteLength is smaller than the buffer byteLength (happens after\n  growing the buffer with writes and not filling the extra space completely).\n\n  @return {null}\n  */ DataStream.prototype._trimAlloc = function() {\n        if (this._byteLength == this._buffer.byteLength) {\n            return;\n        }\n        var buf = new ArrayBuffer(this._byteLength);\n        var dst = new Uint8Array(buf);\n        var src = new Uint8Array(this._buffer, 0, dst.length);\n        dst.set(src);\n        this.buffer = buf;\n    };\n    /**\n  Big-endian const to use as default endianness.\n  @type {boolean}\n  */ DataStream.BIG_ENDIAN = false;\n    /**\n  Little-endian const to use as default endianness.\n  @type {boolean}\n  */ DataStream.LITTLE_ENDIAN = true;\n    /**\n  Virtual byte length of the DataStream backing buffer.\n  Updated to be max of original buffer size and last written size.\n  If dynamicSize is false is set to buffer size.\n  @type {number}\n  */ DataStream.prototype._byteLength = 0;\n    /**\n  Returns the byte length of the DataStream object.\n  @type {number}\n  */ Object.defineProperty(DataStream.prototype, \"byteLength\", {\n        get: function() {\n            return this._byteLength - this._byteOffset;\n        }\n    });\n    /**\n  Set/get the backing ArrayBuffer of the DataStream object.\n  The setter updates the DataView to point to the new buffer.\n  @type {Object}\n  */ Object.defineProperty(DataStream.prototype, \"buffer\", {\n        get: function() {\n            this._trimAlloc();\n            return this._buffer;\n        },\n        set: function(v) {\n            this._buffer = v;\n            this._dataView = new DataView(this._buffer, this._byteOffset);\n            this._byteLength = this._buffer.byteLength;\n        }\n    });\n    /**\n  Set/get the byteOffset of the DataStream object.\n  The setter updates the DataView to point to the new byteOffset.\n  @type {number}\n  */ Object.defineProperty(DataStream.prototype, \"byteOffset\", {\n        get: function() {\n            return this._byteOffset;\n        },\n        set: function(v) {\n            this._byteOffset = v;\n            this._dataView = new DataView(this._buffer, this._byteOffset);\n            this._byteLength = this._buffer.byteLength;\n        }\n    });\n    /**\n  Set/get the backing DataView of the DataStream object.\n  The setter updates the buffer and byteOffset to point to the DataView values.\n  @type {Object}\n  */ Object.defineProperty(DataStream.prototype, \"dataView\", {\n        get: function() {\n            return this._dataView;\n        },\n        set: function(v) {\n            this._byteOffset = v.byteOffset;\n            this._buffer = v.buffer;\n            this._dataView = new DataView(this._buffer, this._byteOffset);\n            this._byteLength = this._byteOffset + v.byteLength;\n        }\n    });\n    /**\n  Sets the DataStream read/write position to given position.\n  Clamps between 0 and DataStream length.\n\n  @param {number} pos Position to seek to.\n  @return {null}\n  */ DataStream.prototype.seek = function(pos) {\n        var npos = Math.max(0, Math.min(this.byteLength, pos));\n        this.position = isNaN(npos) || !isFinite(npos) ? 0 : npos;\n    };\n    /**\n  Returns true if the DataStream seek pointer is at the end of buffer and\n  there's no more data to read.\n\n  @return {boolean} True if the seek pointer is at the end of the buffer.\n  */ DataStream.prototype.isEof = function() {\n        return this.position >= this._byteLength;\n    };\n    /**\n  Maps a Uint8Array into the DataStream buffer.\n\n  Nice for quickly reading in data.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} Uint8Array to the DataStream backing buffer.\n  */ DataStream.prototype.mapUint8Array = function(length) {\n        this._realloc(length * 1);\n        var arr = new Uint8Array(this._buffer, this.byteOffset + this.position, length);\n        this.position += length * 1;\n        return arr;\n    };\n    /**\n  Reads an Int32Array of desired length and endianness from the DataStream.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} The read Int32Array.\n */ DataStream.prototype.readInt32Array = function(length, e) {\n        length = length == null ? this.byteLength - this.position / 4 : length;\n        var arr = new Int32Array(length);\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += arr.byteLength;\n        return arr;\n    };\n    /**\n  Reads an Int16Array of desired length and endianness from the DataStream.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} The read Int16Array.\n */ DataStream.prototype.readInt16Array = function(length, e) {\n        length = length == null ? this.byteLength - this.position / 2 : length;\n        var arr = new Int16Array(length);\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += arr.byteLength;\n        return arr;\n    };\n    /**\n  Reads an Int8Array of desired length from the DataStream.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} The read Int8Array.\n */ DataStream.prototype.readInt8Array = function(length) {\n        length = length == null ? this.byteLength - this.position : length;\n        var arr = new Int8Array(length);\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\n        this.position += arr.byteLength;\n        return arr;\n    };\n    /**\n  Reads a Uint32Array of desired length and endianness from the DataStream.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} The read Uint32Array.\n */ DataStream.prototype.readUint32Array = function(length, e) {\n        length = length == null ? this.byteLength - this.position / 4 : length;\n        var arr = new Uint32Array(length);\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += arr.byteLength;\n        return arr;\n    };\n    /**\n  Reads a Uint16Array of desired length and endianness from the DataStream.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} The read Uint16Array.\n */ DataStream.prototype.readUint16Array = function(length, e) {\n        length = length == null ? this.byteLength - this.position / 2 : length;\n        var arr = new Uint16Array(length);\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += arr.byteLength;\n        return arr;\n    };\n    /**\n  Reads a Uint8Array of desired length from the DataStream.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} The read Uint8Array.\n */ DataStream.prototype.readUint8Array = function(length) {\n        length = length == null ? this.byteLength - this.position : length;\n        var arr = new Uint8Array(length);\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\n        this.position += arr.byteLength;\n        return arr;\n    };\n    /**\n  Reads a Float64Array of desired length and endianness from the DataStream.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} The read Float64Array.\n */ DataStream.prototype.readFloat64Array = function(length, e) {\n        length = length == null ? this.byteLength - this.position / 8 : length;\n        var arr = new Float64Array(length);\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += arr.byteLength;\n        return arr;\n    };\n    /**\n  Reads a Float32Array of desired length and endianness from the DataStream.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} The read Float32Array.\n */ DataStream.prototype.readFloat32Array = function(length, e) {\n        length = length == null ? this.byteLength - this.position / 4 : length;\n        var arr = new Float32Array(length);\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += arr.byteLength;\n        return arr;\n    };\n    /**\n  Reads a 32-bit int from the DataStream with the desired endianness.\n\n  @param {?boolean} e Endianness of the number.\n  @return {number} The read number.\n */ DataStream.prototype.readInt32 = function(e) {\n        var v = this._dataView.getInt32(this.position, e == null ? this.endianness : e);\n        this.position += 4;\n        return v;\n    };\n    /**\n  Reads a 16-bit int from the DataStream with the desired endianness.\n\n  @param {?boolean} e Endianness of the number.\n  @return {number} The read number.\n */ DataStream.prototype.readInt16 = function(e) {\n        var v = this._dataView.getInt16(this.position, e == null ? this.endianness : e);\n        this.position += 2;\n        return v;\n    };\n    /**\n  Reads an 8-bit int from the DataStream.\n\n  @return {number} The read number.\n */ DataStream.prototype.readInt8 = function() {\n        var v = this._dataView.getInt8(this.position);\n        this.position += 1;\n        return v;\n    };\n    /**\n  Reads a 32-bit unsigned int from the DataStream with the desired endianness.\n\n  @param {?boolean} e Endianness of the number.\n  @return {number} The read number.\n */ DataStream.prototype.readUint32 = function(e) {\n        var v = this._dataView.getUint32(this.position, e == null ? this.endianness : e);\n        this.position += 4;\n        return v;\n    };\n    /**\n  Reads a 16-bit unsigned int from the DataStream with the desired endianness.\n\n  @param {?boolean} e Endianness of the number.\n  @return {number} The read number.\n */ DataStream.prototype.readUint16 = function(e) {\n        var v = this._dataView.getUint16(this.position, e == null ? this.endianness : e);\n        this.position += 2;\n        return v;\n    };\n    /**\n  Reads an 8-bit unsigned int from the DataStream.\n\n  @return {number} The read number.\n */ DataStream.prototype.readUint8 = function() {\n        var v = this._dataView.getUint8(this.position);\n        this.position += 1;\n        return v;\n    };\n    /**\n  Reads a 32-bit float from the DataStream with the desired endianness.\n\n  @param {?boolean} e Endianness of the number.\n  @return {number} The read number.\n */ DataStream.prototype.readFloat32 = function(e) {\n        var v = this._dataView.getFloat32(this.position, e == null ? this.endianness : e);\n        this.position += 4;\n        return v;\n    };\n    /**\n  Reads a 64-bit float from the DataStream with the desired endianness.\n\n  @param {?boolean} e Endianness of the number.\n  @return {number} The read number.\n */ DataStream.prototype.readFloat64 = function(e) {\n        var v = this._dataView.getFloat64(this.position, e == null ? this.endianness : e);\n        this.position += 8;\n        return v;\n    };\n    /**\n  Native endianness. Either DataStream.BIG_ENDIAN or DataStream.LITTLE_ENDIAN\n  depending on the platform endianness.\n\n  @type {boolean}\n */ DataStream.endianness = new Int8Array(new Int16Array([\n        1\n    ]).buffer)[0] > 0;\n    /**\n  Copies byteLength bytes from the src buffer at srcOffset to the\n  dst buffer at dstOffset.\n\n  @param {Object} dst Destination ArrayBuffer to write to.\n  @param {number} dstOffset Offset to the destination ArrayBuffer.\n  @param {Object} src Source ArrayBuffer to read from.\n  @param {number} srcOffset Offset to the source ArrayBuffer.\n  @param {number} byteLength Number of bytes to copy.\n */ DataStream.memcpy = function(dst, dstOffset, src, srcOffset, byteLength) {\n        var dstU8 = new Uint8Array(dst, dstOffset, byteLength);\n        var srcU8 = new Uint8Array(src, srcOffset, byteLength);\n        dstU8.set(srcU8);\n    };\n    /**\n  Converts array to native endianness in-place.\n\n  @param {Object} array Typed array to convert.\n  @param {boolean} arrayIsLittleEndian True if the data in the array is\n                                       little-endian. Set false for big-endian.\n  @return {Object} The converted typed array.\n */ DataStream.arrayToNative = function(array, arrayIsLittleEndian) {\n        if (arrayIsLittleEndian == this.endianness) {\n            return array;\n        } else {\n            return this.flipArrayEndianness(array);\n        }\n    };\n    /**\n  Converts native endianness array to desired endianness in-place.\n\n  @param {Object} array Typed array to convert.\n  @param {boolean} littleEndian True if the converted array should be\n                                little-endian. Set false for big-endian.\n  @return {Object} The converted typed array.\n */ DataStream.nativeToEndian = function(array, littleEndian) {\n        if (this.endianness == littleEndian) {\n            return array;\n        } else {\n            return this.flipArrayEndianness(array);\n        }\n    };\n    /**\n  Flips typed array endianness in-place.\n\n  @param {Object} array Typed array to flip.\n  @return {Object} The converted typed array.\n */ DataStream.flipArrayEndianness = function(array) {\n        var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n        for(var i = 0; i < array.byteLength; i += array.BYTES_PER_ELEMENT){\n            for(var j = i + array.BYTES_PER_ELEMENT - 1, k = i; j > k; j--, k++){\n                var tmp = u8[k];\n                u8[k] = u8[j];\n                u8[j] = tmp;\n            }\n        }\n        return array;\n    };\n    /**\n  Seek position where DataStream#readStruct ran into a problem.\n  Useful for debugging struct parsing.\n\n  @type {number}\n */ DataStream.prototype.failurePosition = 0;\n    String.fromCharCodeUint8 = function(uint8arr) {\n        var arr = [];\n        for(var i = 0; i < uint8arr.length; i++){\n            arr[i] = uint8arr[i];\n        }\n        return String.fromCharCode.apply(null, arr);\n    };\n    /**\n  Read a string of desired length and encoding from the DataStream.\n\n  @param {number} length The length of the string to read in bytes.\n  @param {?string} encoding The encoding of the string data in the DataStream.\n                            Defaults to ASCII.\n  @return {string} The read string.\n */ DataStream.prototype.readString = function(length, encoding) {\n        if (encoding == null || encoding == \"ASCII\") {\n            return String.fromCharCodeUint8.apply(null, [\n                this.mapUint8Array(length == null ? this.byteLength - this.position : length)\n            ]);\n        } else {\n            return new TextDecoder(encoding).decode(this.mapUint8Array(length));\n        }\n    };\n    /**\n  Read null-terminated string of desired length from the DataStream. Truncates\n  the returned string so that the null byte is not a part of it.\n\n  @param {?number} length The length of the string to read.\n  @return {string} The read string.\n */ DataStream.prototype.readCString = function(length) {\n        var blen = this.byteLength - this.position;\n        var u8 = new Uint8Array(this._buffer, this._byteOffset + this.position);\n        var len = blen;\n        if (length != null) {\n            len = Math.min(length, blen);\n        }\n        for(var i = 0; i < len && u8[i] !== 0; i++); // find first zero byte\n        var s = String.fromCharCodeUint8.apply(null, [\n            this.mapUint8Array(i)\n        ]);\n        if (length != null) {\n            this.position += len - i;\n        } else if (i != blen) {\n            this.position += 1; // trailing zero if not at end of buffer\n        }\n        return s;\n    };\n    /* \n   TODO: fix endianness for 24/64-bit fields\n   TODO: check range/support for 64-bits numbers in JavaScript\n*/ var MAX_SIZE = Math.pow(2, 32);\n    DataStream.prototype.readInt64 = function() {\n        return this.readInt32() * MAX_SIZE + this.readUint32();\n    };\n    DataStream.prototype.readUint64 = function() {\n        return this.readUint32() * MAX_SIZE + this.readUint32();\n    };\n    DataStream.prototype.readInt64 = function() {\n        return this.readUint32() * MAX_SIZE + this.readUint32();\n    };\n    DataStream.prototype.readUint24 = function() {\n        return (this.readUint8() << 16) + (this.readUint8() << 8) + this.readUint8();\n    };\n    {\n        exports.DataStream = DataStream;\n    }\n    // file:src/DataStream-write.js\n    /**\n  Saves the DataStream contents to the given filename.\n  Uses Chrome's anchor download property to initiate download.\n \n  @param {string} filename Filename to save as.\n  @return {null}\n  */ DataStream.prototype.save = function(filename) {\n        var blob = new Blob([\n            this.buffer\n        ]);\n        if (window.URL && URL.createObjectURL) {\n            var url = window.URL.createObjectURL(blob);\n            var a = document.createElement(\"a\");\n            // Required in Firefox:\n            document.body.appendChild(a);\n            a.setAttribute(\"href\", url);\n            a.setAttribute(\"download\", filename);\n            // Required in Firefox:\n            a.setAttribute(\"target\", \"_self\");\n            a.click();\n            window.URL.revokeObjectURL(url);\n        } else {\n            throw \"DataStream.save: Can't create object URL.\";\n        }\n    };\n    /**\n  Whether to extend DataStream buffer when trying to write beyond its size.\n  If set, the buffer is reallocated to twice its current size until the\n  requested write fits the buffer.\n  @type {boolean}\n  */ DataStream.prototype._dynamicSize = true;\n    Object.defineProperty(DataStream.prototype, \"dynamicSize\", {\n        get: function() {\n            return this._dynamicSize;\n        },\n        set: function(v) {\n            if (!v) {\n                this._trimAlloc();\n            }\n            this._dynamicSize = v;\n        }\n    });\n    /**\n  Internal function to trim the DataStream buffer when required.\n  Used for stripping out the first bytes when not needed anymore.\n\n  @return {null}\n  */ DataStream.prototype.shift = function(offset) {\n        var buf = new ArrayBuffer(this._byteLength - offset);\n        var dst = new Uint8Array(buf);\n        var src = new Uint8Array(this._buffer, offset, dst.length);\n        dst.set(src);\n        this.buffer = buf;\n        this.position -= offset;\n    };\n    /**\n  Writes an Int32Array of specified endianness to the DataStream.\n\n  @param {Object} arr The array to write.\n  @param {?boolean} e Endianness of the data to write.\n */ DataStream.prototype.writeInt32Array = function(arr, e) {\n        this._realloc(arr.length * 4);\n        if (arr instanceof Int32Array && this.byteOffset + this.position % arr.BYTES_PER_ELEMENT === 0) {\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\n            this.mapInt32Array(arr.length, e);\n        } else {\n            for(var i = 0; i < arr.length; i++){\n                this.writeInt32(arr[i], e);\n            }\n        }\n    };\n    /**\n  Writes an Int16Array of specified endianness to the DataStream.\n\n  @param {Object} arr The array to write.\n  @param {?boolean} e Endianness of the data to write.\n */ DataStream.prototype.writeInt16Array = function(arr, e) {\n        this._realloc(arr.length * 2);\n        if (arr instanceof Int16Array && this.byteOffset + this.position % arr.BYTES_PER_ELEMENT === 0) {\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\n            this.mapInt16Array(arr.length, e);\n        } else {\n            for(var i = 0; i < arr.length; i++){\n                this.writeInt16(arr[i], e);\n            }\n        }\n    };\n    /**\n  Writes an Int8Array to the DataStream.\n\n  @param {Object} arr The array to write.\n */ DataStream.prototype.writeInt8Array = function(arr) {\n        this._realloc(arr.length * 1);\n        if (arr instanceof Int8Array && this.byteOffset + this.position % arr.BYTES_PER_ELEMENT === 0) {\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\n            this.mapInt8Array(arr.length);\n        } else {\n            for(var i = 0; i < arr.length; i++){\n                this.writeInt8(arr[i]);\n            }\n        }\n    };\n    /**\n  Writes a Uint32Array of specified endianness to the DataStream.\n\n  @param {Object} arr The array to write.\n  @param {?boolean} e Endianness of the data to write.\n */ DataStream.prototype.writeUint32Array = function(arr, e) {\n        this._realloc(arr.length * 4);\n        if (arr instanceof Uint32Array && this.byteOffset + this.position % arr.BYTES_PER_ELEMENT === 0) {\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\n            this.mapUint32Array(arr.length, e);\n        } else {\n            for(var i = 0; i < arr.length; i++){\n                this.writeUint32(arr[i], e);\n            }\n        }\n    };\n    /**\n  Writes a Uint16Array of specified endianness to the DataStream.\n\n  @param {Object} arr The array to write.\n  @param {?boolean} e Endianness of the data to write.\n */ DataStream.prototype.writeUint16Array = function(arr, e) {\n        this._realloc(arr.length * 2);\n        if (arr instanceof Uint16Array && this.byteOffset + this.position % arr.BYTES_PER_ELEMENT === 0) {\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\n            this.mapUint16Array(arr.length, e);\n        } else {\n            for(var i = 0; i < arr.length; i++){\n                this.writeUint16(arr[i], e);\n            }\n        }\n    };\n    /**\n  Writes a Uint8Array to the DataStream.\n\n  @param {Object} arr The array to write.\n */ DataStream.prototype.writeUint8Array = function(arr) {\n        this._realloc(arr.length * 1);\n        if (arr instanceof Uint8Array && this.byteOffset + this.position % arr.BYTES_PER_ELEMENT === 0) {\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\n            this.mapUint8Array(arr.length);\n        } else {\n            for(var i = 0; i < arr.length; i++){\n                this.writeUint8(arr[i]);\n            }\n        }\n    };\n    /**\n  Writes a Float64Array of specified endianness to the DataStream.\n\n  @param {Object} arr The array to write.\n  @param {?boolean} e Endianness of the data to write.\n */ DataStream.prototype.writeFloat64Array = function(arr, e) {\n        this._realloc(arr.length * 8);\n        if (arr instanceof Float64Array && this.byteOffset + this.position % arr.BYTES_PER_ELEMENT === 0) {\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\n            this.mapFloat64Array(arr.length, e);\n        } else {\n            for(var i = 0; i < arr.length; i++){\n                this.writeFloat64(arr[i], e);\n            }\n        }\n    };\n    /**\n  Writes a Float32Array of specified endianness to the DataStream.\n\n  @param {Object} arr The array to write.\n  @param {?boolean} e Endianness of the data to write.\n */ DataStream.prototype.writeFloat32Array = function(arr, e) {\n        this._realloc(arr.length * 4);\n        if (arr instanceof Float32Array && this.byteOffset + this.position % arr.BYTES_PER_ELEMENT === 0) {\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\n            this.mapFloat32Array(arr.length, e);\n        } else {\n            for(var i = 0; i < arr.length; i++){\n                this.writeFloat32(arr[i], e);\n            }\n        }\n    };\n    /**\n  Writes a 32-bit int to the DataStream with the desired endianness.\n\n  @param {number} v Number to write.\n  @param {?boolean} e Endianness of the number.\n */ DataStream.prototype.writeInt32 = function(v, e) {\n        this._realloc(4);\n        this._dataView.setInt32(this.position, v, e == null ? this.endianness : e);\n        this.position += 4;\n    };\n    /**\n  Writes a 16-bit int to the DataStream with the desired endianness.\n\n  @param {number} v Number to write.\n  @param {?boolean} e Endianness of the number.\n */ DataStream.prototype.writeInt16 = function(v, e) {\n        this._realloc(2);\n        this._dataView.setInt16(this.position, v, e == null ? this.endianness : e);\n        this.position += 2;\n    };\n    /**\n  Writes an 8-bit int to the DataStream.\n\n  @param {number} v Number to write.\n */ DataStream.prototype.writeInt8 = function(v) {\n        this._realloc(1);\n        this._dataView.setInt8(this.position, v);\n        this.position += 1;\n    };\n    /**\n  Writes a 32-bit unsigned int to the DataStream with the desired endianness.\n\n  @param {number} v Number to write.\n  @param {?boolean} e Endianness of the number.\n */ DataStream.prototype.writeUint32 = function(v, e) {\n        this._realloc(4);\n        this._dataView.setUint32(this.position, v, e == null ? this.endianness : e);\n        this.position += 4;\n    };\n    /**\n  Writes a 16-bit unsigned int to the DataStream with the desired endianness.\n\n  @param {number} v Number to write.\n  @param {?boolean} e Endianness of the number.\n */ DataStream.prototype.writeUint16 = function(v, e) {\n        this._realloc(2);\n        this._dataView.setUint16(this.position, v, e == null ? this.endianness : e);\n        this.position += 2;\n    };\n    /**\n  Writes an 8-bit unsigned  int to the DataStream.\n\n  @param {number} v Number to write.\n */ DataStream.prototype.writeUint8 = function(v) {\n        this._realloc(1);\n        this._dataView.setUint8(this.position, v);\n        this.position += 1;\n    };\n    /**\n  Writes a 32-bit float to the DataStream with the desired endianness.\n\n  @param {number} v Number to write.\n  @param {?boolean} e Endianness of the number.\n */ DataStream.prototype.writeFloat32 = function(v, e) {\n        this._realloc(4);\n        this._dataView.setFloat32(this.position, v, e == null ? this.endianness : e);\n        this.position += 4;\n    };\n    /**\n  Writes a 64-bit float to the DataStream with the desired endianness.\n\n  @param {number} v Number to write.\n  @param {?boolean} e Endianness of the number.\n */ DataStream.prototype.writeFloat64 = function(v, e) {\n        this._realloc(8);\n        this._dataView.setFloat64(this.position, v, e == null ? this.endianness : e);\n        this.position += 8;\n    };\n    /**\n  Write a UCS-2 string of desired endianness to the DataStream. The\n  lengthOverride argument lets you define the number of characters to write.\n  If the string is shorter than lengthOverride, the extra space is padded with\n  zeroes.\n\n  @param {string} str The string to write.\n  @param {?boolean} endianness The endianness to use for the written string data.\n  @param {?number} lengthOverride The number of characters to write.\n */ DataStream.prototype.writeUCS2String = function(str, endianness, lengthOverride) {\n        if (lengthOverride == null) {\n            lengthOverride = str.length;\n        }\n        for(var i = 0; i < str.length && i < lengthOverride; i++){\n            this.writeUint16(str.charCodeAt(i), endianness);\n        }\n        for(; i < lengthOverride; i++){\n            this.writeUint16(0);\n        }\n    };\n    /**\n  Writes a string of desired length and encoding to the DataStream.\n\n  @param {string} s The string to write.\n  @param {?string} encoding The encoding for the written string data.\n                            Defaults to ASCII.\n  @param {?number} length The number of characters to write.\n */ DataStream.prototype.writeString = function(s, encoding, length) {\n        var i = 0;\n        if (encoding == null || encoding == \"ASCII\") {\n            if (length != null) {\n                var len = Math.min(s.length, length);\n                for(i = 0; i < len; i++){\n                    this.writeUint8(s.charCodeAt(i));\n                }\n                for(; i < length; i++){\n                    this.writeUint8(0);\n                }\n            } else {\n                for(i = 0; i < s.length; i++){\n                    this.writeUint8(s.charCodeAt(i));\n                }\n            }\n        } else {\n            this.writeUint8Array(new TextEncoder(encoding).encode(s.substring(0, length)));\n        }\n    };\n    /**\n  Writes a null-terminated string to DataStream and zero-pads it to length\n  bytes. If length is not given, writes the string followed by a zero.\n  If string is longer than length, the written part of the string does not have\n  a trailing zero.\n\n  @param {string} s The string to write.\n  @param {?number} length The number of characters to write.\n */ DataStream.prototype.writeCString = function(s, length) {\n        var i = 0;\n        if (length != null) {\n            var len = Math.min(s.length, length);\n            for(i = 0; i < len; i++){\n                this.writeUint8(s.charCodeAt(i));\n            }\n            for(; i < length; i++){\n                this.writeUint8(0);\n            }\n        } else {\n            for(i = 0; i < s.length; i++){\n                this.writeUint8(s.charCodeAt(i));\n            }\n            this.writeUint8(0);\n        }\n    };\n    /**\n  Writes a struct to the DataStream. Takes a structDefinition that gives the\n  types and a struct object that gives the values. Refer to readStruct for the\n  structure of structDefinition.\n\n  @param {Object} structDefinition Type definition of the struct.\n  @param {Object} struct The struct data object.\n  */ DataStream.prototype.writeStruct = function(structDefinition, struct) {\n        for(var i = 0; i < structDefinition.length; i += 2){\n            var t = structDefinition[i + 1];\n            this.writeType(t, struct[structDefinition[i]], struct);\n        }\n    };\n    /**\n  Writes object v of type t to the DataStream.\n\n  @param {Object} t Type of data to write.\n  @param {Object} v Value of data to write.\n  @param {Object} struct Struct to pass to write callback functions.\n  */ DataStream.prototype.writeType = function(t, v, struct) {\n        var tp;\n        if (typeof t == \"function\") {\n            return t(this, v);\n        } else if (typeof t == \"object\" && !(t instanceof Array)) {\n            return t.set(this, v, struct);\n        }\n        var lengthOverride = null;\n        var charset = \"ASCII\";\n        var pos = this.position;\n        if (typeof t == \"string\" && /:/.test(t)) {\n            tp = t.split(\":\");\n            t = tp[0];\n            lengthOverride = parseInt(tp[1]);\n        }\n        if (typeof t == \"string\" && /,/.test(t)) {\n            tp = t.split(\",\");\n            t = tp[0];\n            charset = parseInt(tp[1]);\n        }\n        switch(t){\n            case \"uint8\":\n                this.writeUint8(v);\n                break;\n            case \"int8\":\n                this.writeInt8(v);\n                break;\n            case \"uint16\":\n                this.writeUint16(v, this.endianness);\n                break;\n            case \"int16\":\n                this.writeInt16(v, this.endianness);\n                break;\n            case \"uint32\":\n                this.writeUint32(v, this.endianness);\n                break;\n            case \"int32\":\n                this.writeInt32(v, this.endianness);\n                break;\n            case \"float32\":\n                this.writeFloat32(v, this.endianness);\n                break;\n            case \"float64\":\n                this.writeFloat64(v, this.endianness);\n                break;\n            case \"uint16be\":\n                this.writeUint16(v, DataStream.BIG_ENDIAN);\n                break;\n            case \"int16be\":\n                this.writeInt16(v, DataStream.BIG_ENDIAN);\n                break;\n            case \"uint32be\":\n                this.writeUint32(v, DataStream.BIG_ENDIAN);\n                break;\n            case \"int32be\":\n                this.writeInt32(v, DataStream.BIG_ENDIAN);\n                break;\n            case \"float32be\":\n                this.writeFloat32(v, DataStream.BIG_ENDIAN);\n                break;\n            case \"float64be\":\n                this.writeFloat64(v, DataStream.BIG_ENDIAN);\n                break;\n            case \"uint16le\":\n                this.writeUint16(v, DataStream.LITTLE_ENDIAN);\n                break;\n            case \"int16le\":\n                this.writeInt16(v, DataStream.LITTLE_ENDIAN);\n                break;\n            case \"uint32le\":\n                this.writeUint32(v, DataStream.LITTLE_ENDIAN);\n                break;\n            case \"int32le\":\n                this.writeInt32(v, DataStream.LITTLE_ENDIAN);\n                break;\n            case \"float32le\":\n                this.writeFloat32(v, DataStream.LITTLE_ENDIAN);\n                break;\n            case \"float64le\":\n                this.writeFloat64(v, DataStream.LITTLE_ENDIAN);\n                break;\n            case \"cstring\":\n                this.writeCString(v, lengthOverride);\n                break;\n            case \"string\":\n                this.writeString(v, charset, lengthOverride);\n                break;\n            case \"u16string\":\n                this.writeUCS2String(v, this.endianness, lengthOverride);\n                break;\n            case \"u16stringle\":\n                this.writeUCS2String(v, DataStream.LITTLE_ENDIAN, lengthOverride);\n                break;\n            case \"u16stringbe\":\n                this.writeUCS2String(v, DataStream.BIG_ENDIAN, lengthOverride);\n                break;\n            default:\n                if (t.length == 3) {\n                    var ta = t[1];\n                    for(var i = 0; i < v.length; i++){\n                        this.writeType(ta, v[i]);\n                    }\n                    break;\n                } else {\n                    this.writeStruct(t, v);\n                    break;\n                }\n        }\n        if (lengthOverride != null) {\n            this.position = pos;\n            this._realloc(lengthOverride);\n            this.position = pos + lengthOverride;\n        }\n    };\n    DataStream.prototype.writeUint64 = function(v) {\n        var h = Math.floor(v / MAX_SIZE);\n        this.writeUint32(h);\n        this.writeUint32(v & 0xFFFFFFFF);\n    };\n    DataStream.prototype.writeUint24 = function(v) {\n        this.writeUint8((v & 0x00FF0000) >> 16);\n        this.writeUint8((v & 0x0000FF00) >> 8);\n        this.writeUint8(v & 0x000000FF);\n    };\n    DataStream.prototype.adjustUint32 = function(position, value) {\n        var pos = this.position;\n        this.seek(position);\n        this.writeUint32(value);\n        this.seek(pos);\n    };\n    // file:src/DataStream-map.js\n    /**\n  Maps an Int32Array into the DataStream buffer, swizzling it to native\n  endianness in-place. The current offset from the start of the buffer needs to\n  be a multiple of element size, just like with typed array views.\n\n  Nice for quickly reading in data. Warning: potentially modifies the buffer\n  contents.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} Int32Array to the DataStream backing buffer.\n  */ DataStream.prototype.mapInt32Array = function(length, e) {\n        this._realloc(length * 4);\n        var arr = new Int32Array(this._buffer, this.byteOffset + this.position, length);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += length * 4;\n        return arr;\n    };\n    /**\n  Maps an Int16Array into the DataStream buffer, swizzling it to native\n  endianness in-place. The current offset from the start of the buffer needs to\n  be a multiple of element size, just like with typed array views.\n\n  Nice for quickly reading in data. Warning: potentially modifies the buffer\n  contents.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} Int16Array to the DataStream backing buffer.\n  */ DataStream.prototype.mapInt16Array = function(length, e) {\n        this._realloc(length * 2);\n        var arr = new Int16Array(this._buffer, this.byteOffset + this.position, length);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += length * 2;\n        return arr;\n    };\n    /**\n  Maps an Int8Array into the DataStream buffer.\n\n  Nice for quickly reading in data.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} Int8Array to the DataStream backing buffer.\n  */ DataStream.prototype.mapInt8Array = function(length) {\n        this._realloc(length * 1);\n        var arr = new Int8Array(this._buffer, this.byteOffset + this.position, length);\n        this.position += length * 1;\n        return arr;\n    };\n    /**\n  Maps a Uint32Array into the DataStream buffer, swizzling it to native\n  endianness in-place. The current offset from the start of the buffer needs to\n  be a multiple of element size, just like with typed array views.\n\n  Nice for quickly reading in data. Warning: potentially modifies the buffer\n  contents.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} Uint32Array to the DataStream backing buffer.\n  */ DataStream.prototype.mapUint32Array = function(length, e) {\n        this._realloc(length * 4);\n        var arr = new Uint32Array(this._buffer, this.byteOffset + this.position, length);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += length * 4;\n        return arr;\n    };\n    /**\n  Maps a Uint16Array into the DataStream buffer, swizzling it to native\n  endianness in-place. The current offset from the start of the buffer needs to\n  be a multiple of element size, just like with typed array views.\n\n  Nice for quickly reading in data. Warning: potentially modifies the buffer\n  contents.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} Uint16Array to the DataStream backing buffer.\n  */ DataStream.prototype.mapUint16Array = function(length, e) {\n        this._realloc(length * 2);\n        var arr = new Uint16Array(this._buffer, this.byteOffset + this.position, length);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += length * 2;\n        return arr;\n    };\n    /**\n  Maps a Float64Array into the DataStream buffer, swizzling it to native\n  endianness in-place. The current offset from the start of the buffer needs to\n  be a multiple of element size, just like with typed array views.\n\n  Nice for quickly reading in data. Warning: potentially modifies the buffer\n  contents.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} Float64Array to the DataStream backing buffer.\n  */ DataStream.prototype.mapFloat64Array = function(length, e) {\n        this._realloc(length * 8);\n        var arr = new Float64Array(this._buffer, this.byteOffset + this.position, length);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += length * 8;\n        return arr;\n    };\n    /**\n  Maps a Float32Array into the DataStream buffer, swizzling it to native\n  endianness in-place. The current offset from the start of the buffer needs to\n  be a multiple of element size, just like with typed array views.\n\n  Nice for quickly reading in data. Warning: potentially modifies the buffer\n  contents.\n\n  @param {number} length Number of elements to map.\n  @param {?boolean} e Endianness of the data to read.\n  @return {Object} Float32Array to the DataStream backing buffer.\n  */ DataStream.prototype.mapFloat32Array = function(length, e) {\n        this._realloc(length * 4);\n        var arr = new Float32Array(this._buffer, this.byteOffset + this.position, length);\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\n        this.position += length * 4;\n        return arr;\n    };\n    // file:src/buffer.js\n    /**\n * MultiBufferStream is a class that acts as a SimpleStream for parsing \n * It holds several, possibly non-contiguous ArrayBuffer objects, each with a fileStart property \n * containing the offset for the buffer data in an original/virtual file \n *\n * It inherits also from DataStream for all read/write/alloc operations\n */ /**\n * Constructor\n */ var MultiBufferStream = function(buffer) {\n        /* List of ArrayBuffers, with a fileStart property, sorted in fileStart order and non overlapping */ this.buffers = [];\n        this.bufferIndex = -1;\n        if (buffer) {\n            this.insertBuffer(buffer);\n            this.bufferIndex = 0;\n        }\n    };\n    MultiBufferStream.prototype = new DataStream(new ArrayBuffer(), 0, DataStream.BIG_ENDIAN);\n    /************************************************************************************\n  Methods for the managnement of the buffers (insertion, removal, concatenation, ...)\n ***********************************************************************************/ MultiBufferStream.prototype.initialized = function() {\n        var firstBuffer;\n        if (this.bufferIndex > -1) {\n            return true;\n        } else if (this.buffers.length > 0) {\n            firstBuffer = this.buffers[0];\n            if (firstBuffer.fileStart === 0) {\n                this.buffer = firstBuffer;\n                this.bufferIndex = 0;\n                Log.debug(\"MultiBufferStream\", \"Stream ready for parsing\");\n                return true;\n            } else {\n                Log.warn(\"MultiBufferStream\", \"The first buffer should have a fileStart of 0\");\n                this.logBufferLevel();\n                return false;\n            }\n        } else {\n            Log.warn(\"MultiBufferStream\", \"No buffer to start parsing from\");\n            this.logBufferLevel();\n            return false;\n        }\n    };\n    /**\n * helper functions to concatenate two ArrayBuffer objects\n * @param  {ArrayBuffer} buffer1 \n * @param  {ArrayBuffer} buffer2 \n * @return {ArrayBuffer} the concatenation of buffer1 and buffer2 in that order\n */ ArrayBuffer.concat = function(buffer1, buffer2) {\n        Log.debug(\"ArrayBuffer\", \"Trying to create a new buffer of size: \" + (buffer1.byteLength + buffer2.byteLength));\n        var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n        tmp.set(new Uint8Array(buffer1), 0);\n        tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n        return tmp.buffer;\n    };\n    /**\n * Reduces the size of a given buffer, but taking the part between offset and offset+newlength\n * @param  {ArrayBuffer} buffer    \n * @param  {Number}      offset    the start of new buffer\n * @param  {Number}      newLength the length of the new buffer\n * @return {ArrayBuffer}           the new buffer\n */ MultiBufferStream.prototype.reduceBuffer = function(buffer, offset, newLength) {\n        var smallB;\n        smallB = new Uint8Array(newLength);\n        smallB.set(new Uint8Array(buffer, offset, newLength));\n        smallB.buffer.fileStart = buffer.fileStart + offset;\n        smallB.buffer.usedBytes = 0;\n        return smallB.buffer;\n    };\n    /**\n * Inserts the new buffer in the sorted list of buffers,\n *  making sure, it is not overlapping with existing ones (possibly reducing its size).\n *  if the new buffer overrides/replaces the 0-th buffer (for instance because it is bigger), \n *  updates the DataStream buffer for parsing \n*/ MultiBufferStream.prototype.insertBuffer = function(ab) {\n        var to_add = true;\n        /* TODO: improve insertion if many buffers */ for(var i = 0; i < this.buffers.length; i++){\n            var b = this.buffers[i];\n            if (ab.fileStart <= b.fileStart) {\n                /* the insertion position is found */ if (ab.fileStart === b.fileStart) {\n                    /* The new buffer overlaps with an existing buffer */ if (ab.byteLength > b.byteLength) {\n                        /* the new buffer is bigger than the existing one\n\t\t\t\t\t   remove the existing buffer and try again to insert \n\t\t\t\t\t   the new buffer to check overlap with the next ones */ this.buffers.splice(i, 1);\n                        i--;\n                        continue;\n                    } else {\n                        /* the new buffer is smaller than the existing one, just drop it */ Log.warn(\"MultiBufferStream\", \"Buffer (fileStart: \" + ab.fileStart + \" - Length: \" + ab.byteLength + \") already appended, ignoring\");\n                    }\n                } else {\n                    /* The beginning of the new buffer is not overlapping with an existing buffer\n\t\t\t\t   let's check the end of it */ if (ab.fileStart + ab.byteLength <= b.fileStart) ;\n                    else {\n                        /* There is some overlap, cut the new buffer short, and add it*/ ab = this.reduceBuffer(ab, 0, b.fileStart - ab.fileStart);\n                    }\n                    Log.debug(\"MultiBufferStream\", \"Appending new buffer (fileStart: \" + ab.fileStart + \" - Length: \" + ab.byteLength + \")\");\n                    this.buffers.splice(i, 0, ab);\n                    /* if this new buffer is inserted in the first place in the list of the buffer, \n\t\t\t\t   and the DataStream is initialized, make it the buffer used for parsing */ if (i === 0) {\n                        this.buffer = ab;\n                    }\n                }\n                to_add = false;\n                break;\n            } else if (ab.fileStart < b.fileStart + b.byteLength) {\n                /* the new buffer overlaps its beginning with the end of the current buffer */ var offset = b.fileStart + b.byteLength - ab.fileStart;\n                var newLength = ab.byteLength - offset;\n                if (newLength > 0) {\n                    /* the new buffer is bigger than the current overlap, drop the overlapping part and try again inserting the remaining buffer */ ab = this.reduceBuffer(ab, offset, newLength);\n                } else {\n                    /* the content of the new buffer is entirely contained in the existing buffer, drop it entirely */ to_add = false;\n                    break;\n                }\n            }\n        }\n        /* if the buffer has not been added, we can add it at the end */ if (to_add) {\n            Log.debug(\"MultiBufferStream\", \"Appending new buffer (fileStart: \" + ab.fileStart + \" - Length: \" + ab.byteLength + \")\");\n            this.buffers.push(ab);\n            /* if this new buffer is inserted in the first place in the list of the buffer, \n\t\t   and the DataStream is initialized, make it the buffer used for parsing */ if (i === 0) {\n                this.buffer = ab;\n            }\n        }\n    };\n    /**\n * Displays the status of the buffers (number and used bytes)\n * @param  {Object} info callback method for display\n */ MultiBufferStream.prototype.logBufferLevel = function(info) {\n        var i;\n        var buffer;\n        var used, total;\n        var ranges = [];\n        var range;\n        var bufferedString = \"\";\n        used = 0;\n        total = 0;\n        for(i = 0; i < this.buffers.length; i++){\n            buffer = this.buffers[i];\n            if (i === 0) {\n                range = {};\n                ranges.push(range);\n                range.start = buffer.fileStart;\n                range.end = buffer.fileStart + buffer.byteLength;\n                bufferedString += \"[\" + range.start + \"-\";\n            } else if (range.end === buffer.fileStart) {\n                range.end = buffer.fileStart + buffer.byteLength;\n            } else {\n                range = {};\n                range.start = buffer.fileStart;\n                bufferedString += ranges[ranges.length - 1].end - 1 + \"], [\" + range.start + \"-\";\n                range.end = buffer.fileStart + buffer.byteLength;\n                ranges.push(range);\n            }\n            used += buffer.usedBytes;\n            total += buffer.byteLength;\n        }\n        if (ranges.length > 0) {\n            bufferedString += range.end - 1 + \"]\";\n        }\n        var log = info ? Log.info : Log.debug;\n        if (this.buffers.length === 0) {\n            log(\"MultiBufferStream\", \"No more buffer in memory\");\n        } else {\n            log(\"MultiBufferStream\", \"\" + this.buffers.length + \" stored buffer(s) (\" + used + \"/\" + total + \" bytes), continuous ranges: \" + bufferedString);\n        }\n    };\n    MultiBufferStream.prototype.cleanBuffers = function() {\n        var i;\n        var buffer;\n        for(i = 0; i < this.buffers.length; i++){\n            buffer = this.buffers[i];\n            if (buffer.usedBytes === buffer.byteLength) {\n                Log.debug(\"MultiBufferStream\", \"Removing buffer #\" + i);\n                this.buffers.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    MultiBufferStream.prototype.mergeNextBuffer = function() {\n        var next_buffer;\n        if (this.bufferIndex + 1 < this.buffers.length) {\n            next_buffer = this.buffers[this.bufferIndex + 1];\n            if (next_buffer.fileStart === this.buffer.fileStart + this.buffer.byteLength) {\n                var oldLength = this.buffer.byteLength;\n                var oldUsedBytes = this.buffer.usedBytes;\n                var oldFileStart = this.buffer.fileStart;\n                this.buffers[this.bufferIndex] = ArrayBuffer.concat(this.buffer, next_buffer);\n                this.buffer = this.buffers[this.bufferIndex];\n                this.buffers.splice(this.bufferIndex + 1, 1);\n                this.buffer.usedBytes = oldUsedBytes; /* TODO: should it be += ? */ \n                this.buffer.fileStart = oldFileStart;\n                Log.debug(\"ISOFile\", \"Concatenating buffer for box parsing (length: \" + oldLength + \"->\" + this.buffer.byteLength + \")\");\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    };\n    /*************************************************************************\n  Seek-related functions\n *************************************************************************/ /**\n * Finds the buffer that holds the given file position\n * @param  {Boolean} fromStart    indicates if the search should start from the current buffer (false) \n *                                or from the first buffer (true)\n * @param  {Number}  filePosition position in the file to seek to\n * @param  {Boolean} markAsUsed   indicates if the bytes in between the current position and the seek position \n *                                should be marked as used for garbage collection\n * @return {Number}               the index of the buffer holding the seeked file position, -1 if not found.\n */ MultiBufferStream.prototype.findPosition = function(fromStart, filePosition, markAsUsed) {\n        var i;\n        var abuffer = null;\n        var index = -1;\n        /* find the buffer with the largest position smaller than the given position */ if (fromStart === true) {\n            /* the reposition can be in the past, we need to check from the beginning of the list of buffers */ i = 0;\n        } else {\n            i = this.bufferIndex;\n        }\n        while(i < this.buffers.length){\n            abuffer = this.buffers[i];\n            if (abuffer.fileStart <= filePosition) {\n                index = i;\n                if (markAsUsed) {\n                    if (abuffer.fileStart + abuffer.byteLength <= filePosition) {\n                        abuffer.usedBytes = abuffer.byteLength;\n                    } else {\n                        abuffer.usedBytes = filePosition - abuffer.fileStart;\n                    }\n                    this.logBufferLevel();\n                }\n            } else {\n                break;\n            }\n            i++;\n        }\n        if (index !== -1) {\n            abuffer = this.buffers[index];\n            if (abuffer.fileStart + abuffer.byteLength >= filePosition) {\n                Log.debug(\"MultiBufferStream\", \"Found position in existing buffer #\" + index);\n                return index;\n            } else {\n                return -1;\n            }\n        } else {\n            return -1;\n        }\n    };\n    /**\n * Finds the largest file position contained in a buffer or in the next buffers if they are contiguous (no gap)\n * starting from the given buffer index or from the current buffer if the index is not given\n *\n * @param  {Number} inputindex Index of the buffer to start from\n * @return {Number}            The largest file position found in the buffers\n */ MultiBufferStream.prototype.findEndContiguousBuf = function(inputindex) {\n        var i;\n        var currentBuf;\n        var nextBuf;\n        var index = inputindex !== undefined ? inputindex : this.bufferIndex;\n        currentBuf = this.buffers[index];\n        /* find the end of the contiguous range of data */ if (this.buffers.length > index + 1) {\n            for(i = index + 1; i < this.buffers.length; i++){\n                nextBuf = this.buffers[i];\n                if (nextBuf.fileStart === currentBuf.fileStart + currentBuf.byteLength) {\n                    currentBuf = nextBuf;\n                } else {\n                    break;\n                }\n            }\n        }\n        /* return the position of last byte in the file that we have */ return currentBuf.fileStart + currentBuf.byteLength;\n    };\n    /**\n * Returns the largest file position contained in the buffers, larger than the given position\n * @param  {Number} pos the file position to start from\n * @return {Number}     the largest position in the current buffer or in the buffer and the next contiguous \n *                      buffer that holds the given position\n */ MultiBufferStream.prototype.getEndFilePositionAfter = function(pos) {\n        var index = this.findPosition(true, pos, false);\n        if (index !== -1) {\n            return this.findEndContiguousBuf(index);\n        } else {\n            return pos;\n        }\n    };\n    /*************************************************************************\n  Garbage collection related functions\n *************************************************************************/ /**\n * Marks a given number of bytes as used in the current buffer for garbage collection\n * @param {Number} nbBytes \n */ MultiBufferStream.prototype.addUsedBytes = function(nbBytes) {\n        this.buffer.usedBytes += nbBytes;\n        this.logBufferLevel();\n    };\n    /**\n * Marks the entire current buffer as used, ready for garbage collection\n */ MultiBufferStream.prototype.setAllUsedBytes = function() {\n        this.buffer.usedBytes = this.buffer.byteLength;\n        this.logBufferLevel();\n    };\n    /*************************************************************************\n  Common API between MultiBufferStream and SimpleStream\n *************************************************************************/ /**\n * Tries to seek to a given file position\n * if possible, repositions the parsing from there and returns true \n * if not possible, does not change anything and returns false \n * @param  {Number}  filePosition position in the file to seek to\n * @param  {Boolean} fromStart    indicates if the search should start from the current buffer (false) \n *                                or from the first buffer (true)\n * @param  {Boolean} markAsUsed   indicates if the bytes in between the current position and the seek position \n *                                should be marked as used for garbage collection\n * @return {Boolean}              true if the seek succeeded, false otherwise\n */ MultiBufferStream.prototype.seek = function(filePosition, fromStart, markAsUsed) {\n        var index;\n        index = this.findPosition(fromStart, filePosition, markAsUsed);\n        if (index !== -1) {\n            this.buffer = this.buffers[index];\n            this.bufferIndex = index;\n            this.position = filePosition - this.buffer.fileStart;\n            Log.debug(\"MultiBufferStream\", \"Repositioning parser at buffer position: \" + this.position);\n            return true;\n        } else {\n            Log.debug(\"MultiBufferStream\", \"Position \" + filePosition + \" not found in buffered data\");\n            return false;\n        }\n    };\n    /**\n * Returns the current position in the file\n * @return {Number} the position in the file\n */ MultiBufferStream.prototype.getPosition = function() {\n        if (this.bufferIndex === -1 || this.buffers[this.bufferIndex] === null) {\n            throw \"Error accessing position in the MultiBufferStream\";\n        }\n        return this.buffers[this.bufferIndex].fileStart + this.position;\n    };\n    /**\n * Returns the length of the current buffer\n * @return {Number} the length of the current buffer\n */ MultiBufferStream.prototype.getLength = function() {\n        return this.byteLength;\n    };\n    MultiBufferStream.prototype.getEndPosition = function() {\n        if (this.bufferIndex === -1 || this.buffers[this.bufferIndex] === null) {\n            throw \"Error accessing position in the MultiBufferStream\";\n        }\n        return this.buffers[this.bufferIndex].fileStart + this.byteLength;\n    };\n    {\n        exports.MultiBufferStream = MultiBufferStream;\n    }\n    /*\n * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato\n * License: BSD-3-Clause (see LICENSE file)\n */ var MPEG4DescriptorParser = function() {\n        var ES_DescrTag = 0x03;\n        var DecoderConfigDescrTag = 0x04;\n        var DecSpecificInfoTag = 0x05;\n        var SLConfigDescrTag = 0x06;\n        var descTagToName = [];\n        descTagToName[ES_DescrTag] = \"ES_Descriptor\";\n        descTagToName[DecoderConfigDescrTag] = \"DecoderConfigDescriptor\";\n        descTagToName[DecSpecificInfoTag] = \"DecoderSpecificInfo\";\n        descTagToName[SLConfigDescrTag] = \"SLConfigDescriptor\";\n        this.getDescriptorName = function(tag) {\n            return descTagToName[tag];\n        };\n        var that = this;\n        var classes = {};\n        this.parseOneDescriptor = function(stream) {\n            var size = 0;\n            var tag;\n            var desc;\n            var byteRead;\n            tag = stream.readUint8();\n            byteRead = stream.readUint8();\n            while(byteRead & 0x80){\n                size = (byteRead & 0x7F) << 7;\n                byteRead = stream.readUint8();\n            }\n            size += byteRead & 0x7F;\n            Log.debug(\"MPEG4DescriptorParser\", \"Found \" + (descTagToName[tag] || \"Descriptor \" + tag) + \", size \" + size + \" at position \" + stream.getPosition());\n            if (descTagToName[tag]) {\n                desc = new classes[descTagToName[tag]](size);\n            } else {\n                desc = new classes.Descriptor(size);\n            }\n            desc.parse(stream);\n            return desc;\n        };\n        classes.Descriptor = function(_tag, _size) {\n            this.tag = _tag;\n            this.size = _size;\n            this.descs = [];\n        };\n        classes.Descriptor.prototype.parse = function(stream) {\n            this.data = stream.readUint8Array(this.size);\n        };\n        classes.Descriptor.prototype.findDescriptor = function(tag) {\n            for(var i = 0; i < this.descs.length; i++){\n                if (this.descs[i].tag == tag) {\n                    return this.descs[i];\n                }\n            }\n            return null;\n        };\n        classes.Descriptor.prototype.parseRemainingDescriptors = function(stream) {\n            var start = stream.position;\n            while(stream.position < start + this.size){\n                var desc = that.parseOneDescriptor(stream);\n                this.descs.push(desc);\n            }\n        };\n        classes.ES_Descriptor = function(size) {\n            classes.Descriptor.call(this, ES_DescrTag, size);\n        };\n        classes.ES_Descriptor.prototype = new classes.Descriptor();\n        classes.ES_Descriptor.prototype.parse = function(stream) {\n            this.ES_ID = stream.readUint16();\n            this.flags = stream.readUint8();\n            this.size -= 3;\n            if (this.flags & 0x80) {\n                this.dependsOn_ES_ID = stream.readUint16();\n                this.size -= 2;\n            } else {\n                this.dependsOn_ES_ID = 0;\n            }\n            if (this.flags & 0x40) {\n                var l = stream.readUint8();\n                this.URL = stream.readString(l);\n                this.size -= l + 1;\n            } else {\n                this.URL = \"\";\n            }\n            if (this.flags & 0x20) {\n                this.OCR_ES_ID = stream.readUint16();\n                this.size -= 2;\n            } else {\n                this.OCR_ES_ID = 0;\n            }\n            this.parseRemainingDescriptors(stream);\n        };\n        classes.ES_Descriptor.prototype.getOTI = function(stream) {\n            var dcd = this.findDescriptor(DecoderConfigDescrTag);\n            if (dcd) {\n                return dcd.oti;\n            } else {\n                return 0;\n            }\n        };\n        classes.ES_Descriptor.prototype.getAudioConfig = function(stream) {\n            var dcd = this.findDescriptor(DecoderConfigDescrTag);\n            if (!dcd) return null;\n            var dsi = dcd.findDescriptor(DecSpecificInfoTag);\n            if (dsi && dsi.data) {\n                var audioObjectType = (dsi.data[0] & 0xF8) >> 3;\n                if (audioObjectType === 31 && dsi.data.length >= 2) {\n                    audioObjectType = 32 + ((dsi.data[0] & 0x7) << 3) + ((dsi.data[1] & 0xE0) >> 5);\n                }\n                return audioObjectType;\n            } else {\n                return null;\n            }\n        };\n        classes.DecoderConfigDescriptor = function(size) {\n            classes.Descriptor.call(this, DecoderConfigDescrTag, size);\n        };\n        classes.DecoderConfigDescriptor.prototype = new classes.Descriptor();\n        classes.DecoderConfigDescriptor.prototype.parse = function(stream) {\n            this.oti = stream.readUint8();\n            this.streamType = stream.readUint8();\n            this.bufferSize = stream.readUint24();\n            this.maxBitrate = stream.readUint32();\n            this.avgBitrate = stream.readUint32();\n            this.size -= 13;\n            this.parseRemainingDescriptors(stream);\n        };\n        classes.DecoderSpecificInfo = function(size) {\n            classes.Descriptor.call(this, DecSpecificInfoTag, size);\n        };\n        classes.DecoderSpecificInfo.prototype = new classes.Descriptor();\n        classes.SLConfigDescriptor = function(size) {\n            classes.Descriptor.call(this, SLConfigDescrTag, size);\n        };\n        classes.SLConfigDescriptor.prototype = new classes.Descriptor();\n        return this;\n    };\n    {\n        exports.MPEG4DescriptorParser = MPEG4DescriptorParser;\n    }\n    /*\n * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato\n * License: BSD-3-Clause (see LICENSE file)\n */ var BoxParser = {\n        ERR_INVALID_DATA: -1,\n        ERR_NOT_ENOUGH_DATA: 0,\n        OK: 1,\n        // Boxes to be created with default parsing\n        BASIC_BOXES: [\n            \"mdat\",\n            \"idat\",\n            \"free\",\n            \"skip\",\n            \"meco\",\n            \"strk\"\n        ],\n        FULL_BOXES: [\n            \"hmhd\",\n            \"nmhd\",\n            \"iods\",\n            \"xml \",\n            \"bxml\",\n            \"ipro\",\n            \"mere\"\n        ],\n        CONTAINER_BOXES: [\n            [\n                \"moov\",\n                [\n                    \"trak\",\n                    \"pssh\"\n                ]\n            ],\n            [\n                \"trak\"\n            ],\n            [\n                \"edts\"\n            ],\n            [\n                \"mdia\"\n            ],\n            [\n                \"minf\"\n            ],\n            [\n                \"dinf\"\n            ],\n            [\n                \"stbl\",\n                [\n                    \"sgpd\",\n                    \"sbgp\"\n                ]\n            ],\n            [\n                \"mvex\",\n                [\n                    \"trex\"\n                ]\n            ],\n            [\n                \"moof\",\n                [\n                    \"traf\"\n                ]\n            ],\n            [\n                \"traf\",\n                [\n                    \"trun\",\n                    \"sgpd\",\n                    \"sbgp\"\n                ]\n            ],\n            [\n                \"vttc\"\n            ],\n            [\n                \"tref\"\n            ],\n            [\n                \"iref\"\n            ],\n            [\n                \"mfra\",\n                [\n                    \"tfra\"\n                ]\n            ],\n            [\n                \"meco\"\n            ],\n            [\n                \"hnti\"\n            ],\n            [\n                \"hinf\"\n            ],\n            [\n                \"strk\"\n            ],\n            [\n                \"strd\"\n            ],\n            [\n                \"sinf\"\n            ],\n            [\n                \"rinf\"\n            ],\n            [\n                \"schi\"\n            ],\n            [\n                \"trgr\"\n            ],\n            [\n                \"udta\",\n                [\n                    \"kind\"\n                ]\n            ],\n            [\n                \"iprp\",\n                [\n                    \"ipma\"\n                ]\n            ],\n            [\n                \"ipco\"\n            ]\n        ],\n        // Boxes effectively created\n        boxCodes: [],\n        fullBoxCodes: [],\n        containerBoxCodes: [],\n        sampleEntryCodes: {},\n        sampleGroupEntryCodes: [],\n        trackGroupTypes: [],\n        UUIDBoxes: {},\n        UUIDs: [],\n        initialize: function() {\n            BoxParser.FullBox.prototype = new BoxParser.Box();\n            BoxParser.ContainerBox.prototype = new BoxParser.Box();\n            BoxParser.SampleEntry.prototype = new BoxParser.Box();\n            BoxParser.TrackGroupTypeBox.prototype = new BoxParser.FullBox();\n            /* creating constructors for simple boxes */ BoxParser.BASIC_BOXES.forEach(function(type) {\n                BoxParser.createBoxCtor(type);\n            });\n            BoxParser.FULL_BOXES.forEach(function(type) {\n                BoxParser.createFullBoxCtor(type);\n            });\n            BoxParser.CONTAINER_BOXES.forEach(function(types) {\n                BoxParser.createContainerBoxCtor(types[0], null, types[1]);\n            });\n        },\n        Box: function(_type, _size, _uuid) {\n            this.type = _type;\n            this.size = _size;\n            this.uuid = _uuid;\n        },\n        FullBox: function(type, size, uuid) {\n            BoxParser.Box.call(this, type, size, uuid);\n            this.flags = 0;\n            this.version = 0;\n        },\n        ContainerBox: function(type, size, uuid) {\n            BoxParser.Box.call(this, type, size, uuid);\n            this.boxes = [];\n        },\n        SampleEntry: function(type, size, hdr_size, start) {\n            BoxParser.ContainerBox.call(this, type, size);\n            this.hdr_size = hdr_size;\n            this.start = start;\n        },\n        SampleGroupEntry: function(type) {\n            this.grouping_type = type;\n        },\n        TrackGroupTypeBox: function(type, size) {\n            BoxParser.FullBox.call(this, type, size);\n        },\n        createBoxCtor: function(type, parseMethod) {\n            BoxParser.boxCodes.push(type);\n            BoxParser[type + \"Box\"] = function(size) {\n                BoxParser.Box.call(this, type, size);\n            };\n            BoxParser[type + \"Box\"].prototype = new BoxParser.Box();\n            if (parseMethod) BoxParser[type + \"Box\"].prototype.parse = parseMethod;\n        },\n        createFullBoxCtor: function(type, parseMethod) {\n            //BoxParser.fullBoxCodes.push(type);\n            BoxParser[type + \"Box\"] = function(size) {\n                BoxParser.FullBox.call(this, type, size);\n            };\n            BoxParser[type + \"Box\"].prototype = new BoxParser.FullBox();\n            BoxParser[type + \"Box\"].prototype.parse = function(stream) {\n                this.parseFullHeader(stream);\n                if (parseMethod) {\n                    parseMethod.call(this, stream);\n                }\n            };\n        },\n        addSubBoxArrays: function(subBoxNames) {\n            if (subBoxNames) {\n                this.subBoxNames = subBoxNames;\n                var nbSubBoxes = subBoxNames.length;\n                for(var k = 0; k < nbSubBoxes; k++){\n                    this[subBoxNames[k] + \"s\"] = [];\n                }\n            }\n        },\n        createContainerBoxCtor: function(type, parseMethod, subBoxNames) {\n            //BoxParser.containerBoxCodes.push(type);\n            BoxParser[type + \"Box\"] = function(size) {\n                BoxParser.ContainerBox.call(this, type, size);\n                BoxParser.addSubBoxArrays.call(this, subBoxNames);\n            };\n            BoxParser[type + \"Box\"].prototype = new BoxParser.ContainerBox();\n            if (parseMethod) BoxParser[type + \"Box\"].prototype.parse = parseMethod;\n        },\n        createMediaSampleEntryCtor: function(mediaType, parseMethod, subBoxNames) {\n            BoxParser.sampleEntryCodes[mediaType] = [];\n            BoxParser[mediaType + \"SampleEntry\"] = function(type, size) {\n                BoxParser.SampleEntry.call(this, type, size);\n                BoxParser.addSubBoxArrays.call(this, subBoxNames);\n            };\n            BoxParser[mediaType + \"SampleEntry\"].prototype = new BoxParser.SampleEntry();\n            if (parseMethod) BoxParser[mediaType + \"SampleEntry\"].prototype.parse = parseMethod;\n        },\n        createSampleEntryCtor: function(mediaType, type, parseMethod, subBoxNames) {\n            BoxParser.sampleEntryCodes[mediaType].push(type);\n            BoxParser[type + \"SampleEntry\"] = function(size) {\n                BoxParser[mediaType + \"SampleEntry\"].call(this, type, size);\n                BoxParser.addSubBoxArrays.call(this, subBoxNames);\n            };\n            BoxParser[type + \"SampleEntry\"].prototype = new BoxParser[mediaType + \"SampleEntry\"]();\n            if (parseMethod) BoxParser[type + \"SampleEntry\"].prototype.parse = parseMethod;\n        },\n        createEncryptedSampleEntryCtor: function(mediaType, type, parseMethod) {\n            BoxParser.createSampleEntryCtor.call(this, mediaType, type, parseMethod, [\n                \"sinf\"\n            ]);\n        },\n        createSampleGroupCtor: function(type, parseMethod) {\n            //BoxParser.sampleGroupEntryCodes.push(type);\n            BoxParser[type + \"SampleGroupEntry\"] = function(size) {\n                BoxParser.SampleGroupEntry.call(this, type, size);\n            };\n            BoxParser[type + \"SampleGroupEntry\"].prototype = new BoxParser.SampleGroupEntry();\n            if (parseMethod) BoxParser[type + \"SampleGroupEntry\"].prototype.parse = parseMethod;\n        },\n        createTrackGroupCtor: function(type, parseMethod) {\n            //BoxParser.trackGroupTypes.push(type);\n            BoxParser[type + \"TrackGroupTypeBox\"] = function(size) {\n                BoxParser.TrackGroupTypeBox.call(this, type, size);\n            };\n            BoxParser[type + \"TrackGroupTypeBox\"].prototype = new BoxParser.TrackGroupTypeBox();\n            if (parseMethod) BoxParser[type + \"TrackGroupTypeBox\"].prototype.parse = parseMethod;\n        },\n        createUUIDBox: function(uuid, isFullBox, isContainerBox, parseMethod) {\n            BoxParser.UUIDs.push(uuid);\n            BoxParser.UUIDBoxes[uuid] = function(size) {\n                if (isFullBox) {\n                    BoxParser.FullBox.call(this, \"uuid\", size, uuid);\n                } else {\n                    if (isContainerBox) {\n                        BoxParser.ContainerBox.call(this, \"uuid\", size, uuid);\n                    } else {\n                        BoxParser.Box.call(this, \"uuid\", size, uuid);\n                    }\n                }\n            };\n            BoxParser.UUIDBoxes[uuid].prototype = isFullBox ? new BoxParser.FullBox() : isContainerBox ? new BoxParser.ContainerBox() : new BoxParser.Box();\n            if (parseMethod) {\n                if (isFullBox) {\n                    BoxParser.UUIDBoxes[uuid].prototype.parse = function(stream) {\n                        this.parseFullHeader(stream);\n                        if (parseMethod) {\n                            parseMethod.call(this, stream);\n                        }\n                    };\n                } else {\n                    BoxParser.UUIDBoxes[uuid].prototype.parse = parseMethod;\n                }\n            }\n        }\n    };\n    BoxParser.initialize();\n    BoxParser.TKHD_FLAG_ENABLED = 0x000001;\n    BoxParser.TKHD_FLAG_IN_MOVIE = 0x000002;\n    BoxParser.TKHD_FLAG_IN_PREVIEW = 0x000004;\n    BoxParser.TFHD_FLAG_BASE_DATA_OFFSET = 0x01;\n    BoxParser.TFHD_FLAG_SAMPLE_DESC = 0x02;\n    BoxParser.TFHD_FLAG_SAMPLE_DUR = 0x08;\n    BoxParser.TFHD_FLAG_SAMPLE_SIZE = 0x10;\n    BoxParser.TFHD_FLAG_SAMPLE_FLAGS = 0x20;\n    BoxParser.TFHD_FLAG_DUR_EMPTY = 0x10000;\n    BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF = 0x20000;\n    BoxParser.TRUN_FLAGS_DATA_OFFSET = 0x01;\n    BoxParser.TRUN_FLAGS_FIRST_FLAG = 0x04;\n    BoxParser.TRUN_FLAGS_DURATION = 0x100;\n    BoxParser.TRUN_FLAGS_SIZE = 0x200;\n    BoxParser.TRUN_FLAGS_FLAGS = 0x400;\n    BoxParser.TRUN_FLAGS_CTS_OFFSET = 0x800;\n    BoxParser.Box.prototype.add = function(name) {\n        return this.addBox(new BoxParser[name + \"Box\"]());\n    };\n    BoxParser.Box.prototype.addBox = function(box1) {\n        this.boxes.push(box1);\n        if (this[box1.type + \"s\"]) {\n            this[box1.type + \"s\"].push(box1);\n        } else {\n            this[box1.type] = box1;\n        }\n        return box1;\n    };\n    BoxParser.Box.prototype.set = function(prop, value) {\n        this[prop] = value;\n        return this;\n    };\n    BoxParser.Box.prototype.addEntry = function(value, _prop) {\n        var prop = _prop || \"entries\";\n        if (!this[prop]) {\n            this[prop] = [];\n        }\n        this[prop].push(value);\n        return this;\n    };\n    {\n        exports.BoxParser = BoxParser;\n    }\n    // file:src/box-parse.js\n    /* \n * Copyright (c) Telecom ParisTech/TSI/MM/GPAC Cyril Concolato\n * License: BSD-3-Clause (see LICENSE file)\n */ BoxParser.parseUUID = function(stream) {\n        return BoxParser.parseHex16(stream);\n    };\n    BoxParser.parseHex16 = function(stream) {\n        var hex16 = \"\";\n        for(var i = 0; i < 16; i++){\n            var hex = stream.readUint8().toString(16);\n            hex16 += hex.length === 1 ? \"0\" + hex : hex;\n        }\n        return hex16;\n    };\n    BoxParser.parseOneBox = function(stream, headerOnly, parentSize) {\n        var box1;\n        var start = stream.getPosition();\n        var hdr_size = 0;\n        var diff;\n        var uuid;\n        if (stream.getEndPosition() - start < 8) {\n            Log.debug(\"BoxParser\", \"Not enough data in stream to parse the type and size of the box\");\n            return {\n                code: BoxParser.ERR_NOT_ENOUGH_DATA\n            };\n        }\n        if (parentSize && parentSize < 8) {\n            Log.debug(\"BoxParser\", \"Not enough bytes left in the parent box to parse a new box\");\n            return {\n                code: BoxParser.ERR_NOT_ENOUGH_DATA\n            };\n        }\n        var size = stream.readUint32();\n        var type = stream.readString(4);\n        var box_type = type;\n        Log.debug(\"BoxParser\", \"Found box of type '\" + type + \"' and size \" + size + \" at position \" + start);\n        hdr_size = 8;\n        if (type == \"uuid\") {\n            if (stream.getEndPosition() - stream.getPosition() < 16 || parentSize - hdr_size < 16) {\n                stream.seek(start);\n                Log.debug(\"BoxParser\", \"Not enough bytes left in the parent box to parse a UUID box\");\n                return {\n                    code: BoxParser.ERR_NOT_ENOUGH_DATA\n                };\n            }\n            uuid = BoxParser.parseUUID(stream);\n            hdr_size += 16;\n            box_type = uuid;\n        }\n        if (size == 1) {\n            if (stream.getEndPosition() - stream.getPosition() < 8 || parentSize && parentSize - hdr_size < 8) {\n                stream.seek(start);\n                Log.warn(\"BoxParser\", 'Not enough data in stream to parse the extended size of the \"' + type + '\" box');\n                return {\n                    code: BoxParser.ERR_NOT_ENOUGH_DATA\n                };\n            }\n            size = stream.readUint64();\n            hdr_size += 8;\n        } else if (size === 0) {\n            /* box extends till the end of file or invalid file */ if (parentSize) {\n                size = parentSize;\n            } else {\n                /* box extends till the end of file */ if (type !== \"mdat\") {\n                    Log.error(\"BoxParser\", \"Unlimited box size not supported for type: '\" + type + \"'\");\n                    box1 = new BoxParser.Box(type, size);\n                    return {\n                        code: BoxParser.OK,\n                        box: box1,\n                        size: box1.size\n                    };\n                }\n            }\n        }\n        if (size < hdr_size) {\n            Log.error(\"BoxParser\", \"Box of type \" + type + \" has an invalid size \" + size + \" (too small to be a box)\");\n            return {\n                code: BoxParser.ERR_NOT_ENOUGH_DATA,\n                type: type,\n                size: size,\n                hdr_size: hdr_size,\n                start: start\n            };\n        }\n        if (parentSize && size > parentSize) {\n            Log.error(\"BoxParser\", \"Box of type '\" + type + \"' has a size \" + size + \" greater than its container size \" + parentSize);\n            return {\n                code: BoxParser.ERR_NOT_ENOUGH_DATA,\n                type: type,\n                size: size,\n                hdr_size: hdr_size,\n                start: start\n            };\n        }\n        if (start + size > stream.getEndPosition()) {\n            stream.seek(start);\n            Log.info(\"BoxParser\", \"Not enough data in stream to parse the entire '\" + type + \"' box\");\n            return {\n                code: BoxParser.ERR_NOT_ENOUGH_DATA,\n                type: type,\n                size: size,\n                hdr_size: hdr_size,\n                start: start\n            };\n        }\n        if (headerOnly) {\n            return {\n                code: BoxParser.OK,\n                type: type,\n                size: size,\n                hdr_size: hdr_size,\n                start: start\n            };\n        } else {\n            if (BoxParser[type + \"Box\"]) {\n                box1 = new BoxParser[type + \"Box\"](size);\n            } else {\n                if (type !== \"uuid\") {\n                    Log.warn(\"BoxParser\", \"Unknown box type: '\" + type + \"'\");\n                    box1 = new BoxParser.Box(type, size);\n                    box1.has_unparsed_data = true;\n                } else {\n                    if (BoxParser.UUIDBoxes[uuid]) {\n                        box1 = new BoxParser.UUIDBoxes[uuid](size);\n                    } else {\n                        Log.warn(\"BoxParser\", \"Unknown uuid type: '\" + uuid + \"'\");\n                        box1 = new BoxParser.Box(type, size);\n                        box1.uuid = uuid;\n                        box1.has_unparsed_data = true;\n                    }\n                }\n            }\n        }\n        box1.hdr_size = hdr_size;\n        /* recording the position of the box in the input stream */ box1.start = start;\n        if (box1.write === BoxParser.Box.prototype.write && box1.type !== \"mdat\") {\n            Log.info(\"BoxParser\", \"'\" + box_type + \"' box writing not yet implemented, keeping unparsed data in memory for later write\");\n            box1.parseDataAndRewind(stream);\n        }\n        box1.parse(stream);\n        diff = stream.getPosition() - (box1.start + box1.size);\n        if (diff < 0) {\n            Log.warn(\"BoxParser\", \"Parsing of box '\" + box_type + \"' did not read the entire indicated box data size (missing \" + -diff + \" bytes), seeking forward\");\n            stream.seek(box1.start + box1.size);\n        } else if (diff > 0) {\n            Log.error(\"BoxParser\", \"Parsing of box '\" + box_type + \"' read \" + diff + \" more bytes than the indicated box data size, seeking backwards\");\n            stream.seek(box1.start + box1.size);\n        }\n        return {\n            code: BoxParser.OK,\n            box: box1,\n            size: box1.size\n        };\n    };\n    BoxParser.Box.prototype.parse = function(stream) {\n        if (this.type != \"mdat\") {\n            this.data = stream.readUint8Array(this.size - this.hdr_size);\n        } else {\n            if (this.size === 0) {\n                stream.seek(stream.getEndPosition());\n            } else {\n                stream.seek(this.start + this.size);\n            }\n        }\n    };\n    /* Used to parse a box without consuming its data, to allow detailled parsing\n   Useful for boxes for which a write method is not yet implemented */ BoxParser.Box.prototype.parseDataAndRewind = function(stream) {\n        this.data = stream.readUint8Array(this.size - this.hdr_size);\n        // rewinding\n        stream.position -= this.size - this.hdr_size;\n    };\n    BoxParser.FullBox.prototype.parseDataAndRewind = function(stream) {\n        this.parseFullHeader(stream);\n        this.data = stream.readUint8Array(this.size - this.hdr_size);\n        // restore the header size as if the full header had not been parsed\n        this.hdr_size -= 4;\n        // rewinding\n        stream.position -= this.size - this.hdr_size;\n    };\n    BoxParser.FullBox.prototype.parseFullHeader = function(stream) {\n        this.version = stream.readUint8();\n        this.flags = stream.readUint24();\n        this.hdr_size += 4;\n    };\n    BoxParser.FullBox.prototype.parse = function(stream) {\n        this.parseFullHeader(stream);\n        this.data = stream.readUint8Array(this.size - this.hdr_size);\n    };\n    BoxParser.ContainerBox.prototype.parse = function(stream) {\n        var ret1;\n        var box1;\n        while(stream.getPosition() < this.start + this.size){\n            ret1 = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));\n            if (ret1.code === BoxParser.OK) {\n                box1 = ret1.box;\n                /* store the box in the 'boxes' array to preserve box order (for offset) but also store box in a property for more direct access */ this.boxes.push(box1);\n                if (this.subBoxNames && this.subBoxNames.indexOf(box1.type) != -1) {\n                    this[this.subBoxNames[this.subBoxNames.indexOf(box1.type)] + \"s\"].push(box1);\n                } else {\n                    var box_type = box1.type !== \"uuid\" ? box1.type : box1.uuid;\n                    if (this[box_type]) {\n                        Log.warn(\"Box of type \" + box_type + \" already stored in field of this type\");\n                    } else {\n                        this[box_type] = box1;\n                    }\n                }\n            } else {\n                return;\n            }\n        }\n    };\n    BoxParser.Box.prototype.parseLanguage = function(stream) {\n        this.language = stream.readUint16();\n        var chars = [];\n        chars[0] = this.language >> 10 & 0x1F;\n        chars[1] = this.language >> 5 & 0x1F;\n        chars[2] = this.language & 0x1F;\n        this.languageString = String.fromCharCode(chars[0] + 0x60, chars[1] + 0x60, chars[2] + 0x60);\n    };\n    // file:src/parsing/sampleentries/sampleentry.js\n    BoxParser.SAMPLE_ENTRY_TYPE_VISUAL = \"Visual\";\n    BoxParser.SAMPLE_ENTRY_TYPE_AUDIO = \"Audio\";\n    BoxParser.SAMPLE_ENTRY_TYPE_HINT = \"Hint\";\n    BoxParser.SAMPLE_ENTRY_TYPE_METADATA = \"Metadata\";\n    BoxParser.SAMPLE_ENTRY_TYPE_SUBTITLE = \"Subtitle\";\n    BoxParser.SAMPLE_ENTRY_TYPE_SYSTEM = \"System\";\n    BoxParser.SAMPLE_ENTRY_TYPE_TEXT = \"Text\";\n    BoxParser.SampleEntry.prototype.parseHeader = function(stream) {\n        stream.readUint8Array(6);\n        this.data_reference_index = stream.readUint16();\n        this.hdr_size += 8;\n    };\n    BoxParser.SampleEntry.prototype.parse = function(stream) {\n        this.parseHeader(stream);\n        this.data = stream.readUint8Array(this.size - this.hdr_size);\n    };\n    BoxParser.SampleEntry.prototype.parseDataAndRewind = function(stream) {\n        this.parseHeader(stream);\n        this.data = stream.readUint8Array(this.size - this.hdr_size);\n        // restore the header size as if the sample entry header had not been parsed\n        this.hdr_size -= 8;\n        // rewinding\n        stream.position -= this.size - this.hdr_size;\n    };\n    BoxParser.SampleEntry.prototype.parseFooter = function(stream) {\n        BoxParser.ContainerBox.prototype.parse.call(this, stream);\n    };\n    // Base SampleEntry types with default parsing\n    BoxParser.createMediaSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_HINT);\n    BoxParser.createMediaSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_METADATA);\n    BoxParser.createMediaSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_SUBTITLE);\n    BoxParser.createMediaSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_SYSTEM);\n    BoxParser.createMediaSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_TEXT);\n    //Base SampleEntry types for Audio and Video with specific parsing\n    BoxParser.createMediaSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_VISUAL, function(stream) {\n        var compressorname_length;\n        this.parseHeader(stream);\n        stream.readUint16();\n        stream.readUint16();\n        stream.readUint32Array(3);\n        this.width = stream.readUint16();\n        this.height = stream.readUint16();\n        this.horizresolution = stream.readUint32();\n        this.vertresolution = stream.readUint32();\n        stream.readUint32();\n        this.frame_count = stream.readUint16();\n        compressorname_length = Math.min(31, stream.readUint8());\n        this.compressorname = stream.readString(compressorname_length);\n        if (compressorname_length < 31) {\n            stream.readString(31 - compressorname_length);\n        }\n        this.depth = stream.readUint16();\n        stream.readUint16();\n        this.parseFooter(stream);\n    });\n    BoxParser.createMediaSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_AUDIO, function(stream) {\n        this.parseHeader(stream);\n        stream.readUint32Array(2);\n        this.channel_count = stream.readUint16();\n        this.samplesize = stream.readUint16();\n        stream.readUint16();\n        stream.readUint16();\n        this.samplerate = stream.readUint32() / (1 << 16);\n        this.parseFooter(stream);\n    });\n    // Sample entries inheriting from Audio and Video\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_VISUAL, \"avc1\");\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_VISUAL, \"avc2\");\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_VISUAL, \"avc3\");\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_VISUAL, \"avc4\");\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_VISUAL, \"av01\");\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_VISUAL, \"hvc1\");\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_VISUAL, \"hev1\");\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_AUDIO, \"mp4a\");\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_AUDIO, \"ac-3\");\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_AUDIO, \"ec-3\");\n    // Encrypted sample entries\n    BoxParser.createEncryptedSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_VISUAL, \"encv\");\n    BoxParser.createEncryptedSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_AUDIO, \"enca\");\n    BoxParser.createEncryptedSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_SUBTITLE, \"encu\");\n    BoxParser.createEncryptedSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_SYSTEM, \"encs\");\n    BoxParser.createEncryptedSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_TEXT, \"enct\");\n    BoxParser.createEncryptedSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_METADATA, \"encm\");\n    // file:src/parsing/a1lx.js\n    BoxParser.createBoxCtor(\"a1lx\", function(stream) {\n        var large_size = stream.readUint8() & 1;\n        var FieldLength = ((large_size & 1) + 1) * 16;\n        this.layer_size = [];\n        for(var i = 0; i < 3; i++){\n            if (FieldLength == 16) {\n                this.layer_size[i] = stream.readUint16();\n            } else {\n                this.layer_size[i] = stream.readUint32();\n            }\n        }\n    }); // file:src/parsing/a1op.js\n    BoxParser.createBoxCtor(\"a1op\", function(stream) {\n        this.op_index = stream.readUint8();\n    }); // file:src/parsing/auxC.js\n    BoxParser.createFullBoxCtor(\"auxC\", function(stream) {\n        this.aux_type = stream.readCString();\n        var aux_subtype_length = this.size - this.hdr_size - (this.aux_type.length + 1);\n        this.aux_subtype = stream.readUint8Array(aux_subtype_length);\n    }); // file:src/parsing/av1C.js\n    BoxParser.createBoxCtor(\"av1C\", function(stream) {\n        var tmp = stream.readUint8();\n        if (tmp >> 7 & 0x1 !== 1) {\n            Log.error(\"av1C marker problem\");\n            return;\n        }\n        this.version = tmp & 0x7F;\n        if (this.version !== 1) {\n            Log.error(\"av1C version \" + this.version + \" not supported\");\n            return;\n        }\n        tmp = stream.readUint8();\n        this.seq_profile = tmp >> 5 & 0x7;\n        this.seq_level_idx_0 = tmp & 0x1F;\n        tmp = stream.readUint8();\n        this.seq_tier_0 = tmp >> 7 & 0x1;\n        this.high_bitdepth = tmp >> 6 & 0x1;\n        this.twelve_bit = tmp >> 5 & 0x1;\n        this.monochrome = tmp >> 4 & 0x1;\n        this.chroma_subsampling_x = tmp >> 3 & 0x1;\n        this.chroma_subsampling_y = tmp >> 2 & 0x1;\n        this.chroma_sample_position = tmp & 0x3;\n        tmp = stream.readUint8();\n        this.reserved_1 = tmp >> 5 & 0x7;\n        if (this.reserved_1 !== 0) {\n            Log.error(\"av1C reserved_1 parsing problem\");\n            return;\n        }\n        this.initial_presentation_delay_present = tmp >> 4 & 0x1;\n        if (this.initial_presentation_delay_present === 1) {\n            this.initial_presentation_delay_minus_one = tmp & 0xF;\n        } else {\n            this.reserved_2 = tmp & 0xF;\n            if (this.reserved_2 !== 0) {\n                Log.error(\"av1C reserved_2 parsing problem\");\n                return;\n            }\n        }\n        var configOBUs_length = this.size - this.hdr_size - 4;\n        this.configOBUs = stream.readUint8Array(configOBUs_length);\n    });\n    // file:src/parsing/avcC.js\n    BoxParser.createBoxCtor(\"avcC\", function(stream) {\n        var i;\n        var toparse;\n        this.configurationVersion = stream.readUint8();\n        this.AVCProfileIndication = stream.readUint8();\n        this.profile_compatibility = stream.readUint8();\n        this.AVCLevelIndication = stream.readUint8();\n        this.lengthSizeMinusOne = stream.readUint8() & 0x3;\n        this.nb_SPS_nalus = stream.readUint8() & 0x1F;\n        toparse = this.size - this.hdr_size - 6;\n        this.SPS = [];\n        for(i = 0; i < this.nb_SPS_nalus; i++){\n            this.SPS[i] = {};\n            this.SPS[i].length = stream.readUint16();\n            this.SPS[i].nalu = stream.readUint8Array(this.SPS[i].length);\n            toparse -= 2 + this.SPS[i].length;\n        }\n        this.nb_PPS_nalus = stream.readUint8();\n        toparse--;\n        this.PPS = [];\n        for(i = 0; i < this.nb_PPS_nalus; i++){\n            this.PPS[i] = {};\n            this.PPS[i].length = stream.readUint16();\n            this.PPS[i].nalu = stream.readUint8Array(this.PPS[i].length);\n            toparse -= 2 + this.PPS[i].length;\n        }\n        if (toparse > 0) {\n            this.ext = stream.readUint8Array(toparse);\n        }\n    });\n    // file:src/parsing/btrt.js\n    BoxParser.createBoxCtor(\"btrt\", function(stream) {\n        this.bufferSizeDB = stream.readUint32();\n        this.maxBitrate = stream.readUint32();\n        this.avgBitrate = stream.readUint32();\n    });\n    // file:src/parsing/clap.js\n    BoxParser.createBoxCtor(\"clap\", function(stream) {\n        this.cleanApertureWidthN = stream.readUint32();\n        this.cleanApertureWidthD = stream.readUint32();\n        this.cleanApertureHeightN = stream.readUint32();\n        this.cleanApertureHeightD = stream.readUint32();\n        this.horizOffN = stream.readUint32();\n        this.horizOffD = stream.readUint32();\n        this.vertOffN = stream.readUint32();\n        this.vertOffD = stream.readUint32();\n    }); // file:src/parsing/clli.js\n    BoxParser.createBoxCtor(\"clli\", function(stream) {\n        this.max_content_light_level = stream.readUint16();\n        this.max_pic_average_light_level = stream.readUint16();\n    });\n    // file:src/parsing/co64.js\n    BoxParser.createFullBoxCtor(\"co64\", function(stream) {\n        var entry_count1;\n        var i;\n        entry_count1 = stream.readUint32();\n        this.chunk_offsets = [];\n        if (this.version === 0) {\n            for(i = 0; i < entry_count1; i++){\n                this.chunk_offsets.push(stream.readUint64());\n            }\n        }\n    });\n    // file:src/parsing/CoLL.js\n    BoxParser.createFullBoxCtor(\"CoLL\", function(stream) {\n        this.maxCLL = stream.readUint16();\n        this.maxFALL = stream.readUint16();\n    });\n    // file:src/parsing/colr.js\n    BoxParser.createBoxCtor(\"colr\", function(stream) {\n        this.colour_type = stream.readString(4);\n        if (this.colour_type === \"nclx\") {\n            this.colour_primaries = stream.readUint16();\n            this.transfer_characteristics = stream.readUint16();\n            this.matrix_coefficients = stream.readUint16();\n            var tmp = stream.readUint8();\n            this.full_range_flag = tmp >> 7;\n        } else if (this.colour_type === \"rICC\") {\n            this.ICC_profile = stream.readUint8Array(this.size - 4);\n        } else if (this.colour_type === \"prof\") {\n            this.ICC_profile = stream.readUint8Array(this.size - 4);\n        }\n    }); // file:src/parsing/cprt.js\n    BoxParser.createFullBoxCtor(\"cprt\", function(stream) {\n        this.parseLanguage(stream);\n        this.notice = stream.readCString();\n    });\n    // file:src/parsing/cslg.js\n    BoxParser.createFullBoxCtor(\"cslg\", function(stream) {\n        if (this.version === 0) {\n            this.compositionToDTSShift = stream.readInt32(); /* signed */ \n            this.leastDecodeToDisplayDelta = stream.readInt32(); /* signed */ \n            this.greatestDecodeToDisplayDelta = stream.readInt32(); /* signed */ \n            this.compositionStartTime = stream.readInt32(); /* signed */ \n            this.compositionEndTime = stream.readInt32(); /* signed */ \n        }\n    });\n    // file:src/parsing/ctts.js\n    BoxParser.createFullBoxCtor(\"ctts\", function(stream) {\n        var entry_count1;\n        var i;\n        entry_count1 = stream.readUint32();\n        this.sample_counts = [];\n        this.sample_offsets = [];\n        if (this.version === 0) {\n            for(i = 0; i < entry_count1; i++){\n                this.sample_counts.push(stream.readUint32());\n                /* some files are buggy and declare version=0 while using signed offsets.\n\t\t\t   The likelyhood of using the most significant bit in a 32-bits time offset is very low,\n\t\t\t   so using signed value here as well */ var value = stream.readInt32();\n                if (value < 0) {\n                    Log.warn(\"BoxParser\", \"ctts box uses negative values without using version 1\");\n                }\n                this.sample_offsets.push(value);\n            }\n        } else if (this.version == 1) {\n            for(i = 0; i < entry_count1; i++){\n                this.sample_counts.push(stream.readUint32());\n                this.sample_offsets.push(stream.readInt32()); /* signed */ \n            }\n        }\n    });\n    // file:src/parsing/dac3.js\n    BoxParser.createBoxCtor(\"dac3\", function(stream) {\n        var tmp_byte1 = stream.readUint8();\n        var tmp_byte2 = stream.readUint8();\n        var tmp_byte3 = stream.readUint8();\n        this.fscod = tmp_byte1 >> 6;\n        this.bsid = tmp_byte1 >> 1 & 0x1F;\n        this.bsmod = (tmp_byte1 & 0x1) << 2 | tmp_byte2 >> 6 & 0x3;\n        this.acmod = tmp_byte2 >> 3 & 0x7;\n        this.lfeon = tmp_byte2 >> 2 & 0x1;\n        this.bit_rate_code = tmp_byte2 & 0x3 | tmp_byte3 >> 5 & 0x7;\n    });\n    // file:src/parsing/dec3.js\n    BoxParser.createBoxCtor(\"dec3\", function(stream) {\n        var tmp_16 = stream.readUint16();\n        this.data_rate = tmp_16 >> 3;\n        this.num_ind_sub = tmp_16 & 0x7;\n        this.ind_subs = [];\n        for(var i = 0; i < this.num_ind_sub + 1; i++){\n            var ind_sub = {};\n            this.ind_subs.push(ind_sub);\n            var tmp_byte1 = stream.readUint8();\n            var tmp_byte2 = stream.readUint8();\n            var tmp_byte3 = stream.readUint8();\n            ind_sub.fscod = tmp_byte1 >> 6;\n            ind_sub.bsid = tmp_byte1 >> 1 & 0x1F;\n            ind_sub.bsmod = (tmp_byte1 & 0x1) << 4 | tmp_byte2 >> 4 & 0xF;\n            ind_sub.acmod = tmp_byte2 >> 1 & 0x7;\n            ind_sub.lfeon = tmp_byte2 & 0x1;\n            ind_sub.num_dep_sub = tmp_byte3 >> 1 & 0xF;\n            if (ind_sub.num_dep_sub > 0) {\n                ind_sub.chan_loc = (tmp_byte3 & 0x1) << 8 | stream.readUint8();\n            }\n        }\n    });\n    // file:src/parsing/dfLa.js\n    BoxParser.createFullBoxCtor(\"dfLa\", function(stream) {\n        var BLOCKTYPE_MASK = 0x7F;\n        var LASTMETADATABLOCKFLAG_MASK = 0x80;\n        var boxesFound = [];\n        var knownBlockTypes = [\n            \"STREAMINFO\",\n            \"PADDING\",\n            \"APPLICATION\",\n            \"SEEKTABLE\",\n            \"VORBIS_COMMENT\",\n            \"CUESHEET\",\n            \"PICTURE\",\n            \"RESERVED\"\n        ];\n        // dfLa is a FullBox\n        this.parseFullHeader(stream);\n        // for (i=0; ; i++) { // to end of box\n        do {\n            var flagAndType = stream.readUint8();\n            var type = Math.min(flagAndType & BLOCKTYPE_MASK, knownBlockTypes.length - 1);\n            // if this is a STREAMINFO block, read the true samplerate since this\n            // can be different to the AudioSampleEntry samplerate.\n            if (!type) {\n                // read past all the other stuff\n                stream.readUint8Array(13);\n                // extract samplerate\n                this.samplerate = stream.readUint32() >> 12;\n                // read to end of STREAMINFO\n                stream.readUint8Array(20);\n            } else {\n                // not interested in other block types so just discard length bytes\n                stream.readUint8Array(stream.readUint24());\n            }\n            boxesFound.push(knownBlockTypes[type]);\n            if (!!(flagAndType & LASTMETADATABLOCKFLAG_MASK)) {\n                break;\n            }\n        }while (true);\n        this.numMetadataBlocks = boxesFound.length + \" (\" + boxesFound.join(\", \") + \")\";\n    });\n    // file:src/parsing/dimm.js\n    BoxParser.createBoxCtor(\"dimm\", function(stream) {\n        this.bytessent = stream.readUint64();\n    });\n    // file:src/parsing/dmax.js\n    BoxParser.createBoxCtor(\"dmax\", function(stream) {\n        this.time = stream.readUint32();\n    });\n    // file:src/parsing/dmed.js\n    BoxParser.createBoxCtor(\"dmed\", function(stream) {\n        this.bytessent = stream.readUint64();\n    });\n    // file:src/parsing/dref.js\n    BoxParser.createFullBoxCtor(\"dref\", function(stream) {\n        var ret1;\n        var box1;\n        this.entries = [];\n        var entry_count1 = stream.readUint32();\n        for(var i = 0; i < entry_count1; i++){\n            ret1 = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));\n            if (ret1.code === BoxParser.OK) {\n                box1 = ret1.box;\n                this.entries.push(box1);\n            } else {\n                return;\n            }\n        }\n    });\n    // file:src/parsing/drep.js\n    BoxParser.createBoxCtor(\"drep\", function(stream) {\n        this.bytessent = stream.readUint64();\n    });\n    // file:src/parsing/elng.js\n    BoxParser.createFullBoxCtor(\"elng\", function(stream) {\n        this.extended_language = stream.readString(this.size - this.hdr_size);\n    });\n    // file:src/parsing/elst.js\n    BoxParser.createFullBoxCtor(\"elst\", function(stream) {\n        this.entries = [];\n        var entry_count1 = stream.readUint32();\n        for(var i = 0; i < entry_count1; i++){\n            var entry = {};\n            this.entries.push(entry);\n            if (this.version === 1) {\n                entry.segment_duration = stream.readUint64();\n                entry.media_time = stream.readInt64();\n            } else {\n                entry.segment_duration = stream.readUint32();\n                entry.media_time = stream.readInt32();\n            }\n            entry.media_rate_integer = stream.readInt16();\n            entry.media_rate_fraction = stream.readInt16();\n        }\n    });\n    // file:src/parsing/emsg.js\n    BoxParser.createFullBoxCtor(\"emsg\", function(stream) {\n        if (this.version == 1) {\n            this.timescale = stream.readUint32();\n            this.presentation_time = stream.readUint64();\n            this.event_duration = stream.readUint32();\n            this.id = stream.readUint32();\n            this.scheme_id_uri = stream.readCString();\n            this.value = stream.readCString();\n        } else {\n            this.scheme_id_uri = stream.readCString();\n            this.value = stream.readCString();\n            this.timescale = stream.readUint32();\n            this.presentation_time_delta = stream.readUint32();\n            this.event_duration = stream.readUint32();\n            this.id = stream.readUint32();\n        }\n        var message_size = this.size - this.hdr_size - (4 * 4 + (this.scheme_id_uri.length + 1) + (this.value.length + 1));\n        if (this.version == 1) {\n            message_size -= 4;\n        }\n        this.message_data = stream.readUint8Array(message_size);\n    });\n    // file:src/parsing/esds.js\n    BoxParser.createFullBoxCtor(\"esds\", function(stream) {\n        var esd_data = stream.readUint8Array(this.size - this.hdr_size);\n        if (typeof MPEG4DescriptorParser !== \"undefined\") {\n            var esd_parser = new MPEG4DescriptorParser();\n            this.esd = esd_parser.parseOneDescriptor(new DataStream(esd_data.buffer, 0, DataStream.BIG_ENDIAN));\n        }\n    });\n    // file:src/parsing/fiel.js\n    BoxParser.createBoxCtor(\"fiel\", function(stream) {\n        this.fieldCount = stream.readUint8();\n        this.fieldOrdering = stream.readUint8();\n    });\n    // file:src/parsing/frma.js\n    BoxParser.createBoxCtor(\"frma\", function(stream) {\n        this.data_format = stream.readString(4);\n    });\n    // file:src/parsing/ftyp.js\n    BoxParser.createBoxCtor(\"ftyp\", function(stream) {\n        var toparse = this.size - this.hdr_size;\n        this.major_brand = stream.readString(4);\n        this.minor_version = stream.readUint32();\n        toparse -= 8;\n        this.compatible_brands = [];\n        var i = 0;\n        while(toparse >= 4){\n            this.compatible_brands[i] = stream.readString(4);\n            toparse -= 4;\n            i++;\n        }\n    });\n    // file:src/parsing/hdlr.js\n    BoxParser.createFullBoxCtor(\"hdlr\", function(stream) {\n        if (this.version === 0) {\n            stream.readUint32();\n            this.handler = stream.readString(4);\n            stream.readUint32Array(3);\n            this.name = stream.readString(this.size - this.hdr_size - 20);\n            if (this.name[this.name.length - 1] === \"\\x00\") {\n                this.name = this.name.slice(0, -1);\n            }\n        }\n    });\n    // file:src/parsing/hvcC.js\n    BoxParser.createBoxCtor(\"hvcC\", function(stream) {\n        var i, j;\n        var length;\n        var tmp_byte;\n        this.configurationVersion = stream.readUint8();\n        tmp_byte = stream.readUint8();\n        this.general_profile_space = tmp_byte >> 6;\n        this.general_tier_flag = (tmp_byte & 0x20) >> 5;\n        this.general_profile_idc = tmp_byte & 0x1F;\n        this.general_profile_compatibility = stream.readUint32();\n        this.general_constraint_indicator = stream.readUint8Array(6);\n        this.general_level_idc = stream.readUint8();\n        this.min_spatial_segmentation_idc = stream.readUint16() & 0xFFF;\n        this.parallelismType = stream.readUint8() & 0x3;\n        this.chroma_format_idc = stream.readUint8() & 0x3;\n        this.bit_depth_luma_minus8 = stream.readUint8() & 0x7;\n        this.bit_depth_chroma_minus8 = stream.readUint8() & 0x7;\n        this.avgFrameRate = stream.readUint16();\n        tmp_byte = stream.readUint8();\n        this.constantFrameRate = tmp_byte >> 6;\n        this.numTemporalLayers = (tmp_byte & 0XD) >> 3;\n        this.temporalIdNested = (tmp_byte & 0X4) >> 2;\n        this.lengthSizeMinusOne = tmp_byte & 0X3;\n        this.nalu_arrays = [];\n        var numOfArrays = stream.readUint8();\n        for(i = 0; i < numOfArrays; i++){\n            var nalu_array = [];\n            this.nalu_arrays.push(nalu_array);\n            tmp_byte = stream.readUint8();\n            nalu_array.completeness = (tmp_byte & 0x80) >> 7;\n            nalu_array.nalu_type = tmp_byte & 0x3F;\n            var numNalus = stream.readUint16();\n            for(j = 0; j < numNalus; j++){\n                var nalu = {};\n                nalu_array.push(nalu);\n                length = stream.readUint16();\n                nalu.data = stream.readUint8Array(length);\n            }\n        }\n    });\n    // file:src/parsing/iinf.js\n    BoxParser.createFullBoxCtor(\"iinf\", function(stream) {\n        var ret1;\n        if (this.version === 0) {\n            this.entry_count = stream.readUint16();\n        } else {\n            this.entry_count = stream.readUint32();\n        }\n        this.item_infos = [];\n        for(var i = 0; i < this.entry_count; i++){\n            ret1 = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));\n            if (ret1.code === BoxParser.OK) {\n                if (ret1.box.type !== \"infe\") {\n                    Log.error(\"BoxParser\", \"Expected 'infe' box, got \" + ret1.box.type);\n                }\n                this.item_infos[i] = ret1.box;\n            } else {\n                return;\n            }\n        }\n    });\n    // file:src/parsing/iloc.js\n    BoxParser.createFullBoxCtor(\"iloc\", function(stream) {\n        var byte;\n        byte = stream.readUint8();\n        this.offset_size = byte >> 4 & 0xF;\n        this.length_size = byte & 0xF;\n        byte = stream.readUint8();\n        this.base_offset_size = byte >> 4 & 0xF;\n        if (this.version === 1 || this.version === 2) {\n            this.index_size = byte & 0xF;\n        } else {\n            this.index_size = 0;\n        // reserved = byte & 0xF;\n        }\n        this.items = [];\n        var item_count = 0;\n        if (this.version < 2) {\n            item_count = stream.readUint16();\n        } else if (this.version === 2) {\n            item_count = stream.readUint32();\n        } else {\n            throw \"version of iloc box not supported\";\n        }\n        for(var i = 0; i < item_count; i++){\n            var item = {};\n            this.items.push(item);\n            if (this.version < 2) {\n                item.item_ID = stream.readUint16();\n            } else if (this.version === 2) {\n                item.item_ID = stream.readUint16();\n            } else {\n                throw \"version of iloc box not supported\";\n            }\n            if (this.version === 1 || this.version === 2) {\n                item.construction_method = stream.readUint16() & 0xF;\n            } else {\n                item.construction_method = 0;\n            }\n            item.data_reference_index = stream.readUint16();\n            switch(this.base_offset_size){\n                case 0:\n                    item.base_offset = 0;\n                    break;\n                case 4:\n                    item.base_offset = stream.readUint32();\n                    break;\n                case 8:\n                    item.base_offset = stream.readUint64();\n                    break;\n                default:\n                    throw \"Error reading base offset size\";\n            }\n            var extent_count = stream.readUint16();\n            item.extents = [];\n            for(var j = 0; j < extent_count; j++){\n                var extent = {};\n                item.extents.push(extent);\n                if (this.version === 1 || this.version === 2) {\n                    switch(this.index_size){\n                        case 0:\n                            extent.extent_index = 0;\n                            break;\n                        case 4:\n                            extent.extent_index = stream.readUint32();\n                            break;\n                        case 8:\n                            extent.extent_index = stream.readUint64();\n                            break;\n                        default:\n                            throw \"Error reading extent index\";\n                    }\n                }\n                switch(this.offset_size){\n                    case 0:\n                        extent.extent_offset = 0;\n                        break;\n                    case 4:\n                        extent.extent_offset = stream.readUint32();\n                        break;\n                    case 8:\n                        extent.extent_offset = stream.readUint64();\n                        break;\n                    default:\n                        throw \"Error reading extent index\";\n                }\n                switch(this.length_size){\n                    case 0:\n                        extent.extent_length = 0;\n                        break;\n                    case 4:\n                        extent.extent_length = stream.readUint32();\n                        break;\n                    case 8:\n                        extent.extent_length = stream.readUint64();\n                        break;\n                    default:\n                        throw \"Error reading extent index\";\n                }\n            }\n        }\n    });\n    // file:src/parsing/imir.js\n    BoxParser.createBoxCtor(\"imir\", function(stream) {\n        var tmp = stream.readUint8();\n        this.reserved = tmp >> 7;\n        this.axis = tmp & 1;\n    }); // file:src/parsing/infe.js\n    BoxParser.createFullBoxCtor(\"infe\", function(stream) {\n        if (this.version === 0 || this.version === 1) {\n            this.item_ID = stream.readUint16();\n            this.item_protection_index = stream.readUint16();\n            this.item_name = stream.readCString();\n            this.content_type = stream.readCString();\n            this.content_encoding = stream.readCString();\n        }\n        if (this.version === 1) {\n            this.extension_type = stream.readString(4);\n            Log.warn(\"BoxParser\", \"Cannot parse extension type\");\n            stream.seek(this.start + this.size);\n            return;\n        }\n        if (this.version >= 2) {\n            if (this.version === 2) {\n                this.item_ID = stream.readUint16();\n            } else if (this.version === 3) {\n                this.item_ID = stream.readUint32();\n            }\n            this.item_protection_index = stream.readUint16();\n            this.item_type = stream.readString(4);\n            this.item_name = stream.readCString();\n            if (this.item_type === \"mime\") {\n                this.content_type = stream.readCString();\n                this.content_encoding = stream.readCString();\n            } else if (this.item_type === \"uri \") {\n                this.item_uri_type = stream.readCString();\n            }\n        }\n    });\n    // file:src/parsing/ipma.js\n    BoxParser.createFullBoxCtor(\"ipma\", function(stream) {\n        var i, j;\n        entry_count = stream.readUint32();\n        this.associations = [];\n        for(i = 0; i < entry_count; i++){\n            var item_assoc = {};\n            this.associations.push(item_assoc);\n            if (this.version < 1) {\n                item_assoc.id = stream.readUint16();\n            } else {\n                item_assoc.id = stream.readUint32();\n            }\n            var association_count = stream.readUint8();\n            item_assoc.props = [];\n            for(j = 0; j < association_count; j++){\n                var tmp = stream.readUint8();\n                var p = {};\n                item_assoc.props.push(p);\n                p.essential = (tmp & 0x80) >> 7 === 1;\n                if (this.flags & 0x1) {\n                    p.property_index = (tmp & 0x7F) << 8 | stream.readUint8();\n                } else {\n                    p.property_index = tmp & 0x7F;\n                }\n            }\n        }\n    });\n    // file:src/parsing/iref.js\n    BoxParser.createFullBoxCtor(\"iref\", function(stream) {\n        var ret1;\n        var box1;\n        this.references = [];\n        while(stream.getPosition() < this.start + this.size){\n            ret1 = BoxParser.parseOneBox(stream, true, this.size - (stream.getPosition() - this.start));\n            if (ret1.code === BoxParser.OK) {\n                if (this.version === 0) {\n                    box1 = new BoxParser.SingleItemTypeReferenceBox(ret1.type, ret1.size, ret1.hdr_size, ret1.start);\n                } else {\n                    box1 = new BoxParser.SingleItemTypeReferenceBoxLarge(ret1.type, ret1.size, ret1.hdr_size, ret1.start);\n                }\n                if (box1.write === BoxParser.Box.prototype.write && box1.type !== \"mdat\") {\n                    Log.warn(\"BoxParser\", box1.type + \" box writing not yet implemented, keeping unparsed data in memory for later write\");\n                    box1.parseDataAndRewind(stream);\n                }\n                box1.parse(stream);\n                this.references.push(box1);\n            } else {\n                return;\n            }\n        }\n    });\n    // file:src/parsing/irot.js\n    BoxParser.createBoxCtor(\"irot\", function(stream) {\n        this.angle = stream.readUint8() & 0x3;\n    });\n    // file:src/parsing/ispe.js\n    BoxParser.createFullBoxCtor(\"ispe\", function(stream) {\n        this.image_width = stream.readUint32();\n        this.image_height = stream.readUint32();\n    }); // file:src/parsing/kind.js\n    BoxParser.createFullBoxCtor(\"kind\", function(stream) {\n        this.schemeURI = stream.readCString();\n        this.value = stream.readCString();\n    });\n    // file:src/parsing/leva.js\n    BoxParser.createFullBoxCtor(\"leva\", function(stream) {\n        var count = stream.readUint8();\n        this.levels = [];\n        for(var i = 0; i < count; i++){\n            var level = {};\n            this.levels[i] = level;\n            level.track_ID = stream.readUint32();\n            var tmp_byte = stream.readUint8();\n            level.padding_flag = tmp_byte >> 7;\n            level.assignment_type = tmp_byte & 0x7F;\n            switch(level.assignment_type){\n                case 0:\n                    level.grouping_type = stream.readString(4);\n                    break;\n                case 1:\n                    level.grouping_type = stream.readString(4);\n                    level.grouping_type_parameter = stream.readUint32();\n                    break;\n                case 2:\n                    break;\n                case 3:\n                    break;\n                case 4:\n                    level.sub_track_id = stream.readUint32();\n                    break;\n                default:\n                    Log.warn(\"BoxParser\", \"Unknown leva assignement type\");\n            }\n        }\n    });\n    // file:src/parsing/lsel.js\n    BoxParser.createBoxCtor(\"lsel\", function(stream) {\n        this.layer_id = stream.readUint16();\n    }); // file:src/parsing/maxr.js\n    BoxParser.createBoxCtor(\"maxr\", function(stream) {\n        this.period = stream.readUint32();\n        this.bytes = stream.readUint32();\n    });\n    // file:src/parsing/mdcv.js\n    BoxParser.createBoxCtor(\"mdcv\", function(stream) {\n        this.display_primaries = [];\n        this.display_primaries[0] = {};\n        this.display_primaries[0].x = stream.readUint16();\n        this.display_primaries[0].y = stream.readUint16();\n        this.display_primaries[1] = {};\n        this.display_primaries[1].x = stream.readUint16();\n        this.display_primaries[1].y = stream.readUint16();\n        this.display_primaries[2] = {};\n        this.display_primaries[2].x = stream.readUint16();\n        this.display_primaries[2].y = stream.readUint16();\n        this.white_point = {};\n        this.white_point.x = stream.readUint16();\n        this.white_point.y = stream.readUint16();\n        this.max_display_mastering_luminance = stream.readUint32();\n        this.min_display_mastering_luminance = stream.readUint32();\n    });\n    // file:src/parsing/mdhd.js\n    BoxParser.createFullBoxCtor(\"mdhd\", function(stream) {\n        if (this.version == 1) {\n            this.creation_time = stream.readUint64();\n            this.modification_time = stream.readUint64();\n            this.timescale = stream.readUint32();\n            this.duration = stream.readUint64();\n        } else {\n            this.creation_time = stream.readUint32();\n            this.modification_time = stream.readUint32();\n            this.timescale = stream.readUint32();\n            this.duration = stream.readUint32();\n        }\n        this.parseLanguage(stream);\n        stream.readUint16();\n    });\n    // file:src/parsing/mehd.js\n    BoxParser.createFullBoxCtor(\"mehd\", function(stream) {\n        if (this.flags & 0x1) {\n            Log.warn(\"BoxParser\", \"mehd box incorrectly uses flags set to 1, converting version to 1\");\n            this.version = 1;\n        }\n        if (this.version == 1) {\n            this.fragment_duration = stream.readUint64();\n        } else {\n            this.fragment_duration = stream.readUint32();\n        }\n    });\n    // file:src/parsing/meta.js\n    BoxParser.createFullBoxCtor(\"meta\", function(stream) {\n        this.boxes = [];\n        BoxParser.ContainerBox.prototype.parse.call(this, stream);\n    });\n    // file:src/parsing/mfhd.js\n    BoxParser.createFullBoxCtor(\"mfhd\", function(stream) {\n        this.sequence_number = stream.readUint32();\n    });\n    // file:src/parsing/mfro.js\n    BoxParser.createFullBoxCtor(\"mfro\", function(stream) {\n        this._size = stream.readUint32();\n    });\n    // file:src/parsing/mvhd.js\n    BoxParser.createFullBoxCtor(\"mvhd\", function(stream) {\n        if (this.version == 1) {\n            this.creation_time = stream.readUint64();\n            this.modification_time = stream.readUint64();\n            this.timescale = stream.readUint32();\n            this.duration = stream.readUint64();\n        } else {\n            this.creation_time = stream.readUint32();\n            this.modification_time = stream.readUint32();\n            this.timescale = stream.readUint32();\n            this.duration = stream.readUint32();\n        }\n        this.rate = stream.readUint32();\n        this.volume = stream.readUint16() >> 8;\n        stream.readUint16();\n        stream.readUint32Array(2);\n        this.matrix = stream.readUint32Array(9);\n        stream.readUint32Array(6);\n        this.next_track_id = stream.readUint32();\n    });\n    // file:src/parsing/npck.js\n    BoxParser.createBoxCtor(\"npck\", function(stream) {\n        this.packetssent = stream.readUint32();\n    });\n    // file:src/parsing/nump.js\n    BoxParser.createBoxCtor(\"nump\", function(stream) {\n        this.packetssent = stream.readUint64();\n    });\n    // file:src/parsing/padb.js\n    BoxParser.createFullBoxCtor(\"padb\", function(stream) {\n        var sample_count = stream.readUint32();\n        this.padbits = [];\n        for(var i = 0; i < Math.floor((sample_count + 1) / 2); i++){\n            this.padbits = stream.readUint8();\n        }\n    });\n    // file:src/parsing/pasp.js\n    BoxParser.createBoxCtor(\"pasp\", function(stream) {\n        this.hSpacing = stream.readUint32();\n        this.vSpacing = stream.readUint32();\n    }); // file:src/parsing/payl.js\n    BoxParser.createBoxCtor(\"payl\", function(stream) {\n        this.text = stream.readString(this.size - this.hdr_size);\n    });\n    // file:src/parsing/payt.js\n    BoxParser.createBoxCtor(\"payt\", function(stream) {\n        this.payloadID = stream.readUint32();\n        var count = stream.readUint8();\n        this.rtpmap_string = stream.readString(count);\n    });\n    // file:src/parsing/pdin.js\n    BoxParser.createFullBoxCtor(\"pdin\", function(stream) {\n        var count = (this.size - this.hdr_size) / 8;\n        this.rate = [];\n        this.initial_delay = [];\n        for(var i = 0; i < count; i++){\n            this.rate[i] = stream.readUint32();\n            this.initial_delay[i] = stream.readUint32();\n        }\n    });\n    // file:src/parsing/pitm.js\n    BoxParser.createFullBoxCtor(\"pitm\", function(stream) {\n        if (this.version === 0) {\n            this.item_id = stream.readUint16();\n        } else {\n            this.item_id = stream.readUint32();\n        }\n    });\n    // file:src/parsing/pixi.js\n    BoxParser.createFullBoxCtor(\"pixi\", function(stream) {\n        var i;\n        this.num_channels = stream.readUint8();\n        this.bits_per_channels = [];\n        for(i = 0; i < this.num_channels; i++){\n            this.bits_per_channels[i] = stream.readUint8();\n        }\n    });\n    // file:src/parsing/pmax.js\n    BoxParser.createBoxCtor(\"pmax\", function(stream) {\n        this.bytes = stream.readUint32();\n    });\n    // file:src/parsing/prft.js\n    BoxParser.createFullBoxCtor(\"prft\", function(stream) {\n        this.ref_track_id = stream.readUint32();\n        this.ntp_timestamp = stream.readUint64();\n        if (this.version === 0) {\n            this.media_time = stream.readUint32();\n        } else {\n            this.media_time = stream.readUint64();\n        }\n    });\n    // file:src/parsing/pssh.js\n    BoxParser.createFullBoxCtor(\"pssh\", function(stream) {\n        this.system_id = BoxParser.parseHex16(stream);\n        if (this.version > 0) {\n            var count = stream.readUint32();\n            this.kid = [];\n            for(var i = 0; i < count; i++){\n                this.kid[i] = BoxParser.parseHex16(stream);\n            }\n        }\n        var datasize = stream.readUint32();\n        if (datasize > 0) {\n            this.data = stream.readUint8Array(datasize);\n        }\n    });\n    // file:src/parsing/qt/clef.js\n    BoxParser.createFullBoxCtor(\"clef\", function(stream) {\n        this.width = stream.readUint32();\n        this.height = stream.readUint32();\n    }); // file:src/parsing/qt/enof.js\n    BoxParser.createFullBoxCtor(\"enof\", function(stream) {\n        this.width = stream.readUint32();\n        this.height = stream.readUint32();\n    }); // file:src/parsing/qt/prof.js\n    BoxParser.createFullBoxCtor(\"prof\", function(stream) {\n        this.width = stream.readUint32();\n        this.height = stream.readUint32();\n    }); // file:src/parsing/qt/tapt.js\n    BoxParser.createContainerBoxCtor(\"tapt\", null, [\n        \"clef\",\n        \"prof\",\n        \"enof\"\n    ]); // file:src/parsing/rtp.js\n    BoxParser.createBoxCtor(\"rtp \", function(stream) {\n        this.descriptionformat = stream.readString(4);\n        this.sdptext = stream.readString(this.size - this.hdr_size - 4);\n    });\n    // file:src/parsing/saio.js\n    BoxParser.createFullBoxCtor(\"saio\", function(stream) {\n        if (this.flags & 0x1) {\n            this.aux_info_type = stream.readUint32();\n            this.aux_info_type_parameter = stream.readUint32();\n        }\n        var count = stream.readUint32();\n        this.offset = [];\n        for(var i = 0; i < count; i++){\n            if (this.version === 0) {\n                this.offset[i] = stream.readUint32();\n            } else {\n                this.offset[i] = stream.readUint64();\n            }\n        }\n    });\n    // file:src/parsing/saiz.js\n    BoxParser.createFullBoxCtor(\"saiz\", function(stream) {\n        if (this.flags & 0x1) {\n            this.aux_info_type = stream.readUint32();\n            this.aux_info_type_parameter = stream.readUint32();\n        }\n        this.default_sample_info_size = stream.readUint8();\n        var count = stream.readUint32();\n        this.sample_info_size = [];\n        if (this.default_sample_info_size === 0) {\n            for(var i = 0; i < count; i++){\n                this.sample_info_size[i] = stream.readUint8();\n            }\n        }\n    });\n    // file:src/parsing/sampleentries/mett.js\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_METADATA, \"mett\", function(stream) {\n        this.parseHeader(stream);\n        this.content_encoding = stream.readCString();\n        this.mime_format = stream.readCString();\n        this.parseFooter(stream);\n    });\n    // file:src/parsing/sampleentries/metx.js\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_METADATA, \"metx\", function(stream) {\n        this.parseHeader(stream);\n        this.content_encoding = stream.readCString();\n        this.namespace = stream.readCString();\n        this.schema_location = stream.readCString();\n        this.parseFooter(stream);\n    });\n    // file:src/parsing/sampleentries/sbtt.js\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_SUBTITLE, \"sbtt\", function(stream) {\n        this.parseHeader(stream);\n        this.content_encoding = stream.readCString();\n        this.mime_format = stream.readCString();\n        this.parseFooter(stream);\n    });\n    // file:src/parsing/sampleentries/stpp.js\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_SUBTITLE, \"stpp\", function(stream) {\n        this.parseHeader(stream);\n        this.namespace = stream.readCString();\n        this.schema_location = stream.readCString();\n        this.auxiliary_mime_types = stream.readCString();\n        this.parseFooter(stream);\n    });\n    // file:src/parsing/sampleentries/stxt.js\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_SUBTITLE, \"stxt\", function(stream) {\n        this.parseHeader(stream);\n        this.content_encoding = stream.readCString();\n        this.mime_format = stream.readCString();\n        this.parseFooter(stream);\n    });\n    // file:src/parsing/sampleentries/tx3g.js\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_SUBTITLE, \"tx3g\", function(stream) {\n        this.parseHeader(stream);\n        this.displayFlags = stream.readUint32();\n        this.horizontal_justification = stream.readInt8();\n        this.vertical_justification = stream.readInt8();\n        this.bg_color_rgba = stream.readUint8Array(4);\n        this.box_record = stream.readInt16Array(4);\n        this.style_record = stream.readUint8Array(12);\n        this.parseFooter(stream);\n    });\n    // file:src/parsing/sampleentries/wvtt.js\n    BoxParser.createSampleEntryCtor(BoxParser.SAMPLE_ENTRY_TYPE_METADATA, \"wvtt\", function(stream) {\n        this.parseHeader(stream);\n        this.parseFooter(stream);\n    });\n    // file:src/parsing/samplegroups/alst.js\n    BoxParser.createSampleGroupCtor(\"alst\", function(stream) {\n        var i;\n        var roll_count = stream.readUint16();\n        this.first_output_sample = stream.readUint16();\n        this.sample_offset = [];\n        for(i = 0; i < roll_count; i++){\n            this.sample_offset[i] = stream.readUint32();\n        }\n        var remaining = this.description_length - 4 - 4 * roll_count;\n        this.num_output_samples = [];\n        this.num_total_samples = [];\n        for(i = 0; i < remaining / 4; i++){\n            this.num_output_samples[i] = stream.readUint16();\n            this.num_total_samples[i] = stream.readUint16();\n        }\n    });\n    // file:src/parsing/samplegroups/avll.js\n    BoxParser.createSampleGroupCtor(\"avll\", function(stream) {\n        this.layerNumber = stream.readUint8();\n        this.accurateStatisticsFlag = stream.readUint8();\n        this.avgBitRate = stream.readUint16();\n        this.avgFrameRate = stream.readUint16();\n    });\n    // file:src/parsing/samplegroups/avss.js\n    BoxParser.createSampleGroupCtor(\"avss\", function(stream) {\n        this.subSequenceIdentifier = stream.readUint16();\n        this.layerNumber = stream.readUint8();\n        var tmp_byte = stream.readUint8();\n        this.durationFlag = tmp_byte >> 7;\n        this.avgRateFlag = tmp_byte >> 6 & 0x1;\n        if (this.durationFlag) {\n            this.duration = stream.readUint32();\n        }\n        if (this.avgRateFlag) {\n            this.accurateStatisticsFlag = stream.readUint8();\n            this.avgBitRate = stream.readUint16();\n            this.avgFrameRate = stream.readUint16();\n        }\n        this.dependency = [];\n        var numReferences = stream.readUint8();\n        for(var i = 0; i < numReferences; i++){\n            var dependencyInfo = {};\n            this.dependency.push(dependencyInfo);\n            dependencyInfo.subSeqDirectionFlag = stream.readUint8();\n            dependencyInfo.layerNumber = stream.readUint8();\n            dependencyInfo.subSequenceIdentifier = stream.readUint16();\n        }\n    });\n    // file:src/parsing/samplegroups/dtrt.js\n    BoxParser.createSampleGroupCtor(\"dtrt\", function(stream) {\n        Log.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    });\n    // file:src/parsing/samplegroups/mvif.js\n    BoxParser.createSampleGroupCtor(\"mvif\", function(stream) {\n        Log.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    });\n    // file:src/parsing/samplegroups/prol.js\n    BoxParser.createSampleGroupCtor(\"prol\", function(stream) {\n        this.roll_distance = stream.readInt16();\n    });\n    // file:src/parsing/samplegroups/rap.js\n    BoxParser.createSampleGroupCtor(\"rap \", function(stream) {\n        var tmp_byte = stream.readUint8();\n        this.num_leading_samples_known = tmp_byte >> 7;\n        this.num_leading_samples = tmp_byte & 0x7F;\n    });\n    // file:src/parsing/samplegroups/rash.js\n    BoxParser.createSampleGroupCtor(\"rash\", function(stream) {\n        this.operation_point_count = stream.readUint16();\n        if (this.description_length !== 2 + (this.operation_point_count === 1 ? 2 : this.operation_point_count * 6) + 9) {\n            Log.warn(\"BoxParser\", \"Mismatch in \" + this.grouping_type + \" sample group length\");\n            this.data = stream.readUint8Array(this.description_length - 2);\n        } else {\n            if (this.operation_point_count === 1) {\n                this.target_rate_share = stream.readUint16();\n            } else {\n                this.target_rate_share = [];\n                this.available_bitrate = [];\n                for(var i = 0; i < this.operation_point_count; i++){\n                    this.available_bitrate[i] = stream.readUint32();\n                    this.target_rate_share[i] = stream.readUint16();\n                }\n            }\n            this.maximum_bitrate = stream.readUint32();\n            this.minimum_bitrate = stream.readUint32();\n            this.discard_priority = stream.readUint8();\n        }\n    });\n    // file:src/parsing/samplegroups/roll.js\n    BoxParser.createSampleGroupCtor(\"roll\", function(stream) {\n        this.roll_distance = stream.readInt16();\n    });\n    // file:src/parsing/samplegroups/samplegroup.js\n    BoxParser.SampleGroupEntry.prototype.parse = function(stream) {\n        Log.warn(\"BoxParser\", \"Unknown Sample Group type: \" + this.grouping_type);\n        this.data = stream.readUint8Array(this.description_length);\n    };\n    // file:src/parsing/samplegroups/scif.js\n    BoxParser.createSampleGroupCtor(\"scif\", function(stream) {\n        Log.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    });\n    // file:src/parsing/samplegroups/scnm.js\n    BoxParser.createSampleGroupCtor(\"scnm\", function(stream) {\n        Log.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    });\n    // file:src/parsing/samplegroups/seig.js\n    BoxParser.createSampleGroupCtor(\"seig\", function(stream) {\n        this.reserved = stream.readUint8();\n        var tmp = stream.readUint8();\n        this.crypt_byte_block = tmp >> 4;\n        this.skip_byte_block = tmp & 0xF;\n        this.isProtected = stream.readUint8();\n        this.Per_Sample_IV_Size = stream.readUint8();\n        this.KID = BoxParser.parseHex16(stream);\n        this.constant_IV_size = 0;\n        this.constant_IV = 0;\n        if (this.isProtected === 1 && this.Per_Sample_IV_Size === 0) {\n            this.constant_IV_size = stream.readUint8();\n            this.constant_IV = stream.readUint8Array(this.constant_IV_size);\n        }\n    });\n    // file:src/parsing/samplegroups/stsa.js\n    BoxParser.createSampleGroupCtor(\"stsa\", function(stream) {\n        Log.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    });\n    // file:src/parsing/samplegroups/sync.js\n    BoxParser.createSampleGroupCtor(\"sync\", function(stream) {\n        var tmp_byte = stream.readUint8();\n        this.NAL_unit_type = tmp_byte & 0x3F;\n    });\n    // file:src/parsing/samplegroups/tele.js\n    BoxParser.createSampleGroupCtor(\"tele\", function(stream) {\n        var tmp_byte = stream.readUint8();\n        this.level_independently_decodable = tmp_byte >> 7;\n    });\n    // file:src/parsing/samplegroups/tsas.js\n    BoxParser.createSampleGroupCtor(\"tsas\", function(stream) {\n        Log.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    });\n    // file:src/parsing/samplegroups/tscl.js\n    BoxParser.createSampleGroupCtor(\"tscl\", function(stream) {\n        Log.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    });\n    // file:src/parsing/samplegroups/vipr.js\n    BoxParser.createSampleGroupCtor(\"vipr\", function(stream) {\n        Log.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n    });\n    // file:src/parsing/sbgp.js\n    BoxParser.createFullBoxCtor(\"sbgp\", function(stream) {\n        this.grouping_type = stream.readString(4);\n        if (this.version === 1) {\n            this.grouping_type_parameter = stream.readUint32();\n        } else {\n            this.grouping_type_parameter = 0;\n        }\n        this.entries = [];\n        var entry_count1 = stream.readUint32();\n        for(var i = 0; i < entry_count1; i++){\n            var entry = {};\n            this.entries.push(entry);\n            entry.sample_count = stream.readInt32();\n            entry.group_description_index = stream.readInt32();\n        }\n    });\n    // file:src/parsing/schm.js\n    BoxParser.createFullBoxCtor(\"schm\", function(stream) {\n        this.scheme_type = stream.readString(4);\n        this.scheme_version = stream.readUint32();\n        if (this.flags & 0x000001) {\n            this.scheme_uri = stream.readString(this.size - this.hdr_size - 8);\n        }\n    });\n    // file:src/parsing/sdp.js\n    BoxParser.createBoxCtor(\"sdp \", function(stream) {\n        this.sdptext = stream.readString(this.size - this.hdr_size);\n    });\n    // file:src/parsing/sdtp.js\n    BoxParser.createFullBoxCtor(\"sdtp\", function(stream) {\n        var tmp_byte;\n        var count = this.size - this.hdr_size;\n        this.is_leading = [];\n        this.sample_depends_on = [];\n        this.sample_is_depended_on = [];\n        this.sample_has_redundancy = [];\n        for(var i = 0; i < count; i++){\n            tmp_byte = stream.readUint8();\n            this.is_leading[i] = tmp_byte >> 6;\n            this.sample_depends_on[i] = tmp_byte >> 4 & 0x3;\n            this.sample_is_depended_on[i] = tmp_byte >> 2 & 0x3;\n            this.sample_has_redundancy[i] = tmp_byte & 0x3;\n        }\n    });\n    // file:src/parsing/senc.js\n    // Cannot be fully parsed because Per_Sample_IV_Size needs to be known\n    BoxParser.createFullBoxCtor(\"senc\" /*, function(stream) {\r\n\tthis.parseFullHeader(stream);\r\n\tvar sample_count = stream.readUint32();\r\n\tthis.samples = [];\r\n\tfor (var i = 0; i < sample_count; i++) {\r\n\t\tvar sample = {};\r\n\t\t// tenc.default_Per_Sample_IV_Size or seig.Per_Sample_IV_Size\r\n\t\tsample.InitializationVector = this.readUint8Array(Per_Sample_IV_Size*8);\r\n\t\tif (this.flags & 0x2) {\r\n\t\t\tsample.subsamples = [];\r\n\t\t\tsubsample_count = stream.readUint16();\r\n\t\t\tfor (var j = 0; j < subsample_count; j++) {\r\n\t\t\t\tvar subsample = {};\r\n\t\t\t\tsubsample.BytesOfClearData = stream.readUint16();\r\n\t\t\t\tsubsample.BytesOfProtectedData = stream.readUint32();\r\n\t\t\t\tsample.subsamples.push(subsample);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// TODO\r\n\t\tthis.samples.push(sample);\r\n\t}\r\n}*/ );\n    // file:src/parsing/sgpd.js\n    BoxParser.createFullBoxCtor(\"sgpd\", function(stream) {\n        this.grouping_type = stream.readString(4);\n        Log.debug(\"BoxParser\", \"Found Sample Groups of type \" + this.grouping_type);\n        if (this.version === 1) {\n            this.default_length = stream.readUint32();\n        } else {\n            this.default_length = 0;\n        }\n        if (this.version >= 2) {\n            this.default_group_description_index = stream.readUint32();\n        }\n        this.entries = [];\n        var entry_count1 = stream.readUint32();\n        for(var i = 0; i < entry_count1; i++){\n            var entry;\n            if (BoxParser[this.grouping_type + \"SampleGroupEntry\"]) {\n                entry = new BoxParser[this.grouping_type + \"SampleGroupEntry\"](this.grouping_type);\n            } else {\n                entry = new BoxParser.SampleGroupEntry(this.grouping_type);\n            }\n            this.entries.push(entry);\n            if (this.version === 1) {\n                if (this.default_length === 0) {\n                    entry.description_length = stream.readUint32();\n                } else {\n                    entry.description_length = this.default_length;\n                }\n            } else {\n                entry.description_length = this.default_length;\n            }\n            if (entry.write === BoxParser.SampleGroupEntry.prototype.write) {\n                Log.info(\"BoxParser\", \"SampleGroup for type \" + this.grouping_type + \" writing not yet implemented, keeping unparsed data in memory for later write\");\n                // storing data\n                entry.data = stream.readUint8Array(entry.description_length);\n                // rewinding\n                stream.position -= entry.description_length;\n            }\n            entry.parse(stream);\n        }\n    });\n    // file:src/parsing/sidx.js\n    BoxParser.createFullBoxCtor(\"sidx\", function(stream) {\n        this.reference_ID = stream.readUint32();\n        this.timescale = stream.readUint32();\n        if (this.version === 0) {\n            this.earliest_presentation_time = stream.readUint32();\n            this.first_offset = stream.readUint32();\n        } else {\n            this.earliest_presentation_time = stream.readUint64();\n            this.first_offset = stream.readUint64();\n        }\n        stream.readUint16();\n        this.references = [];\n        var count = stream.readUint16();\n        for(var i = 0; i < count; i++){\n            var ref1 = {};\n            this.references.push(ref1);\n            var tmp_32 = stream.readUint32();\n            ref1.reference_type = tmp_32 >> 31 & 0x1;\n            ref1.referenced_size = tmp_32 & 0x7FFFFFFF;\n            ref1.subsegment_duration = stream.readUint32();\n            tmp_32 = stream.readUint32();\n            ref1.starts_with_SAP = tmp_32 >> 31 & 0x1;\n            ref1.SAP_type = tmp_32 >> 28 & 0x7;\n            ref1.SAP_delta_time = tmp_32 & 0xFFFFFFF;\n        }\n    });\n    // file:src/parsing/singleitemtypereference.js\n    BoxParser.SingleItemTypeReferenceBox = function(type, size, hdr_size, start) {\n        BoxParser.Box.call(this, type, size);\n        this.hdr_size = hdr_size;\n        this.start = start;\n    };\n    BoxParser.SingleItemTypeReferenceBox.prototype = new BoxParser.Box();\n    BoxParser.SingleItemTypeReferenceBox.prototype.parse = function(stream) {\n        this.from_item_ID = stream.readUint16();\n        var count = stream.readUint16();\n        this.references = [];\n        for(var i = 0; i < count; i++){\n            this.references[i] = stream.readUint16();\n        }\n    };\n    // file:src/parsing/singleitemtypereferencelarge.js\n    BoxParser.SingleItemTypeReferenceBoxLarge = function(type, size, hdr_size, start) {\n        BoxParser.Box.call(this, type, size);\n        this.hdr_size = hdr_size;\n        this.start = start;\n    };\n    BoxParser.SingleItemTypeReferenceBoxLarge.prototype = new BoxParser.Box();\n    BoxParser.SingleItemTypeReferenceBoxLarge.prototype.parse = function(stream) {\n        this.from_item_ID = stream.readUint32();\n        var count = stream.readUint16();\n        this.references = [];\n        for(var i = 0; i < count; i++){\n            this.references[i] = stream.readUint32();\n        }\n    };\n    // file:src/parsing/SmDm.js\n    BoxParser.createFullBoxCtor(\"SmDm\", function(stream) {\n        this.primaryRChromaticity_x = stream.readUint16();\n        this.primaryRChromaticity_y = stream.readUint16();\n        this.primaryGChromaticity_x = stream.readUint16();\n        this.primaryGChromaticity_y = stream.readUint16();\n        this.primaryBChromaticity_x = stream.readUint16();\n        this.primaryBChromaticity_y = stream.readUint16();\n        this.whitePointChromaticity_x = stream.readUint16();\n        this.whitePointChromaticity_y = stream.readUint16();\n        this.luminanceMax = stream.readUint32();\n        this.luminanceMin = stream.readUint32();\n    });\n    // file:src/parsing/smhd.js\n    BoxParser.createFullBoxCtor(\"smhd\", function(stream) {\n        this.balance = stream.readUint16();\n        stream.readUint16();\n    });\n    // file:src/parsing/ssix.js\n    BoxParser.createFullBoxCtor(\"ssix\", function(stream) {\n        this.subsegments = [];\n        var subsegment_count = stream.readUint32();\n        for(var i = 0; i < subsegment_count; i++){\n            var subsegment = {};\n            this.subsegments.push(subsegment);\n            subsegment.ranges = [];\n            var range_count = stream.readUint32();\n            for(var j = 0; j < range_count; j++){\n                var range = {};\n                subsegment.ranges.push(range);\n                range.level = stream.readUint8();\n                range.range_size = stream.readUint24();\n            }\n        }\n    });\n    // file:src/parsing/stco.js\n    BoxParser.createFullBoxCtor(\"stco\", function(stream) {\n        var entry_count1;\n        entry_count1 = stream.readUint32();\n        this.chunk_offsets = [];\n        if (this.version === 0) {\n            for(var i = 0; i < entry_count1; i++){\n                this.chunk_offsets.push(stream.readUint32());\n            }\n        }\n    });\n    // file:src/parsing/stdp.js\n    BoxParser.createFullBoxCtor(\"stdp\", function(stream) {\n        var count = (this.size - this.hdr_size) / 2;\n        this.priority = [];\n        for(var i = 0; i < count; i++){\n            this.priority[i] = stream.readUint16();\n        }\n    });\n    // file:src/parsing/sthd.js\n    BoxParser.createFullBoxCtor(\"sthd\");\n    // file:src/parsing/stri.js\n    BoxParser.createFullBoxCtor(\"stri\", function(stream) {\n        this.switch_group = stream.readUint16();\n        this.alternate_group = stream.readUint16();\n        this.sub_track_id = stream.readUint32();\n        var count = (this.size - this.hdr_size - 8) / 4;\n        this.attribute_list = [];\n        for(var i = 0; i < count; i++){\n            this.attribute_list[i] = stream.readUint32();\n        }\n    });\n    // file:src/parsing/stsc.js\n    BoxParser.createFullBoxCtor(\"stsc\", function(stream) {\n        var entry_count1;\n        var i;\n        entry_count1 = stream.readUint32();\n        this.first_chunk = [];\n        this.samples_per_chunk = [];\n        this.sample_description_index = [];\n        if (this.version === 0) {\n            for(i = 0; i < entry_count1; i++){\n                this.first_chunk.push(stream.readUint32());\n                this.samples_per_chunk.push(stream.readUint32());\n                this.sample_description_index.push(stream.readUint32());\n            }\n        }\n    });\n    // file:src/parsing/stsd.js\n    BoxParser.createFullBoxCtor(\"stsd\", function(stream) {\n        var i;\n        var ret1;\n        var entryCount;\n        var box1;\n        this.entries = [];\n        entryCount = stream.readUint32();\n        for(i = 1; i <= entryCount; i++){\n            ret1 = BoxParser.parseOneBox(stream, true, this.size - (stream.getPosition() - this.start));\n            if (ret1.code === BoxParser.OK) {\n                if (BoxParser[ret1.type + \"SampleEntry\"]) {\n                    box1 = new BoxParser[ret1.type + \"SampleEntry\"](ret1.size);\n                    box1.hdr_size = ret1.hdr_size;\n                    box1.start = ret1.start;\n                } else {\n                    Log.warn(\"BoxParser\", \"Unknown sample entry type: \" + ret1.type);\n                    box1 = new BoxParser.SampleEntry(ret1.type, ret1.size, ret1.hdr_size, ret1.start);\n                }\n                if (box1.write === BoxParser.SampleEntry.prototype.write) {\n                    Log.info(\"BoxParser\", \"SampleEntry \" + box1.type + \" box writing not yet implemented, keeping unparsed data in memory for later write\");\n                    box1.parseDataAndRewind(stream);\n                }\n                box1.parse(stream);\n                this.entries.push(box1);\n            } else {\n                return;\n            }\n        }\n    });\n    // file:src/parsing/stsg.js\n    BoxParser.createFullBoxCtor(\"stsg\", function(stream) {\n        this.grouping_type = stream.readUint32();\n        var count = stream.readUint16();\n        this.group_description_index = [];\n        for(var i = 0; i < count; i++){\n            this.group_description_index[i] = stream.readUint32();\n        }\n    });\n    // file:src/parsing/stsh.js\n    BoxParser.createFullBoxCtor(\"stsh\", function(stream) {\n        var entry_count1;\n        var i;\n        entry_count1 = stream.readUint32();\n        this.shadowed_sample_numbers = [];\n        this.sync_sample_numbers = [];\n        if (this.version === 0) {\n            for(i = 0; i < entry_count1; i++){\n                this.shadowed_sample_numbers.push(stream.readUint32());\n                this.sync_sample_numbers.push(stream.readUint32());\n            }\n        }\n    });\n    // file:src/parsing/stss.js\n    BoxParser.createFullBoxCtor(\"stss\", function(stream) {\n        var i;\n        var entry_count1;\n        entry_count1 = stream.readUint32();\n        if (this.version === 0) {\n            this.sample_numbers = [];\n            for(i = 0; i < entry_count1; i++){\n                this.sample_numbers.push(stream.readUint32());\n            }\n        }\n    });\n    // file:src/parsing/stsz.js\n    BoxParser.createFullBoxCtor(\"stsz\", function(stream) {\n        var i;\n        this.sample_sizes = [];\n        if (this.version === 0) {\n            this.sample_size = stream.readUint32();\n            this.sample_count = stream.readUint32();\n            for(i = 0; i < this.sample_count; i++){\n                if (this.sample_size === 0) {\n                    this.sample_sizes.push(stream.readUint32());\n                } else {\n                    this.sample_sizes[i] = this.sample_size;\n                }\n            }\n        }\n    });\n    // file:src/parsing/stts.js\n    BoxParser.createFullBoxCtor(\"stts\", function(stream) {\n        var entry_count1;\n        var i;\n        var delta;\n        entry_count1 = stream.readUint32();\n        this.sample_counts = [];\n        this.sample_deltas = [];\n        if (this.version === 0) {\n            for(i = 0; i < entry_count1; i++){\n                this.sample_counts.push(stream.readUint32());\n                delta = stream.readInt32();\n                if (delta < 0) {\n                    Log.warn(\"BoxParser\", \"File uses negative stts sample delta, using value 1 instead, sync may be lost!\");\n                    delta = 1;\n                }\n                this.sample_deltas.push(delta);\n            }\n        }\n    });\n    // file:src/parsing/stvi.js\n    BoxParser.createFullBoxCtor(\"stvi\", function(stream) {\n        var tmp32 = stream.readUint32();\n        this.single_view_allowed = tmp32 & 0x3;\n        this.stereo_scheme = stream.readUint32();\n        var length = stream.readUint32();\n        this.stereo_indication_type = stream.readString(length);\n        var ret1;\n        var box1;\n        this.boxes = [];\n        while(stream.getPosition() < this.start + this.size){\n            ret1 = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));\n            if (ret1.code === BoxParser.OK) {\n                box1 = ret1.box;\n                this.boxes.push(box1);\n                this[box1.type] = box1;\n            } else {\n                return;\n            }\n        }\n    });\n    // file:src/parsing/styp.js\n    BoxParser.createBoxCtor(\"styp\", function(stream) {\n        BoxParser.ftypBox.prototype.parse.call(this, stream);\n    });\n    // file:src/parsing/stz2.js\n    BoxParser.createFullBoxCtor(\"stz2\", function(stream) {\n        var i;\n        var sample_count;\n        this.sample_sizes = [];\n        if (this.version === 0) {\n            this.reserved = stream.readUint24();\n            this.field_size = stream.readUint8();\n            sample_count = stream.readUint32();\n            if (this.field_size === 4) {\n                for(i = 0; i < sample_count; i += 2){\n                    var tmp = stream.readUint8();\n                    this.sample_sizes[i] = tmp >> 4 & 0xF;\n                    this.sample_sizes[i + 1] = tmp & 0xF;\n                }\n            } else if (this.field_size === 8) {\n                for(i = 0; i < sample_count; i++){\n                    this.sample_sizes[i] = stream.readUint8();\n                }\n            } else if (this.field_size === 16) {\n                for(i = 0; i < sample_count; i++){\n                    this.sample_sizes[i] = stream.readUint16();\n                }\n            } else {\n                Log.error(\"BoxParser\", \"Error in length field in stz2 box\");\n            }\n        }\n    });\n    // file:src/parsing/subs.js\n    BoxParser.createFullBoxCtor(\"subs\", function(stream) {\n        var i, j;\n        var entry_count1;\n        var subsample_count;\n        entry_count1 = stream.readUint32();\n        this.entries = [];\n        for(i = 0; i < entry_count1; i++){\n            var sampleInfo = {};\n            this.entries[i] = sampleInfo;\n            sampleInfo.sample_delta = stream.readUint32();\n            sampleInfo.subsamples = [];\n            subsample_count = stream.readUint16();\n            if (subsample_count > 0) {\n                for(j = 0; j < subsample_count; j++){\n                    var subsample = {};\n                    sampleInfo.subsamples.push(subsample);\n                    if (this.version == 1) {\n                        subsample.size = stream.readUint32();\n                    } else {\n                        subsample.size = stream.readUint16();\n                    }\n                    subsample.priority = stream.readUint8();\n                    subsample.discardable = stream.readUint8();\n                    subsample.codec_specific_parameters = stream.readUint32();\n                }\n            }\n        }\n    });\n    // file:src/parsing/tenc.js\n    BoxParser.createFullBoxCtor(\"tenc\", function(stream) {\n        stream.readUint8(); // reserved\n        if (this.version === 0) {\n            stream.readUint8();\n        } else {\n            var tmp = stream.readUint8();\n            this.default_crypt_byte_block = tmp >> 4 & 0xF;\n            this.default_skip_byte_block = tmp & 0xF;\n        }\n        this.default_isProtected = stream.readUint8();\n        this.default_Per_Sample_IV_Size = stream.readUint8();\n        this.default_KID = BoxParser.parseHex16(stream);\n        if (this.default_isProtected === 1 && this.default_Per_Sample_IV_Size === 0) {\n            this.default_constant_IV_size = stream.readUint8();\n            this.default_constant_IV = stream.readUint8Array(this.default_constant_IV_size);\n        }\n    }); // file:src/parsing/tfdt.js\n    BoxParser.createFullBoxCtor(\"tfdt\", function(stream) {\n        if (this.version == 1) {\n            this.baseMediaDecodeTime = stream.readUint64();\n        } else {\n            this.baseMediaDecodeTime = stream.readUint32();\n        }\n    });\n    // file:src/parsing/tfhd.js\n    BoxParser.createFullBoxCtor(\"tfhd\", function(stream) {\n        var readBytes = 0;\n        this.track_id = stream.readUint32();\n        if (this.size - this.hdr_size > readBytes && this.flags & BoxParser.TFHD_FLAG_BASE_DATA_OFFSET) {\n            this.base_data_offset = stream.readUint64();\n            readBytes += 8;\n        } else {\n            this.base_data_offset = 0;\n        }\n        if (this.size - this.hdr_size > readBytes && this.flags & BoxParser.TFHD_FLAG_SAMPLE_DESC) {\n            this.default_sample_description_index = stream.readUint32();\n            readBytes += 4;\n        } else {\n            this.default_sample_description_index = 0;\n        }\n        if (this.size - this.hdr_size > readBytes && this.flags & BoxParser.TFHD_FLAG_SAMPLE_DUR) {\n            this.default_sample_duration = stream.readUint32();\n            readBytes += 4;\n        } else {\n            this.default_sample_duration = 0;\n        }\n        if (this.size - this.hdr_size > readBytes && this.flags & BoxParser.TFHD_FLAG_SAMPLE_SIZE) {\n            this.default_sample_size = stream.readUint32();\n            readBytes += 4;\n        } else {\n            this.default_sample_size = 0;\n        }\n        if (this.size - this.hdr_size > readBytes && this.flags & BoxParser.TFHD_FLAG_SAMPLE_FLAGS) {\n            this.default_sample_flags = stream.readUint32();\n            readBytes += 4;\n        } else {\n            this.default_sample_flags = 0;\n        }\n    });\n    // file:src/parsing/tfra.js\n    BoxParser.createFullBoxCtor(\"tfra\", function(stream) {\n        this.track_ID = stream.readUint32();\n        stream.readUint24();\n        var tmp_byte = stream.readUint8();\n        this.length_size_of_traf_num = tmp_byte >> 4 & 0x3;\n        this.length_size_of_trun_num = tmp_byte >> 2 & 0x3;\n        this.length_size_of_sample_num = tmp_byte & 0x3;\n        this.entries = [];\n        var number_of_entries = stream.readUint32();\n        for(var i = 0; i < number_of_entries; i++){\n            if (this.version === 1) {\n                this.time = stream.readUint64();\n                this.moof_offset = stream.readUint64();\n            } else {\n                this.time = stream.readUint32();\n                this.moof_offset = stream.readUint32();\n            }\n            this.traf_number = stream[\"readUint\" + 8 * (this.length_size_of_traf_num + 1)]();\n            this.trun_number = stream[\"readUint\" + 8 * (this.length_size_of_trun_num + 1)]();\n            this.sample_number = stream[\"readUint\" + 8 * (this.length_size_of_sample_num + 1)]();\n        }\n    });\n    // file:src/parsing/tkhd.js\n    BoxParser.createFullBoxCtor(\"tkhd\", function(stream) {\n        if (this.version == 1) {\n            this.creation_time = stream.readUint64();\n            this.modification_time = stream.readUint64();\n            this.track_id = stream.readUint32();\n            stream.readUint32();\n            this.duration = stream.readUint64();\n        } else {\n            this.creation_time = stream.readUint32();\n            this.modification_time = stream.readUint32();\n            this.track_id = stream.readUint32();\n            stream.readUint32();\n            this.duration = stream.readUint32();\n        }\n        stream.readUint32Array(2);\n        this.layer = stream.readInt16();\n        this.alternate_group = stream.readInt16();\n        this.volume = stream.readInt16() >> 8;\n        stream.readUint16();\n        this.matrix = stream.readInt32Array(9);\n        this.width = stream.readUint32();\n        this.height = stream.readUint32();\n    });\n    // file:src/parsing/tmax.js\n    BoxParser.createBoxCtor(\"tmax\", function(stream) {\n        this.time = stream.readUint32();\n    });\n    // file:src/parsing/tmin.js\n    BoxParser.createBoxCtor(\"tmin\", function(stream) {\n        this.time = stream.readUint32();\n    });\n    // file:src/parsing/totl.js\n    BoxParser.createBoxCtor(\"totl\", function(stream) {\n        this.bytessent = stream.readUint32();\n    });\n    // file:src/parsing/tpay.js\n    BoxParser.createBoxCtor(\"tpay\", function(stream) {\n        this.bytessent = stream.readUint32();\n    });\n    // file:src/parsing/tpyl.js\n    BoxParser.createBoxCtor(\"tpyl\", function(stream) {\n        this.bytessent = stream.readUint64();\n    });\n    // file:src/parsing/TrackGroup.js\n    BoxParser.TrackGroupTypeBox.prototype.parse = function(stream) {\n        this.parseFullHeader(stream);\n        this.track_group_id = stream.readUint32();\n    };\n    // file:src/parsing/trackgroups/msrc.js\n    BoxParser.createTrackGroupCtor(\"msrc\"); // file:src/parsing/TrakReference.js\n    BoxParser.TrackReferenceTypeBox = function(type, size, hdr_size, start) {\n        BoxParser.Box.call(this, type, size);\n        this.hdr_size = hdr_size;\n        this.start = start;\n    };\n    BoxParser.TrackReferenceTypeBox.prototype = new BoxParser.Box();\n    BoxParser.TrackReferenceTypeBox.prototype.parse = function(stream) {\n        this.track_ids = stream.readUint32Array((this.size - this.hdr_size) / 4);\n    };\n    // file:src/parsing/tref.js\n    BoxParser.trefBox.prototype.parse = function(stream) {\n        var ret1;\n        var box1;\n        while(stream.getPosition() < this.start + this.size){\n            ret1 = BoxParser.parseOneBox(stream, true, this.size - (stream.getPosition() - this.start));\n            if (ret1.code === BoxParser.OK) {\n                box1 = new BoxParser.TrackReferenceTypeBox(ret1.type, ret1.size, ret1.hdr_size, ret1.start);\n                if (box1.write === BoxParser.Box.prototype.write && box1.type !== \"mdat\") {\n                    Log.info(\"BoxParser\", \"TrackReference \" + box1.type + \" box writing not yet implemented, keeping unparsed data in memory for later write\");\n                    box1.parseDataAndRewind(stream);\n                }\n                box1.parse(stream);\n                this.boxes.push(box1);\n            } else {\n                return;\n            }\n        }\n    };\n    // file:src/parsing/trep.js\n    BoxParser.createFullBoxCtor(\"trep\", function(stream) {\n        this.track_ID = stream.readUint32();\n        this.boxes = [];\n        while(stream.getPosition() < this.start + this.size){\n            ret = BoxParser.parseOneBox(stream, false, this.size - (stream.getPosition() - this.start));\n            if (ret.code === BoxParser.OK) {\n                box = ret.box;\n                this.boxes.push(box);\n            } else {\n                return;\n            }\n        }\n    });\n    // file:src/parsing/trex.js\n    BoxParser.createFullBoxCtor(\"trex\", function(stream) {\n        this.track_id = stream.readUint32();\n        this.default_sample_description_index = stream.readUint32();\n        this.default_sample_duration = stream.readUint32();\n        this.default_sample_size = stream.readUint32();\n        this.default_sample_flags = stream.readUint32();\n    });\n    // file:src/parsing/trpy.js\n    BoxParser.createBoxCtor(\"trpy\", function(stream) {\n        this.bytessent = stream.readUint64();\n    });\n    // file:src/parsing/trun.js\n    BoxParser.createFullBoxCtor(\"trun\", function(stream) {\n        var readBytes = 0;\n        this.sample_count = stream.readUint32();\n        readBytes += 4;\n        if (this.size - this.hdr_size > readBytes && this.flags & BoxParser.TRUN_FLAGS_DATA_OFFSET) {\n            this.data_offset = stream.readInt32(); //signed\n            readBytes += 4;\n        } else {\n            this.data_offset = 0;\n        }\n        if (this.size - this.hdr_size > readBytes && this.flags & BoxParser.TRUN_FLAGS_FIRST_FLAG) {\n            this.first_sample_flags = stream.readUint32();\n            readBytes += 4;\n        } else {\n            this.first_sample_flags = 0;\n        }\n        this.sample_duration = [];\n        this.sample_size = [];\n        this.sample_flags = [];\n        this.sample_composition_time_offset = [];\n        if (this.size - this.hdr_size > readBytes) {\n            for(var i = 0; i < this.sample_count; i++){\n                if (this.flags & BoxParser.TRUN_FLAGS_DURATION) {\n                    this.sample_duration[i] = stream.readUint32();\n                }\n                if (this.flags & BoxParser.TRUN_FLAGS_SIZE) {\n                    this.sample_size[i] = stream.readUint32();\n                }\n                if (this.flags & BoxParser.TRUN_FLAGS_FLAGS) {\n                    this.sample_flags[i] = stream.readUint32();\n                }\n                if (this.flags & BoxParser.TRUN_FLAGS_CTS_OFFSET) {\n                    if (this.version === 0) {\n                        this.sample_composition_time_offset[i] = stream.readUint32();\n                    } else {\n                        this.sample_composition_time_offset[i] = stream.readInt32(); //signed\n                    }\n                }\n            }\n        }\n    });\n    // file:src/parsing/tsel.js\n    BoxParser.createFullBoxCtor(\"tsel\", function(stream) {\n        this.switch_group = stream.readUint32();\n        var count = (this.size - this.hdr_size - 4) / 4;\n        this.attribute_list = [];\n        for(var i = 0; i < count; i++){\n            this.attribute_list[i] = stream.readUint32();\n        }\n    });\n    // file:src/parsing/txtC.js\n    BoxParser.createFullBoxCtor(\"txtC\", function(stream) {\n        this.config = stream.readCString();\n    });\n    // file:src/parsing/url.js\n    BoxParser.createFullBoxCtor(\"url \", function(stream) {\n        if (this.flags !== 0x000001) {\n            this.location = stream.readCString();\n        }\n    });\n    // file:src/parsing/urn.js\n    BoxParser.createFullBoxCtor(\"urn \", function(stream) {\n        this.name = stream.readCString();\n        if (this.size - this.hdr_size - this.name.length - 1 > 0) {\n            this.location = stream.readCString();\n        }\n    });\n    // file:src/parsing/uuid/piff/piffLsm.js\n    BoxParser.createUUIDBox(\"a5d40b30e81411ddba2f0800200c9a66\", true, false, function(stream) {\n        this.LiveServerManifest = stream.readString(this.size - this.hdr_size).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n    }); // file:src/parsing/uuid/piff/piffPssh.js\n    BoxParser.createUUIDBox(\"d08a4f1810f34a82b6c832d8aba183d3\", true, false, function(stream) {\n        this.system_id = BoxParser.parseHex16(stream);\n        var datasize = stream.readUint32();\n        if (datasize > 0) {\n            this.data = stream.readUint8Array(datasize);\n        }\n    });\n    // file:src/parsing/uuid/piff/piffSenc.js\n    BoxParser.createUUIDBox(\"a2394f525a9b4f14a2446c427c648df4\", true, false);\n    // file:src/parsing/uuid/piff/piffTenc.js\n    BoxParser.createUUIDBox(\"8974dbce7be74c5184f97148f9882554\", true, false, function(stream) {\n        this.default_AlgorithmID = stream.readUint24();\n        this.default_IV_size = stream.readUint8();\n        this.default_KID = BoxParser.parseHex16(stream);\n    }); // file:src/parsing/uuid/piff/piffTfrf.js\n    BoxParser.createUUIDBox(\"d4807ef2ca3946958e5426cb9e46a79f\", true, false, function(stream) {\n        this.fragment_count = stream.readUint8();\n        this.entries = [];\n        for(var i = 0; i < this.fragment_count; i++){\n            var entry = {};\n            var absolute_time = 0;\n            var absolute_duration = 0;\n            if (this.version === 1) {\n                absolute_time = stream.readUint64();\n                absolute_duration = stream.readUint64();\n            } else {\n                absolute_time = stream.readUint32();\n                absolute_duration = stream.readUint32();\n            }\n            entry.absolute_time = absolute_time;\n            entry.absolute_duration = absolute_duration;\n            this.entries.push(entry);\n        }\n    }); // file:src/parsing/uuid/piff/piffTfxd.js\n    BoxParser.createUUIDBox(\"6d1d9b0542d544e680e2141daff757b2\", true, false, function(stream) {\n        if (this.version === 1) {\n            this.absolute_time = stream.readUint64();\n            this.duration = stream.readUint64();\n        } else {\n            this.absolute_time = stream.readUint32();\n            this.duration = stream.readUint32();\n        }\n    }); // file:src/parsing/vmhd.js\n    BoxParser.createFullBoxCtor(\"vmhd\", function(stream) {\n        this.graphicsmode = stream.readUint16();\n        this.opcolor = stream.readUint16Array(3);\n    });\n    // file:src/parsing/vpcC.js\n    BoxParser.createFullBoxCtor(\"vpcC\", function(stream) {\n        var tmp;\n        if (this.version === 1) {\n            this.profile = stream.readUint8();\n            this.level = stream.readUint8();\n            tmp = stream.readUint8();\n            this.bitDepth = tmp >> 4;\n            this.chromaSubsampling = tmp >> 1 & 0x7;\n            this.videoFullRangeFlag = tmp & 0x1;\n            this.colourPrimaries = stream.readUint8();\n            this.transferCharacteristics = stream.readUint8();\n            this.matrixCoefficients = stream.readUint8();\n            this.codecIntializationDataSize = stream.readUint16();\n            this.codecIntializationData = stream.readUint8Array(this.codecIntializationDataSize);\n        } else {\n            this.profile = stream.readUint8();\n            this.level = stream.readUint8();\n            tmp = stream.readUint8();\n            this.bitDepth = tmp >> 4 & 0xF;\n            this.colorSpace = tmp & 0xF;\n            tmp = stream.readUint8();\n            this.chromaSubsampling = tmp >> 4 & 0xF;\n            this.transferFunction = tmp >> 1 & 0x7;\n            this.videoFullRangeFlag = tmp & 0x1;\n            this.codecIntializationDataSize = stream.readUint16();\n            this.codecIntializationData = stream.readUint8Array(this.codecIntializationDataSize);\n        }\n    }); // file:src/parsing/vttC.js\n    BoxParser.createBoxCtor(\"vttC\", function(stream) {\n        this.text = stream.readString(this.size - this.hdr_size);\n    });\n    // file:src/box-codecs.js\n    BoxParser.SampleEntry.prototype.isVideo = function() {\n        return false;\n    };\n    BoxParser.SampleEntry.prototype.isAudio = function() {\n        return false;\n    };\n    BoxParser.SampleEntry.prototype.isSubtitle = function() {\n        return false;\n    };\n    BoxParser.SampleEntry.prototype.isMetadata = function() {\n        return false;\n    };\n    BoxParser.SampleEntry.prototype.isHint = function() {\n        return false;\n    };\n    BoxParser.SampleEntry.prototype.getCodec = function() {\n        return this.type.replace(\".\", \"\");\n    };\n    BoxParser.SampleEntry.prototype.getWidth = function() {\n        return \"\";\n    };\n    BoxParser.SampleEntry.prototype.getHeight = function() {\n        return \"\";\n    };\n    BoxParser.SampleEntry.prototype.getChannelCount = function() {\n        return \"\";\n    };\n    BoxParser.SampleEntry.prototype.getSampleRate = function() {\n        return \"\";\n    };\n    BoxParser.SampleEntry.prototype.getSampleSize = function() {\n        return \"\";\n    };\n    BoxParser.VisualSampleEntry.prototype.isVideo = function() {\n        return true;\n    };\n    BoxParser.VisualSampleEntry.prototype.getWidth = function() {\n        return this.width;\n    };\n    BoxParser.VisualSampleEntry.prototype.getHeight = function() {\n        return this.height;\n    };\n    BoxParser.AudioSampleEntry.prototype.isAudio = function() {\n        return true;\n    };\n    BoxParser.AudioSampleEntry.prototype.getChannelCount = function() {\n        return this.channel_count;\n    };\n    BoxParser.AudioSampleEntry.prototype.getSampleRate = function() {\n        return this.samplerate;\n    };\n    BoxParser.AudioSampleEntry.prototype.getSampleSize = function() {\n        return this.samplesize;\n    };\n    BoxParser.SubtitleSampleEntry.prototype.isSubtitle = function() {\n        return true;\n    };\n    BoxParser.MetadataSampleEntry.prototype.isMetadata = function() {\n        return true;\n    };\n    BoxParser.decimalToHex = function(d, padding) {\n        var hex = Number(d).toString(16);\n        padding = typeof padding === \"undefined\" || padding === null ? padding = 2 : padding;\n        while(hex.length < padding){\n            hex = \"0\" + hex;\n        }\n        return hex;\n    };\n    BoxParser.avc1SampleEntry.prototype.getCodec = BoxParser.avc2SampleEntry.prototype.getCodec = BoxParser.avc3SampleEntry.prototype.getCodec = BoxParser.avc4SampleEntry.prototype.getCodec = function() {\n        var baseCodec = BoxParser.SampleEntry.prototype.getCodec.call(this);\n        if (this.avcC) {\n            return baseCodec + \".\" + BoxParser.decimalToHex(this.avcC.AVCProfileIndication) + \"\" + BoxParser.decimalToHex(this.avcC.profile_compatibility) + \"\" + BoxParser.decimalToHex(this.avcC.AVCLevelIndication);\n        } else {\n            return baseCodec;\n        }\n    };\n    BoxParser.hev1SampleEntry.prototype.getCodec = BoxParser.hvc1SampleEntry.prototype.getCodec = function() {\n        var i;\n        var baseCodec = BoxParser.SampleEntry.prototype.getCodec.call(this);\n        if (this.hvcC) {\n            baseCodec += \".\";\n            switch(this.hvcC.general_profile_space){\n                case 0:\n                    baseCodec += \"\";\n                    break;\n                case 1:\n                    baseCodec += \"A\";\n                    break;\n                case 2:\n                    baseCodec += \"B\";\n                    break;\n                case 3:\n                    baseCodec += \"C\";\n                    break;\n            }\n            baseCodec += this.hvcC.general_profile_idc;\n            baseCodec += \".\";\n            var val = this.hvcC.general_profile_compatibility;\n            var reversed = 0;\n            for(i = 0; i < 32; i++){\n                reversed |= val & 1;\n                if (i == 31) break;\n                reversed <<= 1;\n                val >>= 1;\n            }\n            baseCodec += BoxParser.decimalToHex(reversed, 0);\n            baseCodec += \".\";\n            if (this.hvcC.general_tier_flag === 0) {\n                baseCodec += \"L\";\n            } else {\n                baseCodec += \"H\";\n            }\n            baseCodec += this.hvcC.general_level_idc;\n            var hasByte = false;\n            var constraint_string = \"\";\n            for(i = 5; i >= 0; i--){\n                if (this.hvcC.general_constraint_indicator[i] || hasByte) {\n                    constraint_string = \".\" + BoxParser.decimalToHex(this.hvcC.general_constraint_indicator[i], 0) + constraint_string;\n                    hasByte = true;\n                }\n            }\n            baseCodec += constraint_string;\n        }\n        return baseCodec;\n    };\n    BoxParser.mp4aSampleEntry.prototype.getCodec = function() {\n        var baseCodec = BoxParser.SampleEntry.prototype.getCodec.call(this);\n        if (this.esds && this.esds.esd) {\n            var oti = this.esds.esd.getOTI();\n            var dsi = this.esds.esd.getAudioConfig();\n            return baseCodec + \".\" + BoxParser.decimalToHex(oti) + (dsi ? \".\" + dsi : \"\");\n        } else {\n            return baseCodec;\n        }\n    };\n    BoxParser.stxtSampleEntry.prototype.getCodec = function() {\n        var baseCodec = BoxParser.SampleEntry.prototype.getCodec.call(this);\n        if (this.mime_format) {\n            return baseCodec + \".\" + this.mime_format;\n        } else {\n            return baseCodec;\n        }\n    };\n    BoxParser.av01SampleEntry.prototype.getCodec = function() {\n        var baseCodec = BoxParser.SampleEntry.prototype.getCodec.call(this);\n        var bitdepth;\n        if (this.av1C.seq_profile === 2 && this.av1C.high_bitdepth === 1) {\n            bitdepth = this.av1C.twelve_bit === 1 ? \"12\" : \"10\";\n        } else if (this.av1C.seq_profile <= 2) {\n            bitdepth = this.av1C.high_bitdepth === 1 ? \"10\" : \"08\";\n        }\n        // TODO need to parse the SH to find color config\n        return baseCodec + \".\" + this.av1C.seq_profile + \".\" + this.av1C.seq_level_idx_0 + (this.av1C.seq_tier_0 ? \"H\" : \"M\") + \".\" + bitdepth; //+\".\"+this.av1C.monochrome+\".\"+this.av1C.chroma_subsampling_x+\"\"+this.av1C.chroma_subsampling_y+\"\"+this.av1C.chroma_sample_position;\n    };\n    // file:src/box-write.js\n    /* \n * Copyright (c) Telecom ParisTech/TSI/MM/GPAC Cyril Concolato\n * License: BSD-3-Clause (see LICENSE file)\n */ BoxParser.Box.prototype.writeHeader = function(stream, msg) {\n        this.size += 8;\n        if (this.size > MAX_SIZE) {\n            this.size += 8;\n        }\n        if (this.type === \"uuid\") {\n            this.size += 16;\n        }\n        Log.debug(\"BoxWriter\", \"Writing box \" + this.type + \" of size: \" + this.size + \" at position \" + stream.getPosition() + (msg || \"\"));\n        if (this.size > MAX_SIZE) {\n            stream.writeUint32(1);\n        } else {\n            this.sizePosition = stream.getPosition();\n            stream.writeUint32(this.size);\n        }\n        stream.writeString(this.type, null, 4);\n        if (this.type === \"uuid\") {\n            stream.writeUint8Array(this.uuid);\n        }\n        if (this.size > MAX_SIZE) {\n            stream.writeUint64(this.size);\n        }\n    };\n    BoxParser.FullBox.prototype.writeHeader = function(stream) {\n        this.size += 4;\n        BoxParser.Box.prototype.writeHeader.call(this, stream, \" v=\" + this.version + \" f=\" + this.flags);\n        stream.writeUint8(this.version);\n        stream.writeUint24(this.flags);\n    };\n    BoxParser.Box.prototype.write = function(stream) {\n        if (this.type === \"mdat\") {\n            /* TODO: fix this */ if (this.data) {\n                this.size = this.data.length;\n                this.writeHeader(stream);\n                stream.writeUint8Array(this.data);\n            }\n        } else {\n            this.size = this.data ? this.data.length : 0;\n            this.writeHeader(stream);\n            if (this.data) {\n                stream.writeUint8Array(this.data);\n            }\n        }\n    };\n    BoxParser.ContainerBox.prototype.write = function(stream) {\n        this.size = 0;\n        this.writeHeader(stream);\n        for(var i = 0; i < this.boxes.length; i++){\n            if (this.boxes[i]) {\n                this.boxes[i].write(stream);\n                this.size += this.boxes[i].size;\n            }\n        }\n        /* adjusting the size, now that all sub-boxes are known */ Log.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size);\n        stream.adjustUint32(this.sizePosition, this.size);\n    };\n    BoxParser.TrackReferenceTypeBox.prototype.write = function(stream) {\n        this.size = this.track_ids.length * 4;\n        this.writeHeader(stream);\n        stream.writeUint32Array(this.track_ids);\n    };\n    // file:src/writing/avcC.js\n    BoxParser.avcCBox.prototype.write = function(stream) {\n        var i;\n        this.size = 7;\n        for(i = 0; i < this.SPS.length; i++){\n            this.size += 2 + this.SPS[i].length;\n        }\n        for(i = 0; i < this.PPS.length; i++){\n            this.size += 2 + this.PPS[i].length;\n        }\n        if (this.ext) {\n            this.size += this.ext.length;\n        }\n        this.writeHeader(stream);\n        stream.writeUint8(this.configurationVersion);\n        stream.writeUint8(this.AVCProfileIndication);\n        stream.writeUint8(this.profile_compatibility);\n        stream.writeUint8(this.AVCLevelIndication);\n        stream.writeUint8(this.lengthSizeMinusOne + (63 << 2));\n        stream.writeUint8(this.SPS.length + (7 << 5));\n        for(i = 0; i < this.SPS.length; i++){\n            stream.writeUint16(this.SPS[i].length);\n            stream.writeUint8Array(this.SPS[i].nalu);\n        }\n        stream.writeUint8(this.PPS.length);\n        for(i = 0; i < this.PPS.length; i++){\n            stream.writeUint16(this.PPS[i].length);\n            stream.writeUint8Array(this.PPS[i].nalu);\n        }\n        if (this.ext) {\n            stream.writeUint8Array(this.ext);\n        }\n    };\n    // file:src/writing/co64.js\n    BoxParser.co64Box.prototype.write = function(stream) {\n        var i;\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 + 8 * this.chunk_offsets.length;\n        this.writeHeader(stream);\n        stream.writeUint32(this.chunk_offsets.length);\n        for(i = 0; i < this.chunk_offsets.length; i++){\n            stream.writeUint64(this.chunk_offsets[i]);\n        }\n    };\n    // file:src/writing/cslg.js\n    BoxParser.cslgBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 * 5;\n        this.writeHeader(stream);\n        stream.writeInt32(this.compositionToDTSShift);\n        stream.writeInt32(this.leastDecodeToDisplayDelta);\n        stream.writeInt32(this.greatestDecodeToDisplayDelta);\n        stream.writeInt32(this.compositionStartTime);\n        stream.writeInt32(this.compositionEndTime);\n    };\n    // file:src/writing/ctts.js\n    BoxParser.cttsBox.prototype.write = function(stream) {\n        var i;\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 + 8 * this.sample_counts.length;\n        this.writeHeader(stream);\n        stream.writeUint32(this.sample_counts.length);\n        for(i = 0; i < this.sample_counts.length; i++){\n            stream.writeUint32(this.sample_counts[i]);\n            if (this.version === 1) {\n                stream.writeInt32(this.sample_offsets[i]); /* signed */ \n            } else {\n                stream.writeUint32(this.sample_offsets[i]); /* unsigned */ \n            }\n        }\n    };\n    // file:src/writing/dref.js\n    BoxParser.drefBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4; //\n        this.writeHeader(stream);\n        stream.writeUint32(this.entries.length);\n        for(var i = 0; i < this.entries.length; i++){\n            this.entries[i].write(stream);\n            this.size += this.entries[i].size;\n        }\n        /* adjusting the size, now that all sub-boxes are known */ Log.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size);\n        stream.adjustUint32(this.sizePosition, this.size);\n    };\n    // file:src/writing/elng.js\n    BoxParser.elngBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = this.extended_language.length;\n        this.writeHeader(stream);\n        stream.writeString(this.extended_language);\n    };\n    // file:src/writing/elst.js\n    BoxParser.elstBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 + 12 * this.entries.length;\n        this.writeHeader(stream);\n        stream.writeUint32(this.entries.length);\n        for(var i = 0; i < this.entries.length; i++){\n            var entry = this.entries[i];\n            stream.writeUint32(entry.segment_duration);\n            stream.writeInt32(entry.media_time);\n            stream.writeInt16(entry.media_rate_integer);\n            stream.writeInt16(entry.media_rate_fraction);\n        }\n    };\n    // file:src/writing/emsg.js\n    BoxParser.emsgBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 * 4 + this.message_data.length + (this.scheme_id_uri.length + 1) + (this.value.length + 1);\n        this.writeHeader(stream);\n        stream.writeCString(this.scheme_id_uri);\n        stream.writeCString(this.value);\n        stream.writeUint32(this.timescale);\n        stream.writeUint32(this.presentation_time_delta);\n        stream.writeUint32(this.event_duration);\n        stream.writeUint32(this.id);\n        stream.writeUint8Array(this.message_data);\n    };\n    // file:src/writing/ftyp.js\n    BoxParser.ftypBox.prototype.write = function(stream) {\n        this.size = 8 + 4 * this.compatible_brands.length;\n        this.writeHeader(stream);\n        stream.writeString(this.major_brand, null, 4);\n        stream.writeUint32(this.minor_version);\n        for(var i = 0; i < this.compatible_brands.length; i++){\n            stream.writeString(this.compatible_brands[i], null, 4);\n        }\n    };\n    // file:src/writing/hdlr.js\n    BoxParser.hdlrBox.prototype.write = function(stream) {\n        this.size = 5 * 4 + this.name.length + 1;\n        this.version = 0;\n        this.flags = 0;\n        this.writeHeader(stream);\n        stream.writeUint32(0);\n        stream.writeString(this.handler, null, 4);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeCString(this.name);\n    };\n    // file:src/writing/kind.js\n    BoxParser.kindBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = this.schemeURI.length + 1 + (this.value.length + 1);\n        this.writeHeader(stream);\n        stream.writeCString(this.schemeURI);\n        stream.writeCString(this.value);\n    };\n    // file:src/writing/mdhd.js\n    BoxParser.mdhdBox.prototype.write = function(stream) {\n        this.size = 4 * 4 + 2 * 2;\n        this.flags = 0;\n        this.version = 0;\n        this.writeHeader(stream);\n        stream.writeUint32(this.creation_time);\n        stream.writeUint32(this.modification_time);\n        stream.writeUint32(this.timescale);\n        stream.writeUint32(this.duration);\n        stream.writeUint16(this.language);\n        stream.writeUint16(0);\n    };\n    // file:src/writing/mehd.js\n    BoxParser.mehdBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4;\n        this.writeHeader(stream);\n        stream.writeUint32(this.fragment_duration);\n    };\n    // file:src/writing/mfhd.js\n    BoxParser.mfhdBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4;\n        this.writeHeader(stream);\n        stream.writeUint32(this.sequence_number);\n    };\n    // file:src/writing/mvhd.js\n    BoxParser.mvhdBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 23 * 4 + 2 * 2;\n        this.writeHeader(stream);\n        stream.writeUint32(this.creation_time);\n        stream.writeUint32(this.modification_time);\n        stream.writeUint32(this.timescale);\n        stream.writeUint32(this.duration);\n        stream.writeUint32(this.rate);\n        stream.writeUint16(this.volume << 8);\n        stream.writeUint16(0);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint32Array(this.matrix);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint32(this.next_track_id);\n    };\n    // file:src/writing/sampleentry.js\n    BoxParser.SampleEntry.prototype.writeHeader = function(stream) {\n        this.size = 8;\n        BoxParser.Box.prototype.writeHeader.call(this, stream);\n        stream.writeUint8(0);\n        stream.writeUint8(0);\n        stream.writeUint8(0);\n        stream.writeUint8(0);\n        stream.writeUint8(0);\n        stream.writeUint8(0);\n        stream.writeUint16(this.data_reference_index);\n    };\n    BoxParser.SampleEntry.prototype.writeFooter = function(stream) {\n        for(var i = 0; i < this.boxes.length; i++){\n            this.boxes[i].write(stream);\n            this.size += this.boxes[i].size;\n        }\n        Log.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size);\n        stream.adjustUint32(this.sizePosition, this.size);\n    };\n    BoxParser.SampleEntry.prototype.write = function(stream) {\n        this.writeHeader(stream);\n        stream.writeUint8Array(this.data);\n        this.size += this.data.length;\n        Log.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size);\n        stream.adjustUint32(this.sizePosition, this.size);\n    };\n    BoxParser.VisualSampleEntry.prototype.write = function(stream) {\n        this.writeHeader(stream);\n        this.size += 2 * 7 + 6 * 4 + 32;\n        stream.writeUint16(0);\n        stream.writeUint16(0);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint16(this.width);\n        stream.writeUint16(this.height);\n        stream.writeUint32(this.horizresolution);\n        stream.writeUint32(this.vertresolution);\n        stream.writeUint32(0);\n        stream.writeUint16(this.frame_count);\n        stream.writeUint8(Math.min(31, this.compressorname.length));\n        stream.writeString(this.compressorname, null, 31);\n        stream.writeUint16(this.depth);\n        stream.writeInt16(-1);\n        this.writeFooter(stream);\n    };\n    BoxParser.AudioSampleEntry.prototype.write = function(stream) {\n        this.writeHeader(stream);\n        this.size += 2 * 4 + 3 * 4;\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeUint16(this.channel_count);\n        stream.writeUint16(this.samplesize);\n        stream.writeUint16(0);\n        stream.writeUint16(0);\n        stream.writeUint32(this.samplerate << 16);\n        this.writeFooter(stream);\n    };\n    BoxParser.stppSampleEntry.prototype.write = function(stream) {\n        this.writeHeader(stream);\n        this.size += this.namespace.length + 1 + this.schema_location.length + 1 + this.auxiliary_mime_types.length + 1;\n        stream.writeCString(this.namespace);\n        stream.writeCString(this.schema_location);\n        stream.writeCString(this.auxiliary_mime_types);\n        this.writeFooter(stream);\n    };\n    // file:src/writing/samplegroups/samplegroup.js\n    BoxParser.SampleGroupEntry.prototype.write = function(stream) {\n        stream.writeUint8Array(this.data);\n    };\n    // file:src/writing/sbgp.js\n    BoxParser.sbgpBox.prototype.write = function(stream) {\n        this.version = 1;\n        this.flags = 0;\n        this.size = 12 + 8 * this.entries.length;\n        this.writeHeader(stream);\n        stream.writeString(this.grouping_type, null, 4);\n        stream.writeUint32(this.grouping_type_parameter);\n        stream.writeUint32(this.entries.length);\n        for(var i = 0; i < this.entries.length; i++){\n            var entry = this.entries[i];\n            stream.writeInt32(entry.sample_count);\n            stream.writeInt32(entry.group_description_index);\n        }\n    };\n    // file:src/writing/sgpd.js\n    BoxParser.sgpdBox.prototype.write = function(stream) {\n        var i;\n        var entry;\n        // leave version as read\n        // this.version;\n        this.flags = 0;\n        this.size = 12;\n        for(i = 0; i < this.entries.length; i++){\n            entry = this.entries[i];\n            if (this.version === 1) {\n                if (this.default_length === 0) {\n                    this.size += 4;\n                }\n                this.size += entry.data.length;\n            }\n        }\n        this.writeHeader(stream);\n        stream.writeString(this.grouping_type, null, 4);\n        if (this.version === 1) {\n            stream.writeUint32(this.default_length);\n        }\n        if (this.version >= 2) {\n            stream.writeUint32(this.default_sample_description_index);\n        }\n        stream.writeUint32(this.entries.length);\n        for(i = 0; i < this.entries.length; i++){\n            entry = this.entries[i];\n            if (this.version === 1) {\n                if (this.default_length === 0) {\n                    stream.writeUint32(entry.description_length);\n                }\n            }\n            entry.write(stream);\n        }\n    };\n    // file:src/writing/sidx.js\n    BoxParser.sidxBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 * 4 + 2 + 2 + 12 * this.references.length;\n        this.writeHeader(stream);\n        stream.writeUint32(this.reference_ID);\n        stream.writeUint32(this.timescale);\n        stream.writeUint32(this.earliest_presentation_time);\n        stream.writeUint32(this.first_offset);\n        stream.writeUint16(0);\n        stream.writeUint16(this.references.length);\n        for(var i = 0; i < this.references.length; i++){\n            var ref1 = this.references[i];\n            stream.writeUint32(ref1.reference_type << 31 | ref1.referenced_size);\n            stream.writeUint32(ref1.subsegment_duration);\n            stream.writeUint32(ref1.starts_with_SAP << 31 | ref1.SAP_type << 28 | ref1.SAP_delta_time);\n        }\n    };\n    // file:src/writing/stco.js\n    BoxParser.stcoBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 + 4 * this.chunk_offsets.length;\n        this.writeHeader(stream);\n        stream.writeUint32(this.chunk_offsets.length);\n        stream.writeUint32Array(this.chunk_offsets);\n    };\n    // file:src/writing/stsc.js\n    BoxParser.stscBox.prototype.write = function(stream) {\n        var i;\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 + 12 * this.first_chunk.length;\n        this.writeHeader(stream);\n        stream.writeUint32(this.first_chunk.length);\n        for(i = 0; i < this.first_chunk.length; i++){\n            stream.writeUint32(this.first_chunk[i]);\n            stream.writeUint32(this.samples_per_chunk[i]);\n            stream.writeUint32(this.sample_description_index[i]);\n        }\n    };\n    // file:src/writing/stsd.js\n    BoxParser.stsdBox.prototype.write = function(stream) {\n        var i;\n        this.version = 0;\n        this.flags = 0;\n        this.size = 0;\n        this.writeHeader(stream);\n        stream.writeUint32(this.entries.length);\n        this.size += 4;\n        for(i = 0; i < this.entries.length; i++){\n            this.entries[i].write(stream);\n            this.size += this.entries[i].size;\n        }\n        /* adjusting the size, now that all sub-boxes are known */ Log.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size);\n        stream.adjustUint32(this.sizePosition, this.size);\n    };\n    // file:src/writing/stsh.js\n    BoxParser.stshBox.prototype.write = function(stream) {\n        var i;\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 + 8 * this.shadowed_sample_numbers.length;\n        this.writeHeader(stream);\n        stream.writeUint32(this.shadowed_sample_numbers.length);\n        for(i = 0; i < this.shadowed_sample_numbers.length; i++){\n            stream.writeUint32(this.shadowed_sample_numbers[i]);\n            stream.writeUint32(this.sync_sample_numbers[i]);\n        }\n    };\n    // file:src/writing/stss.js\n    BoxParser.stssBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 + 4 * this.sample_numbers.length;\n        this.writeHeader(stream);\n        stream.writeUint32(this.sample_numbers.length);\n        stream.writeUint32Array(this.sample_numbers);\n    };\n    // file:src/writing/stsz.js\n    BoxParser.stszBox.prototype.write = function(stream) {\n        var i;\n        var constant = true;\n        this.version = 0;\n        this.flags = 0;\n        if (this.sample_sizes.length > 0) {\n            i = 0;\n            while(i + 1 < this.sample_sizes.length){\n                if (this.sample_sizes[i + 1] !== this.sample_sizes[0]) {\n                    constant = false;\n                    break;\n                } else {\n                    i++;\n                }\n            }\n        } else {\n            constant = false;\n        }\n        this.size = 8;\n        if (!constant) {\n            this.size += 4 * this.sample_sizes.length;\n        }\n        this.writeHeader(stream);\n        if (!constant) {\n            stream.writeUint32(0);\n        } else {\n            stream.writeUint32(this.sample_sizes[0]);\n        }\n        stream.writeUint32(this.sample_sizes.length);\n        if (!constant) {\n            stream.writeUint32Array(this.sample_sizes);\n        }\n    };\n    // file:src/writing/stts.js\n    BoxParser.sttsBox.prototype.write = function(stream) {\n        var i;\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 + 8 * this.sample_counts.length;\n        this.writeHeader(stream);\n        stream.writeUint32(this.sample_counts.length);\n        for(i = 0; i < this.sample_counts.length; i++){\n            stream.writeUint32(this.sample_counts[i]);\n            stream.writeUint32(this.sample_deltas[i]);\n        }\n    };\n    // file:src/writing/tfdt.js\n    BoxParser.tfdtBox.prototype.write = function(stream) {\n        var UINT32_MAX = Math.pow(2, 32) - 1;\n        // use version 1 if baseMediaDecodeTime does not fit 32 bits\n        this.version = this.baseMediaDecodeTime > UINT32_MAX ? 1 : 0;\n        this.flags = 0;\n        this.size = 4;\n        if (this.version === 1) {\n            this.size += 4;\n        }\n        this.writeHeader(stream);\n        if (this.version === 1) {\n            stream.writeUint64(this.baseMediaDecodeTime);\n        } else {\n            stream.writeUint32(this.baseMediaDecodeTime);\n        }\n    };\n    // file:src/writing/tfhd.js\n    BoxParser.tfhdBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.size = 4;\n        if (this.flags & BoxParser.TFHD_FLAG_BASE_DATA_OFFSET) {\n            this.size += 8;\n        }\n        if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DESC) {\n            this.size += 4;\n        }\n        if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DUR) {\n            this.size += 4;\n        }\n        if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_SIZE) {\n            this.size += 4;\n        }\n        if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_FLAGS) {\n            this.size += 4;\n        }\n        this.writeHeader(stream);\n        stream.writeUint32(this.track_id);\n        if (this.flags & BoxParser.TFHD_FLAG_BASE_DATA_OFFSET) {\n            stream.writeUint64(this.base_data_offset);\n        }\n        if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DESC) {\n            stream.writeUint32(this.default_sample_description_index);\n        }\n        if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_DUR) {\n            stream.writeUint32(this.default_sample_duration);\n        }\n        if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_SIZE) {\n            stream.writeUint32(this.default_sample_size);\n        }\n        if (this.flags & BoxParser.TFHD_FLAG_SAMPLE_FLAGS) {\n            stream.writeUint32(this.default_sample_flags);\n        }\n    };\n    // file:src/writing/tkhd.js\n    BoxParser.tkhdBox.prototype.write = function(stream) {\n        this.version = 0;\n        //this.flags = 0;\n        this.size = 4 * 18 + 2 * 4;\n        this.writeHeader(stream);\n        stream.writeUint32(this.creation_time);\n        stream.writeUint32(this.modification_time);\n        stream.writeUint32(this.track_id);\n        stream.writeUint32(0);\n        stream.writeUint32(this.duration);\n        stream.writeUint32(0);\n        stream.writeUint32(0);\n        stream.writeInt16(this.layer);\n        stream.writeInt16(this.alternate_group);\n        stream.writeInt16(this.volume << 8);\n        stream.writeUint16(0);\n        stream.writeInt32Array(this.matrix);\n        stream.writeUint32(this.width);\n        stream.writeUint32(this.height);\n    };\n    // file:src/writing/trex.js\n    BoxParser.trexBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = 4 * 5;\n        this.writeHeader(stream);\n        stream.writeUint32(this.track_id);\n        stream.writeUint32(this.default_sample_description_index);\n        stream.writeUint32(this.default_sample_duration);\n        stream.writeUint32(this.default_sample_size);\n        stream.writeUint32(this.default_sample_flags);\n    };\n    // file:src/writing/trun.js\n    BoxParser.trunBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.size = 4;\n        if (this.flags & BoxParser.TRUN_FLAGS_DATA_OFFSET) {\n            this.size += 4;\n        }\n        if (this.flags & BoxParser.TRUN_FLAGS_FIRST_FLAG) {\n            this.size += 4;\n        }\n        if (this.flags & BoxParser.TRUN_FLAGS_DURATION) {\n            this.size += 4 * this.sample_duration.length;\n        }\n        if (this.flags & BoxParser.TRUN_FLAGS_SIZE) {\n            this.size += 4 * this.sample_size.length;\n        }\n        if (this.flags & BoxParser.TRUN_FLAGS_FLAGS) {\n            this.size += 4 * this.sample_flags.length;\n        }\n        if (this.flags & BoxParser.TRUN_FLAGS_CTS_OFFSET) {\n            this.size += 4 * this.sample_composition_time_offset.length;\n        }\n        this.writeHeader(stream);\n        stream.writeUint32(this.sample_count);\n        if (this.flags & BoxParser.TRUN_FLAGS_DATA_OFFSET) {\n            this.data_offset_position = stream.getPosition();\n            stream.writeInt32(this.data_offset); //signed\n        }\n        if (this.flags & BoxParser.TRUN_FLAGS_FIRST_FLAG) {\n            stream.writeUint32(this.first_sample_flags);\n        }\n        for(var i = 0; i < this.sample_count; i++){\n            if (this.flags & BoxParser.TRUN_FLAGS_DURATION) {\n                stream.writeUint32(this.sample_duration[i]);\n            }\n            if (this.flags & BoxParser.TRUN_FLAGS_SIZE) {\n                stream.writeUint32(this.sample_size[i]);\n            }\n            if (this.flags & BoxParser.TRUN_FLAGS_FLAGS) {\n                stream.writeUint32(this.sample_flags[i]);\n            }\n            if (this.flags & BoxParser.TRUN_FLAGS_CTS_OFFSET) {\n                if (this.version === 0) {\n                    stream.writeUint32(this.sample_composition_time_offset[i]);\n                } else {\n                    stream.writeInt32(this.sample_composition_time_offset[i]); //signed\n                }\n            }\n        }\n    };\n    // file:src/writing/url.js\n    BoxParser[\"url Box\"].prototype.write = function(stream) {\n        this.version = 0;\n        if (this.location) {\n            this.flags = 0;\n            this.size = this.location.length + 1;\n        } else {\n            this.flags = 0x000001;\n            this.size = 0;\n        }\n        this.writeHeader(stream);\n        if (this.location) {\n            stream.writeCString(this.location);\n        }\n    };\n    // file:src/writing/urn.js\n    BoxParser[\"urn Box\"].prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 0;\n        this.size = this.name.length + 1 + (this.location ? this.location.length + 1 : 0);\n        this.writeHeader(stream);\n        stream.writeCString(this.name);\n        if (this.location) {\n            stream.writeCString(this.location);\n        }\n    };\n    // file:src/writing/vmhd.js\n    BoxParser.vmhdBox.prototype.write = function(stream) {\n        this.version = 0;\n        this.flags = 1;\n        this.size = 8;\n        this.writeHeader(stream);\n        stream.writeUint16(this.graphicsmode);\n        stream.writeUint16Array(this.opcolor);\n    };\n    // file:src/box-unpack.js\n    /* \n * Copyright (c) Telecom ParisTech/TSI/MM/GPAC Cyril Concolato\n * License: BSD-3-Clause (see LICENSE file)\n */ BoxParser.cttsBox.prototype.unpack = function(samples) {\n        var i, j, k;\n        k = 0;\n        for(i = 0; i < this.sample_counts.length; i++){\n            for(j = 0; j < this.sample_counts[i]; j++){\n                samples[k].pts = samples[k].dts + this.sample_offsets[i];\n                k++;\n            }\n        }\n    };\n    BoxParser.sttsBox.prototype.unpack = function(samples) {\n        var i, j, k;\n        k = 0;\n        for(i = 0; i < this.sample_counts.length; i++){\n            for(j = 0; j < this.sample_counts[i]; j++){\n                if (k === 0) {\n                    samples[k].dts = 0;\n                } else {\n                    samples[k].dts = samples[k - 1].dts + this.sample_deltas[i];\n                }\n                k++;\n            }\n        }\n    };\n    BoxParser.stcoBox.prototype.unpack = function(samples) {\n        var i;\n        for(i = 0; i < this.chunk_offsets.length; i++){\n            samples[i].offset = this.chunk_offsets[i];\n        }\n    };\n    BoxParser.stscBox.prototype.unpack = function(samples) {\n        var i, j, k, l, m;\n        l = 0;\n        m = 0;\n        for(i = 0; i < this.first_chunk.length; i++){\n            for(j = 0; j < (i + 1 < this.first_chunk.length ? this.first_chunk[i + 1] : Infinity); j++){\n                m++;\n                for(k = 0; k < this.samples_per_chunk[i]; k++){\n                    if (samples[l]) {\n                        samples[l].description_index = this.sample_description_index[i];\n                        samples[l].chunk_index = m;\n                    } else {\n                        return;\n                    }\n                    l++;\n                }\n            }\n        }\n    };\n    BoxParser.stszBox.prototype.unpack = function(samples) {\n        var i;\n        for(i = 0; i < this.sample_sizes.length; i++){\n            samples[i].size = this.sample_sizes[i];\n        }\n    };\n    // file:src/box-diff.js\n    BoxParser.DIFF_BOXES_PROP_NAMES = [\n        \"boxes\",\n        \"entries\",\n        \"references\",\n        \"subsamples\",\n        \"items\",\n        \"item_infos\",\n        \"extents\",\n        \"associations\",\n        \"subsegments\",\n        \"ranges\",\n        \"seekLists\",\n        \"seekPoints\",\n        \"esd\",\n        \"levels\"\n    ];\n    BoxParser.DIFF_PRIMITIVE_ARRAY_PROP_NAMES = [\n        \"compatible_brands\",\n        \"matrix\",\n        \"opcolor\",\n        \"sample_counts\",\n        \"sample_counts\",\n        \"sample_deltas\",\n        \"first_chunk\",\n        \"samples_per_chunk\",\n        \"sample_sizes\",\n        \"chunk_offsets\",\n        \"sample_offsets\",\n        \"sample_description_index\",\n        \"sample_duration\"\n    ];\n    BoxParser.boxEqualFields = function(box_a, box_b) {\n        if (box_a && !box_b) return false;\n        var prop;\n        for(prop in box_a){\n            if (BoxParser.DIFF_BOXES_PROP_NAMES.indexOf(prop) > -1) {\n                continue;\n            // } else if (excluded_fields && excluded_fields.indexOf(prop) > -1) {\n            // \tcontinue;\n            } else if (box_a[prop] instanceof BoxParser.Box || box_b[prop] instanceof BoxParser.Box) {\n                continue;\n            } else if (typeof box_a[prop] === \"undefined\" || typeof box_b[prop] === \"undefined\") {\n                continue;\n            } else if (typeof box_a[prop] === \"function\" || typeof box_b[prop] === \"function\") {\n                continue;\n            } else if (box_a.subBoxNames && box_a.subBoxNames.indexOf(prop.slice(0, 4)) > -1 || box_b.subBoxNames && box_b.subBoxNames.indexOf(prop.slice(0, 4)) > -1) {\n                continue;\n            } else {\n                if (prop === \"data\" || prop === \"start\" || prop === \"size\" || prop === \"creation_time\" || prop === \"modification_time\") {\n                    continue;\n                } else if (BoxParser.DIFF_PRIMITIVE_ARRAY_PROP_NAMES.indexOf(prop) > -1) {\n                    continue;\n                } else {\n                    if (box_a[prop] !== box_b[prop]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    BoxParser.boxEqual = function(box_a, box_b) {\n        if (!BoxParser.boxEqualFields(box_a, box_b)) {\n            return false;\n        }\n        for(var j = 0; j < BoxParser.DIFF_BOXES_PROP_NAMES.length; j++){\n            var name = BoxParser.DIFF_BOXES_PROP_NAMES[j];\n            if (box_a[name] && box_b[name]) {\n                if (!BoxParser.boxEqual(box_a[name], box_b[name])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }; // file:src/text-mp4.js\n    var XMLSubtitlein4Parser = function() {};\n    XMLSubtitlein4Parser.prototype.parseSample = function(sample) {\n        var res = {};\n        var i;\n        res.resources = [];\n        var stream = new MP4BoxStream(sample.data.buffer);\n        if (!sample.subsamples || sample.subsamples.length === 0) {\n            res.documentString = stream.readString(sample.data.length);\n        } else {\n            res.documentString = stream.readString(sample.subsamples[0].size);\n            if (sample.subsamples.length > 1) {\n                for(i = 1; i < sample.subsamples.length; i++){\n                    res.resources[i] = stream.readUint8Array(sample.subsamples[i].size);\n                }\n            }\n        }\n        if (typeof DOMParser !== \"undefined\") {\n            res.document = new DOMParser().parseFromString(res.documentString, \"application/xml\");\n        }\n        return res;\n    };\n    var Textin4Parser = function() {};\n    Textin4Parser.prototype.parseSample = function(sample) {\n        var textString;\n        var stream = new MP4BoxStream(sample.data.buffer);\n        textString = stream.readString(sample.data.length);\n        return textString;\n    };\n    Textin4Parser.prototype.parseConfig = function(data) {\n        var textString;\n        var stream = new MP4BoxStream(data.buffer);\n        stream.readUint32(); // version & flags\n        textString = stream.readCString();\n        return textString;\n    };\n    {\n        exports.XMLSubtitlein4Parser = XMLSubtitlein4Parser;\n        exports.Textin4Parser = Textin4Parser;\n    }\n    // file:src/isofile.js\n    /*\n * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato\n * License: BSD-3-Clause (see LICENSE file)\n */ var ISOFile = function(stream) {\n        /* MutiBufferStream object used to parse boxes */ this.stream = stream || new MultiBufferStream();\n        /* Array of all boxes (in order) found in the file */ this.boxes = [];\n        /* Array of all mdats */ this.mdats = [];\n        /* Array of all moofs */ this.moofs = [];\n        /* Boolean indicating if the file is compatible with progressive parsing (moov first) */ this.isProgressive = false;\n        /* Boolean used to fire moov start event only once */ this.moovStartFound = false;\n        /* Callback called when the moov parsing starts */ this.onMoovStart = null;\n        /* Boolean keeping track of the call to onMoovStart, to avoid double calls */ this.moovStartSent = false;\n        /* Callback called when the moov is entirely parsed */ this.onReady = null;\n        /* Boolean keeping track of the call to onReady, to avoid double calls */ this.readySent = false;\n        /* Callback to call when segments are ready */ this.onSegment = null;\n        /* Callback to call when samples are ready */ this.onSamples = null;\n        /* Callback to call when there is an error in the parsing or processing of samples */ this.onError = null;\n        /* Boolean indicating if the moov box run-length encoded tables of sample information have been processed */ this.sampleListBuilt = false;\n        /* Array of Track objects for which fragmentation of samples is requested */ this.fragmentedTracks = [];\n        /* Array of Track objects for which extraction of samples is requested */ this.extractedTracks = [];\n        /* Boolean indicating that fragmention is ready */ this.isFragmentationInitialized = false;\n        /* Boolean indicating that fragmented has started */ this.sampleProcessingStarted = false;\n        /* Number of the next 'moof' to generate when fragmenting */ this.nextMoofNumber = 0;\n        /* Boolean indicating if the initial list of items has been produced */ this.itemListBuilt = false;\n        /* Callback called when the sidx box is entirely parsed */ this.onSidx = null;\n        /* Boolean keeping track of the call to onSidx, to avoid double calls */ this.sidxSent = false;\n    };\n    ISOFile.prototype.setSegmentOptions = function(id, user, options) {\n        var trak = this.getTrackById(id);\n        if (trak) {\n            var fragTrack = {};\n            this.fragmentedTracks.push(fragTrack);\n            fragTrack.id = id;\n            fragTrack.user = user;\n            fragTrack.trak = trak;\n            trak.nextSample = 0;\n            fragTrack.segmentStream = null;\n            fragTrack.nb_samples = 1000;\n            fragTrack.rapAlignement = true;\n            if (options) {\n                if (options.nbSamples) fragTrack.nb_samples = options.nbSamples;\n                if (options.rapAlignement) fragTrack.rapAlignement = options.rapAlignement;\n            }\n        }\n    };\n    ISOFile.prototype.unsetSegmentOptions = function(id) {\n        var index = -1;\n        for(var i = 0; i < this.fragmentedTracks.length; i++){\n            var fragTrack = this.fragmentedTracks[i];\n            if (fragTrack.id == id) {\n                index = i;\n            }\n        }\n        if (index > -1) {\n            this.fragmentedTracks.splice(index, 1);\n        }\n    };\n    ISOFile.prototype.setExtractionOptions = function(id, user, options) {\n        var trak = this.getTrackById(id);\n        if (trak) {\n            var extractTrack = {};\n            this.extractedTracks.push(extractTrack);\n            extractTrack.id = id;\n            extractTrack.user = user;\n            extractTrack.trak = trak;\n            trak.nextSample = 0;\n            extractTrack.nb_samples = 1000;\n            extractTrack.samples = [];\n            if (options) {\n                if (options.nbSamples) extractTrack.nb_samples = options.nbSamples;\n            }\n        }\n    };\n    ISOFile.prototype.unsetExtractionOptions = function(id) {\n        var index = -1;\n        for(var i = 0; i < this.extractedTracks.length; i++){\n            var extractTrack = this.extractedTracks[i];\n            if (extractTrack.id == id) {\n                index = i;\n            }\n        }\n        if (index > -1) {\n            this.extractedTracks.splice(index, 1);\n        }\n    };\n    ISOFile.prototype.parse = function() {\n        var ret1;\n        var box1;\n        var parseBoxHeadersOnly = false;\n        if (this.restoreParsePosition) {\n            if (!this.restoreParsePosition()) {\n                return;\n            }\n        }\n        while(true){\n            if (this.hasIncompleteMdat && this.hasIncompleteMdat()) {\n                if (this.processIncompleteMdat()) {\n                    continue;\n                } else {\n                    return;\n                }\n            } else {\n                if (this.saveParsePosition) {\n                    this.saveParsePosition();\n                }\n                ret1 = BoxParser.parseOneBox(this.stream, parseBoxHeadersOnly);\n                if (ret1.code === BoxParser.ERR_NOT_ENOUGH_DATA) {\n                    if (this.processIncompleteBox) {\n                        if (this.processIncompleteBox(ret1)) {\n                            continue;\n                        } else {\n                            return;\n                        }\n                    } else {\n                        return;\n                    }\n                } else {\n                    var box_type;\n                    /* the box is entirely parsed */ box1 = ret1.box;\n                    box_type = box1.type !== \"uuid\" ? box1.type : box1.uuid;\n                    /* store the box in the 'boxes' array to preserve box order (for file rewrite if needed)  */ this.boxes.push(box1);\n                    /* but also store box in a property for more direct access */ switch(box_type){\n                        case \"mdat\":\n                            this.mdats.push(box1);\n                            break;\n                        case \"moof\":\n                            this.moofs.push(box1);\n                            break;\n                        case \"moov\":\n                            this.moovStartFound = true;\n                            if (this.mdats.length === 0) {\n                                this.isProgressive = true;\n                            }\n                        /* no break */ /* falls through */ default:\n                            if (this[box_type] !== undefined) {\n                                Log.warn(\"ISOFile\", \"Duplicate Box of type: \" + box_type + \", overriding previous occurrence\");\n                            }\n                            this[box_type] = box1;\n                            break;\n                    }\n                    if (this.updateUsedBytes) {\n                        this.updateUsedBytes(box1, ret1);\n                    }\n                }\n            }\n        }\n    };\n    ISOFile.prototype.checkBuffer = function(ab) {\n        if (ab === null || ab === undefined) {\n            throw \"Buffer must be defined and non empty\";\n        }\n        if (ab.fileStart === undefined) {\n            throw \"Buffer must have a fileStart property\";\n        }\n        if (ab.byteLength === 0) {\n            Log.warn(\"ISOFile\", \"Ignoring empty buffer (fileStart: \" + ab.fileStart + \")\");\n            this.stream.logBufferLevel();\n            return false;\n        }\n        Log.info(\"ISOFile\", \"Processing buffer (fileStart: \" + ab.fileStart + \")\");\n        /* mark the bytes in the buffer as not being used yet */ ab.usedBytes = 0;\n        this.stream.insertBuffer(ab);\n        this.stream.logBufferLevel();\n        if (!this.stream.initialized()) {\n            Log.warn(\"ISOFile\", \"Not ready to start parsing\");\n            return false;\n        }\n        return true;\n    };\n    /* Processes a new ArrayBuffer (with a fileStart property)\n   Returns the next expected file position, or undefined if not ready to parse */ ISOFile.prototype.appendBuffer = function(ab, last) {\n        var nextFileStart;\n        if (!this.checkBuffer(ab)) {\n            return;\n        }\n        /* Parse whatever is in the existing buffers */ this.parse();\n        /* Check if the moovStart callback needs to be called */ if (this.moovStartFound && !this.moovStartSent) {\n            this.moovStartSent = true;\n            if (this.onMoovStart) this.onMoovStart();\n        }\n        if (this.moov) {\n            /* A moov box has been entirely parsed */ /* if this is the first call after the moov is found we initialize the list of samples (may be empty in fragmented files) */ if (!this.sampleListBuilt) {\n                this.buildSampleLists();\n                this.sampleListBuilt = true;\n            }\n            /* We update the sample information if there are any new moof boxes */ this.updateSampleLists();\n            /* If the application needs to be informed that the 'moov' has been found,\n\t\t   we create the information object and callback the application */ if (this.onReady && !this.readySent) {\n                this.readySent = true;\n                this.onReady(this.getInfo());\n            }\n            /* See if any sample extraction or segment creation needs to be done with the available samples */ this.processSamples(last);\n            /* Inform about the best range to fetch next */ if (this.nextSeekPosition) {\n                nextFileStart = this.nextSeekPosition;\n                this.nextSeekPosition = undefined;\n            } else {\n                nextFileStart = this.nextParsePosition;\n            }\n            if (this.stream.getEndFilePositionAfter) {\n                nextFileStart = this.stream.getEndFilePositionAfter(nextFileStart);\n            }\n        } else {\n            if (this.nextParsePosition) {\n                /* moov has not been parsed but the first buffer was received,\n\t\t\t   the next fetch should probably be the next box start */ nextFileStart = this.nextParsePosition;\n            } else {\n                /* No valid buffer has been parsed yet, we cannot know what to parse next */ nextFileStart = 0;\n            }\n        }\n        if (this.sidx) {\n            if (this.onSidx && !this.sidxSent) {\n                this.onSidx(this.sidx);\n                this.sidxSent = true;\n            }\n        }\n        if (this.meta) {\n            if (this.flattenItemInfo && !this.itemListBuilt) {\n                this.flattenItemInfo();\n                this.itemListBuilt = true;\n            }\n            if (this.processItems) {\n                this.processItems(this.onItem);\n            }\n        }\n        if (this.stream.cleanBuffers) {\n            Log.info(\"ISOFile\", \"Done processing buffer (fileStart: \" + ab.fileStart + \") - next buffer to fetch should have a fileStart position of \" + nextFileStart);\n            this.stream.logBufferLevel();\n            this.stream.cleanBuffers();\n            this.stream.logBufferLevel(true);\n            Log.info(\"ISOFile\", \"Sample data size in memory: \" + this.getAllocatedSampleDataSize());\n        }\n        return nextFileStart;\n    };\n    ISOFile.prototype.getInfo = function() {\n        var i, j;\n        var movie = {};\n        var trak;\n        var track;\n        var sample_desc;\n        var _1904 = new Date(\"1904-01-01T00:00:00Z\").getTime();\n        if (this.moov) {\n            movie.hasMoov = true;\n            movie.duration = this.moov.mvhd.duration;\n            movie.timescale = this.moov.mvhd.timescale;\n            movie.isFragmented = this.moov.mvex != null;\n            if (movie.isFragmented && this.moov.mvex.mehd) {\n                movie.fragment_duration = this.moov.mvex.mehd.fragment_duration;\n            }\n            movie.isProgressive = this.isProgressive;\n            movie.hasIOD = this.moov.iods != null;\n            movie.brands = [];\n            movie.brands.push(this.ftyp.major_brand);\n            movie.brands = movie.brands.concat(this.ftyp.compatible_brands);\n            movie.created = new Date(_1904 + this.moov.mvhd.creation_time * 1000);\n            movie.modified = new Date(_1904 + this.moov.mvhd.modification_time * 1000);\n            movie.tracks = [];\n            movie.audioTracks = [];\n            movie.videoTracks = [];\n            movie.subtitleTracks = [];\n            movie.metadataTracks = [];\n            movie.hintTracks = [];\n            movie.otherTracks = [];\n            for(i = 0; i < this.moov.traks.length; i++){\n                trak = this.moov.traks[i];\n                sample_desc = trak.mdia.minf.stbl.stsd.entries[0];\n                track = {};\n                movie.tracks.push(track);\n                track.id = trak.tkhd.track_id;\n                track.name = trak.mdia.hdlr.name;\n                track.references = [];\n                if (trak.tref) {\n                    for(j = 0; j < trak.tref.boxes.length; j++){\n                        ref = {};\n                        track.references.push(ref);\n                        ref.type = trak.tref.boxes[j].type;\n                        ref.track_ids = trak.tref.boxes[j].track_ids;\n                    }\n                }\n                if (trak.edts) {\n                    track.edits = trak.edts.elst.entries;\n                }\n                track.created = new Date(_1904 + trak.tkhd.creation_time * 1000);\n                track.modified = new Date(_1904 + trak.tkhd.modification_time * 1000);\n                track.movie_duration = trak.tkhd.duration;\n                track.movie_timescale = movie.timescale;\n                track.layer = trak.tkhd.layer;\n                track.alternate_group = trak.tkhd.alternate_group;\n                track.volume = trak.tkhd.volume;\n                track.matrix = trak.tkhd.matrix;\n                track.track_width = trak.tkhd.width / (1 << 16);\n                track.track_height = trak.tkhd.height / (1 << 16);\n                track.timescale = trak.mdia.mdhd.timescale;\n                track.cts_shift = trak.mdia.minf.stbl.cslg;\n                track.duration = trak.mdia.mdhd.duration;\n                track.samples_duration = trak.samples_duration;\n                track.codec = sample_desc.getCodec();\n                track.kind = trak.udta && trak.udta.kinds.length ? trak.udta.kinds[0] : {\n                    schemeURI: \"\",\n                    value: \"\"\n                };\n                track.language = trak.mdia.elng ? trak.mdia.elng.extended_language : trak.mdia.mdhd.languageString;\n                track.nb_samples = trak.samples.length;\n                track.size = trak.samples_size;\n                track.bitrate = track.size * 8 * track.timescale / track.samples_duration;\n                if (sample_desc.isAudio()) {\n                    track.type = \"audio\";\n                    movie.audioTracks.push(track);\n                    track.audio = {};\n                    track.audio.sample_rate = sample_desc.getSampleRate();\n                    track.audio.channel_count = sample_desc.getChannelCount();\n                    track.audio.sample_size = sample_desc.getSampleSize();\n                } else if (sample_desc.isVideo()) {\n                    track.type = \"video\";\n                    movie.videoTracks.push(track);\n                    track.video = {};\n                    track.video.width = sample_desc.getWidth();\n                    track.video.height = sample_desc.getHeight();\n                } else if (sample_desc.isSubtitle()) {\n                    track.type = \"subtitles\";\n                    movie.subtitleTracks.push(track);\n                } else if (sample_desc.isHint()) {\n                    track.type = \"metadata\";\n                    movie.hintTracks.push(track);\n                } else if (sample_desc.isMetadata()) {\n                    track.type = \"metadata\";\n                    movie.metadataTracks.push(track);\n                } else {\n                    track.type = \"metadata\";\n                    movie.otherTracks.push(track);\n                }\n            }\n        } else {\n            movie.hasMoov = false;\n        }\n        movie.mime = \"\";\n        if (movie.hasMoov && movie.tracks) {\n            if (movie.videoTracks && movie.videoTracks.length > 0) {\n                movie.mime += 'video/mp4; codecs=\"';\n            } else if (movie.audioTracks && movie.audioTracks.length > 0) {\n                movie.mime += 'audio/mp4; codecs=\"';\n            } else {\n                movie.mime += 'application/mp4; codecs=\"';\n            }\n            for(i = 0; i < movie.tracks.length; i++){\n                if (i !== 0) movie.mime += \",\";\n                movie.mime += movie.tracks[i].codec;\n            }\n            movie.mime += '\"; profiles=\"';\n            movie.mime += this.ftyp.compatible_brands.join();\n            movie.mime += '\"';\n        }\n        return movie;\n    };\n    ISOFile.prototype.processSamples = function(last) {\n        var i;\n        var trak;\n        if (!this.sampleProcessingStarted) return;\n        /* For each track marked for fragmentation,\n\t   check if the next sample is there (i.e. if the sample information is known (i.e. moof has arrived) and if it has been downloaded)\n\t   and create a fragment with it */ if (this.isFragmentationInitialized && this.onSegment !== null) {\n            for(i = 0; i < this.fragmentedTracks.length; i++){\n                var fragTrak = this.fragmentedTracks[i];\n                trak = fragTrak.trak;\n                while(trak.nextSample < trak.samples.length && this.sampleProcessingStarted){\n                    /* The sample information is there (either because the file is not fragmented and this is not the last sample,\n\t\t\t\tor because the file is fragmented and the moof for that sample has been received */ Log.debug(\"ISOFile\", \"Creating media fragment on track #\" + fragTrak.id + \" for sample \" + trak.nextSample);\n                    var result = this.createFragment(fragTrak.id, trak.nextSample, fragTrak.segmentStream);\n                    if (result) {\n                        fragTrak.segmentStream = result;\n                        trak.nextSample++;\n                    } else {\n                        break;\n                    }\n                    /* A fragment is created by sample, but the segment is the accumulation in the buffer of these fragments.\n\t\t\t\t   It is flushed only as requested by the application (nb_samples) to avoid too many callbacks */ if (trak.nextSample % fragTrak.nb_samples === 0 || last || trak.nextSample >= trak.samples.length) {\n                        Log.info(\"ISOFile\", \"Sending fragmented data on track #\" + fragTrak.id + \" for samples [\" + Math.max(0, trak.nextSample - fragTrak.nb_samples) + \",\" + (trak.nextSample - 1) + \"]\");\n                        Log.info(\"ISOFile\", \"Sample data size in memory: \" + this.getAllocatedSampleDataSize());\n                        if (this.onSegment) {\n                            this.onSegment(fragTrak.id, fragTrak.user, fragTrak.segmentStream.buffer, trak.nextSample, last || trak.nextSample >= trak.samples.length);\n                        }\n                        /* force the creation of a new buffer */ fragTrak.segmentStream = null;\n                        if (fragTrak !== this.fragmentedTracks[i]) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (this.onSamples !== null) {\n            /* For each track marked for data export,\n\t\t   check if the next sample is there (i.e. has been downloaded) and send it */ for(i = 0; i < this.extractedTracks.length; i++){\n                var extractTrak = this.extractedTracks[i];\n                trak = extractTrak.trak;\n                while(trak.nextSample < trak.samples.length && this.sampleProcessingStarted){\n                    Log.debug(\"ISOFile\", \"Exporting on track #\" + extractTrak.id + \" sample #\" + trak.nextSample);\n                    var sample = this.getSample(trak, trak.nextSample);\n                    if (sample) {\n                        trak.nextSample++;\n                        extractTrak.samples.push(sample);\n                    } else {\n                        break;\n                    }\n                    if (trak.nextSample % extractTrak.nb_samples === 0 || trak.nextSample >= trak.samples.length) {\n                        Log.debug(\"ISOFile\", \"Sending samples on track #\" + extractTrak.id + \" for sample \" + trak.nextSample);\n                        if (this.onSamples) {\n                            this.onSamples(extractTrak.id, extractTrak.user, extractTrak.samples);\n                        }\n                        extractTrak.samples = [];\n                        if (extractTrak !== this.extractedTracks[i]) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /* Find and return specific boxes using recursion and early return */ ISOFile.prototype.getBox = function(type) {\n        var result = this.getBoxes(type, true);\n        return result.length ? result[0] : null;\n    };\n    ISOFile.prototype.getBoxes = function(type, returnEarly) {\n        var result = [];\n        ISOFile._sweep.call(this, type, result, returnEarly);\n        return result;\n    };\n    ISOFile._sweep = function(type, result, returnEarly) {\n        if (this.type && this.type == type) result.push(this);\n        for(var box1 in this.boxes){\n            if (result.length && returnEarly) return;\n            ISOFile._sweep.call(this.boxes[box1], type, result, returnEarly);\n        }\n    };\n    ISOFile.prototype.getTrackSamplesInfo = function(track_id) {\n        var track = this.getTrackById(track_id);\n        if (track) {\n            return track.samples;\n        } else {\n            return;\n        }\n    };\n    ISOFile.prototype.getTrackSample = function(track_id, number) {\n        var track = this.getTrackById(track_id);\n        var sample = this.getSample(track, number);\n        return sample;\n    };\n    /* Called by the application to release the resources associated to samples already forwarded to the application */ ISOFile.prototype.releaseUsedSamples = function(id, sampleNum) {\n        var size = 0;\n        var trak = this.getTrackById(id);\n        if (!trak.lastValidSample) trak.lastValidSample = 0;\n        for(var i = trak.lastValidSample; i < sampleNum; i++){\n            size += this.releaseSample(trak, i);\n        }\n        Log.info(\"ISOFile\", \"Track #\" + id + \" released samples up to \" + sampleNum + \" (released size: \" + size + \", remaining: \" + this.samplesDataSize + \")\");\n        trak.lastValidSample = sampleNum;\n    };\n    ISOFile.prototype.start = function() {\n        this.sampleProcessingStarted = true;\n        this.processSamples(false);\n    };\n    ISOFile.prototype.stop = function() {\n        this.sampleProcessingStarted = false;\n    };\n    /* Called by the application to flush the remaining samples (e.g. once the download is finished or when no more samples will be added) */ ISOFile.prototype.flush = function() {\n        Log.info(\"ISOFile\", \"Flushing remaining samples\");\n        this.updateSampleLists();\n        this.processSamples(true);\n        this.stream.cleanBuffers();\n        this.stream.logBufferLevel(true);\n    };\n    /* Finds the byte offset for a given time on a given track\n   also returns the time of the previous rap */ ISOFile.prototype.seekTrack = function(time, useRap, trak) {\n        var j;\n        var sample;\n        var seek_offset = Infinity;\n        var rap_seek_sample_num = 0;\n        var seek_sample_num = 0;\n        var timescale;\n        if (trak.samples.length === 0) {\n            Log.info(\"ISOFile\", \"No sample in track, cannot seek! Using time \" + Log.getDurationString(0, 1) + \" and offset: \" + 0);\n            return {\n                offset: 0,\n                time: 0\n            };\n        }\n        for(j = 0; j < trak.samples.length; j++){\n            sample = trak.samples[j];\n            if (j === 0) {\n                seek_sample_num = 0;\n                timescale = sample.timescale;\n            } else if (sample.cts > time * sample.timescale) {\n                seek_sample_num = j - 1;\n                break;\n            }\n            if (useRap && sample.is_sync) {\n                rap_seek_sample_num = j;\n            }\n        }\n        if (useRap) {\n            seek_sample_num = rap_seek_sample_num;\n        }\n        time = trak.samples[seek_sample_num].cts;\n        trak.nextSample = seek_sample_num;\n        while(trak.samples[seek_sample_num].alreadyRead === trak.samples[seek_sample_num].size){\n            // No remaining samples to look for, all are downloaded.\n            if (!trak.samples[seek_sample_num + 1]) {\n                break;\n            }\n            seek_sample_num++;\n        }\n        seek_offset = trak.samples[seek_sample_num].offset + trak.samples[seek_sample_num].alreadyRead;\n        Log.info(\"ISOFile\", \"Seeking to \" + (useRap ? \"RAP\" : \"\") + \" sample #\" + trak.nextSample + \" on track \" + trak.tkhd.track_id + \", time \" + Log.getDurationString(time, timescale) + \" and offset: \" + seek_offset);\n        return {\n            offset: seek_offset,\n            time: time / timescale\n        };\n    };\n    /* Finds the byte offset in the file corresponding to the given time or to the time of the previous RAP */ ISOFile.prototype.seek = function(time, useRap) {\n        var moov = this.moov;\n        var trak;\n        var trak_seek_info;\n        var i;\n        var seek_info = {\n            offset: Infinity,\n            time: Infinity\n        };\n        if (!this.moov) {\n            throw \"Cannot seek: moov not received!\";\n        } else {\n            for(i = 0; i < moov.traks.length; i++){\n                trak = moov.traks[i];\n                trak_seek_info = this.seekTrack(time, useRap, trak);\n                if (trak_seek_info.offset < seek_info.offset) {\n                    seek_info.offset = trak_seek_info.offset;\n                }\n                if (trak_seek_info.time < seek_info.time) {\n                    seek_info.time = trak_seek_info.time;\n                }\n            }\n            Log.info(\"ISOFile\", \"Seeking at time \" + Log.getDurationString(seek_info.time, 1) + \" needs a buffer with a fileStart position of \" + seek_info.offset);\n            if (seek_info.offset === Infinity) {\n                /* No sample info, in all tracks, cannot seek */ seek_info = {\n                    offset: this.nextParsePosition,\n                    time: 0\n                };\n            } else {\n                /* check if the seek position is already in some buffer and\n\t\t\t in that case return the end of that buffer (or of the last contiguous buffer) */ /* TODO: Should wait until append operations are done */ seek_info.offset = this.stream.getEndFilePositionAfter(seek_info.offset);\n            }\n            Log.info(\"ISOFile\", \"Adjusted seek position (after checking data already in buffer): \" + seek_info.offset);\n            return seek_info;\n        }\n    };\n    ISOFile.prototype.equal = function(b) {\n        var box_index = 0;\n        while(box_index < this.boxes.length && box_index < b.boxes.length){\n            var a_box = this.boxes[box_index];\n            var b_box = b.boxes[box_index];\n            if (!BoxParser.boxEqual(a_box, b_box)) {\n                return false;\n            }\n            box_index++;\n        }\n        return true;\n    };\n    {\n        exports.ISOFile = ISOFile;\n    }\n    // file:src/isofile-advanced-parsing.js\n    /* position in the current buffer of the beginning of the last box parsed */ ISOFile.prototype.lastBoxStartPosition = 0;\n    /* indicator if the parsing is stuck in the middle of an mdat box */ ISOFile.prototype.parsingMdat = null;\n    /* next file position that the parser needs:\n    - 0 until the first buffer (i.e. fileStart ===0) has been received \n    - otherwise, the next box start until the moov box has been parsed\n    - otherwise, the position of the next sample to fetch\n */ ISOFile.prototype.nextParsePosition = 0;\n    /* keep mdat data */ ISOFile.prototype.discardMdatData = false;\n    ISOFile.prototype.processIncompleteBox = function(ret1) {\n        var box1;\n        var merged;\n        var found;\n        /* we did not have enough bytes in the current buffer to parse the entire box */ if (ret1.type === \"mdat\") {\n            /* we had enough bytes to get its type and size and it's an 'mdat' */ /* special handling for mdat boxes, since we don't actually need to parse it linearly \n\t\t   we create the box */ box1 = new BoxParser[ret1.type + \"Box\"](ret1.size);\n            this.parsingMdat = box1;\n            this.boxes.push(box1);\n            this.mdats.push(box1);\n            box1.start = ret1.start;\n            box1.hdr_size = ret1.hdr_size;\n            this.stream.addUsedBytes(box1.hdr_size);\n            /* indicate that the parsing should start from the end of the box */ this.lastBoxStartPosition = box1.start + box1.size;\n            /* let's see if we have the end of the box in the other buffers */ found = this.stream.seek(box1.start + box1.size, false, this.discardMdatData);\n            if (found) {\n                /* found the end of the box */ this.parsingMdat = null;\n                /* let's see if we can parse more in this buffer */ return true;\n            } else {\n                /* 'mdat' end not found in the existing buffers */ /* determine the next position in the file to start parsing from */ if (!this.moovStartFound) {\n                    /* moov not find yet, \n\t\t\t\t   the file probably has 'mdat' at the beginning, and 'moov' at the end, \n\t\t\t\t   indicate that the downloader should not try to download those bytes now */ this.nextParsePosition = box1.start + box1.size;\n                } else {\n                    /* we have the start of the moov box, \n\t\t\t\t   the next bytes should try to complete the current 'mdat' */ this.nextParsePosition = this.stream.findEndContiguousBuf();\n                }\n                /* not much we can do, wait for more buffers to arrive */ return false;\n            }\n        } else {\n            /* box is incomplete, we may not even know its type */ if (ret1.type === \"moov\") {\n                /* the incomplete box is a 'moov' box */ this.moovStartFound = true;\n                if (this.mdats.length === 0) {\n                    this.isProgressive = true;\n                }\n            }\n            /* either it's not an mdat box (and we need to parse it, we cannot skip it)\n\t\t   (TODO: we could skip 'free' boxes ...)\n\t\t\t   or we did not have enough data to parse the type and size of the box, \n\t\t   we try to concatenate the current buffer with the next buffer to restart parsing */ merged = this.stream.mergeNextBuffer ? this.stream.mergeNextBuffer() : false;\n            if (merged) {\n                /* The next buffer was contiguous, the merging succeeded,\n\t\t\t   we can now continue parsing, \n\t\t\t   the next best position to parse is at the end of this new buffer */ this.nextParsePosition = this.stream.getEndPosition();\n                return true;\n            } else {\n                /* we cannot concatenate existing buffers because they are not contiguous or because there is no additional buffer */ /* The next best position to parse is still at the end of this old buffer */ if (!ret1.type) {\n                    /* There were not enough bytes in the buffer to parse the box type and length,\n\t\t\t\t   the next fetch should retrieve those missing bytes, i.e. the next bytes after this buffer */ this.nextParsePosition = this.stream.getEndPosition();\n                } else {\n                    /* we had enough bytes to parse size and type of the incomplete box\n\t\t\t\t   if we haven't found yet the moov box, skip this one and try the next one \n\t\t\t\t   if we have found the moov box, let's continue linear parsing */ if (this.moovStartFound) {\n                        this.nextParsePosition = this.stream.getEndPosition();\n                    } else {\n                        this.nextParsePosition = this.stream.getPosition() + ret1.size;\n                    }\n                }\n                return false;\n            }\n        }\n    };\n    ISOFile.prototype.hasIncompleteMdat = function() {\n        return this.parsingMdat !== null;\n    };\n    ISOFile.prototype.processIncompleteMdat = function() {\n        var box1;\n        var found;\n        /* we are in the parsing of an incomplete mdat box */ box1 = this.parsingMdat;\n        found = this.stream.seek(box1.start + box1.size, false, this.discardMdatData);\n        if (found) {\n            Log.debug(\"ISOFile\", \"Found 'mdat' end in buffered data\");\n            /* the end of the mdat has been found */ this.parsingMdat = null;\n            /* we can parse more in this buffer */ return true;\n        } else {\n            /* we don't have the end of this mdat yet, \n\t\t   indicate that the next byte to fetch is the end of the buffers we have so far, \n\t\t   return and wait for more buffer to come */ this.nextParsePosition = this.stream.findEndContiguousBuf();\n            return false;\n        }\n    };\n    ISOFile.prototype.restoreParsePosition = function() {\n        /* Reposition at the start position of the previous box not entirely parsed */ return this.stream.seek(this.lastBoxStartPosition, true, this.discardMdatData);\n    };\n    ISOFile.prototype.saveParsePosition = function() {\n        /* remember the position of the box start in case we need to roll back (if the box is incomplete) */ this.lastBoxStartPosition = this.stream.getPosition();\n    };\n    ISOFile.prototype.updateUsedBytes = function(box1, ret1) {\n        if (this.stream.addUsedBytes) {\n            if (box1.type === \"mdat\") {\n                /* for an mdat box, only its header is considered used, other bytes will be used when sample data is requested */ this.stream.addUsedBytes(box1.hdr_size);\n                if (this.discardMdatData) {\n                    this.stream.addUsedBytes(box1.size - box1.hdr_size);\n                }\n            } else {\n                /* for all other boxes, the entire box data is considered used */ this.stream.addUsedBytes(box1.size);\n            }\n        }\n    };\n    // file:src/isofile-advanced-creation.js\n    ISOFile.prototype.add = BoxParser.Box.prototype.add;\n    ISOFile.prototype.addBox = BoxParser.Box.prototype.addBox;\n    ISOFile.prototype.init = function(_options) {\n        var options = _options || {};\n        this.add(\"ftyp\").set(\"major_brand\", options.brands && options.brands[0] || \"iso4\").set(\"minor_version\", 0).set(\"compatible_brands\", options.brands || [\n            \"iso4\"\n        ]);\n        var moov = this.add(\"moov\");\n        moov.add(\"mvhd\").set(\"timescale\", options.timescale || 600).set(\"rate\", options.rate || 1 << 16).set(\"creation_time\", 0).set(\"modification_time\", 0).set(\"duration\", options.duration || 0).set(\"volume\", options.width ? 0 : 0x0100).set(\"matrix\", [\n            1 << 16,\n            0,\n            0,\n            0,\n            1 << 16,\n            0,\n            0,\n            0,\n            0x40000000\n        ]).set(\"next_track_id\", 1);\n        moov.add(\"mvex\");\n        return this;\n    };\n    ISOFile.prototype.addTrack = function(_options) {\n        if (!this.moov) {\n            this.init(_options);\n        }\n        var options = _options || {};\n        options.width = options.width || 320;\n        options.height = options.height || 320;\n        options.id = options.id || this.moov.mvhd.next_track_id;\n        options.type = options.type || \"avc1\";\n        var trak = this.moov.add(\"trak\");\n        this.moov.mvhd.next_track_id = options.id + 1;\n        trak.add(\"tkhd\").set(\"flags\", BoxParser.TKHD_FLAG_ENABLED | BoxParser.TKHD_FLAG_IN_MOVIE | BoxParser.TKHD_FLAG_IN_PREVIEW).set(\"creation_time\", 0).set(\"modification_time\", 0).set(\"track_id\", options.id).set(\"duration\", options.duration || 0).set(\"layer\", options.layer || 0).set(\"alternate_group\", 0).set(\"volume\", 1).set(\"matrix\", [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ]).set(\"width\", options.width).set(\"height\", options.height);\n        var mdia = trak.add(\"mdia\");\n        mdia.add(\"mdhd\").set(\"creation_time\", 0).set(\"modification_time\", 0).set(\"timescale\", options.timescale || 1).set(\"duration\", options.media_duration || 0).set(\"language\", options.language || \"und\");\n        mdia.add(\"hdlr\").set(\"handler\", options.hdlr || \"vide\").set(\"name\", options.name || \"Track created with MP4Box.js\");\n        mdia.add(\"elng\").set(\"extended_language\", options.language || \"fr-FR\");\n        var minf = mdia.add(\"minf\");\n        if (BoxParser[options.type + \"SampleEntry\"] === undefined) return;\n        var sample_description_entry = new BoxParser[options.type + \"SampleEntry\"]();\n        sample_description_entry.data_reference_index = 1;\n        var media_type = \"\";\n        for(var mediaType in BoxParser.sampleEntryCodes){\n            var codes = BoxParser.sampleEntryCodes[mediaType];\n            for(var i = 0; i < codes.length; i++){\n                if (codes.indexOf(options.type) > -1) {\n                    media_type = mediaType;\n                    break;\n                }\n            }\n        }\n        switch(media_type){\n            case \"Visual\":\n                minf.add(\"vmhd\").set(\"graphicsmode\", 0).set(\"opcolor\", [\n                    0,\n                    0,\n                    0\n                ]);\n                sample_description_entry.set(\"width\", options.width).set(\"height\", options.height).set(\"horizresolution\", 0x48 << 16).set(\"vertresolution\", 0x48 << 16).set(\"frame_count\", 1).set(\"compressorname\", options.type + \" Compressor\").set(\"depth\", 0x18);\n                if (options.avcDecoderConfigRecord) {\n                    var avcC = new BoxParser.avcCBox();\n                    var stream = new MP4BoxStream(options.avcDecoderConfigRecord);\n                    avcC.parse(stream);\n                    sample_description_entry.addBox(avcC);\n                }\n                break;\n            case \"Audio\":\n                minf.add(\"smhd\").set(\"balance\", options.balance || 0);\n                sample_description_entry.set(\"channel_count\", options.channel_count || 2).set(\"samplesize\", options.samplesize || 16).set(\"samplerate\", options.samplerate || 1 << 16);\n                break;\n            case \"Hint\":\n                minf.add(\"hmhd\"); // TODO: add properties\n                break;\n            case \"Subtitle\":\n                minf.add(\"sthd\");\n                switch(options.type){\n                    case \"stpp\":\n                        sample_description_entry.set(\"namespace\", options.namespace || \"nonamespace\").set(\"schema_location\", options.schema_location || \"\").set(\"auxiliary_mime_types\", options.auxiliary_mime_types || \"\");\n                        break;\n                }\n                break;\n            case \"Metadata\":\n                minf.add(\"nmhd\");\n                break;\n            case \"System\":\n                minf.add(\"nmhd\");\n                break;\n            default:\n                minf.add(\"nmhd\");\n                break;\n        }\n        if (options.description) {\n            sample_description_entry.addBox(options.description);\n        }\n        if (options.description_boxes) {\n            options.description_boxes.forEach(function(b) {\n                sample_description_entry.addBox(b);\n            });\n        }\n        minf.add(\"dinf\").add(\"dref\").addEntry(new BoxParser[\"url Box\"]().set(\"flags\", 0x1));\n        var stbl = minf.add(\"stbl\");\n        stbl.add(\"stsd\").addEntry(sample_description_entry);\n        stbl.add(\"stts\").set(\"sample_counts\", []).set(\"sample_deltas\", []);\n        stbl.add(\"stsc\").set(\"first_chunk\", []).set(\"samples_per_chunk\", []).set(\"sample_description_index\", []);\n        stbl.add(\"stco\").set(\"chunk_offsets\", []);\n        stbl.add(\"stsz\").set(\"sample_sizes\", []);\n        this.moov.mvex.add(\"trex\").set(\"track_id\", options.id).set(\"default_sample_description_index\", options.default_sample_description_index || 1).set(\"default_sample_duration\", options.default_sample_duration || 0).set(\"default_sample_size\", options.default_sample_size || 0).set(\"default_sample_flags\", options.default_sample_flags || 0);\n        this.buildTrakSampleLists(trak);\n        return options.id;\n    };\n    BoxParser.Box.prototype.computeSize = function(stream_) {\n        var stream = stream_ || new DataStream();\n        stream.endianness = DataStream.BIG_ENDIAN;\n        this.write(stream);\n    };\n    ISOFile.prototype.addSample = function(track_id, data, _options) {\n        var options = _options || {};\n        var sample = {};\n        var trak = this.getTrackById(track_id);\n        if (trak === null) return;\n        sample.number = trak.samples.length;\n        sample.track_id = trak.tkhd.track_id;\n        sample.timescale = trak.mdia.mdhd.timescale;\n        sample.description_index = options.sample_description_index ? options.sample_description_index - 1 : 0;\n        sample.description = trak.mdia.minf.stbl.stsd.entries[sample.description_index];\n        sample.data = data;\n        sample.size = data.byteLength;\n        sample.alreadyRead = sample.size;\n        sample.duration = options.duration || 1;\n        sample.cts = options.cts || 0;\n        sample.dts = options.dts || 0;\n        sample.is_sync = options.is_sync || false;\n        sample.is_leading = options.is_leading || 0;\n        sample.depends_on = options.depends_on || 0;\n        sample.is_depended_on = options.is_depended_on || 0;\n        sample.has_redundancy = options.has_redundancy || 0;\n        sample.degradation_priority = options.degradation_priority || 0;\n        sample.offset = 0;\n        sample.subsamples = options.subsamples;\n        trak.samples.push(sample);\n        trak.samples_size += sample.size;\n        trak.samples_duration += sample.duration;\n        if (!trak.first_dts) {\n            trak.first_dts = options.dts;\n        }\n        this.processSamples();\n        var moof = this.createSingleSampleMoof(sample);\n        this.addBox(moof);\n        moof.computeSize();\n        /* adjusting the data_offset now that the moof size is known*/ moof.trafs[0].truns[0].data_offset = moof.size + 8; //8 is mdat header\n        this.add(\"mdat\").data = new Uint8Array(data);\n        return sample;\n    };\n    ISOFile.prototype.createSingleSampleMoof = function(sample) {\n        var sample_flags = 0;\n        if (sample.is_sync) sample_flags = 1 << 25; // sample_depends_on_none (I picture)\n        else sample_flags = 1 << 16; // non-sync\n        var moof = new BoxParser.moofBox();\n        moof.add(\"mfhd\").set(\"sequence_number\", this.nextMoofNumber);\n        this.nextMoofNumber++;\n        var traf = moof.add(\"traf\");\n        var trak = this.getTrackById(sample.track_id);\n        traf.add(\"tfhd\").set(\"track_id\", sample.track_id).set(\"flags\", BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF);\n        traf.add(\"tfdt\").set(\"baseMediaDecodeTime\", sample.dts - trak.first_dts);\n        traf.add(\"trun\").set(\"flags\", BoxParser.TRUN_FLAGS_DATA_OFFSET | BoxParser.TRUN_FLAGS_DURATION | BoxParser.TRUN_FLAGS_SIZE | BoxParser.TRUN_FLAGS_FLAGS | BoxParser.TRUN_FLAGS_CTS_OFFSET).set(\"data_offset\", 0).set(\"first_sample_flags\", 0).set(\"sample_count\", 1).set(\"sample_duration\", [\n            sample.duration\n        ]).set(\"sample_size\", [\n            sample.size\n        ]).set(\"sample_flags\", [\n            sample_flags\n        ]).set(\"sample_composition_time_offset\", [\n            sample.cts - sample.dts\n        ]);\n        return moof;\n    };\n    // file:src/isofile-sample-processing.js\n    /* Index of the last moof box received */ ISOFile.prototype.lastMoofIndex = 0;\n    /* size of the buffers allocated for samples */ ISOFile.prototype.samplesDataSize = 0;\n    /* Resets all sample tables */ ISOFile.prototype.resetTables = function() {\n        var i;\n        var trak, stco, stsc, stsz, stts, ctts, stss;\n        this.initial_duration = this.moov.mvhd.duration;\n        this.moov.mvhd.duration = 0;\n        for(i = 0; i < this.moov.traks.length; i++){\n            trak = this.moov.traks[i];\n            trak.tkhd.duration = 0;\n            trak.mdia.mdhd.duration = 0;\n            stco = trak.mdia.minf.stbl.stco || trak.mdia.minf.stbl.co64;\n            stco.chunk_offsets = [];\n            stsc = trak.mdia.minf.stbl.stsc;\n            stsc.first_chunk = [];\n            stsc.samples_per_chunk = [];\n            stsc.sample_description_index = [];\n            stsz = trak.mdia.minf.stbl.stsz || trak.mdia.minf.stbl.stz2;\n            stsz.sample_sizes = [];\n            stts = trak.mdia.minf.stbl.stts;\n            stts.sample_counts = [];\n            stts.sample_deltas = [];\n            ctts = trak.mdia.minf.stbl.ctts;\n            if (ctts) {\n                ctts.sample_counts = [];\n                ctts.sample_offsets = [];\n            }\n            stss = trak.mdia.minf.stbl.stss;\n            var k = trak.mdia.minf.stbl.boxes.indexOf(stss);\n            if (k != -1) trak.mdia.minf.stbl.boxes[k] = null;\n        }\n    };\n    ISOFile.initSampleGroups = function(trak, traf, sbgps, trak_sgpds, traf_sgpds) {\n        var l;\n        var k;\n        var sample_group_info;\n        var sample_group_key;\n        function SampleGroupInfo(_type, _parameter, _sbgp) {\n            this.grouping_type = _type;\n            this.grouping_type_parameter = _parameter;\n            this.sbgp = _sbgp;\n            this.last_sample_in_run = -1;\n            this.entry_index = -1;\n        }\n        if (traf) {\n            traf.sample_groups_info = [];\n        }\n        if (!trak.sample_groups_info) {\n            trak.sample_groups_info = [];\n        }\n        for(k = 0; k < sbgps.length; k++){\n            sample_group_key = sbgps[k].grouping_type + \"/\" + sbgps[k].grouping_type_parameter;\n            sample_group_info = new SampleGroupInfo(sbgps[k].grouping_type, sbgps[k].grouping_type_parameter, sbgps[k]);\n            if (traf) {\n                traf.sample_groups_info[sample_group_key] = sample_group_info;\n            }\n            if (!trak.sample_groups_info[sample_group_key]) {\n                trak.sample_groups_info[sample_group_key] = sample_group_info;\n            }\n            for(l = 0; l < trak_sgpds.length; l++){\n                if (trak_sgpds[l].grouping_type === sbgps[k].grouping_type) {\n                    sample_group_info.description = trak_sgpds[l];\n                    sample_group_info.description.used = true;\n                }\n            }\n            if (traf_sgpds) {\n                for(l = 0; l < traf_sgpds.length; l++){\n                    if (traf_sgpds[l].grouping_type === sbgps[k].grouping_type) {\n                        sample_group_info.fragment_description = traf_sgpds[l];\n                        sample_group_info.fragment_description.used = true;\n                        sample_group_info.is_fragment = true;\n                    }\n                }\n            }\n        }\n        if (!traf) {\n            for(k = 0; k < trak_sgpds.length; k++){\n                if (!trak_sgpds[k].used && trak_sgpds[k].version >= 2) {\n                    sample_group_key = trak_sgpds[k].grouping_type + \"/0\";\n                    sample_group_info = new SampleGroupInfo(trak_sgpds[k].grouping_type, 0);\n                    if (!trak.sample_groups_info[sample_group_key]) {\n                        trak.sample_groups_info[sample_group_key] = sample_group_info;\n                    }\n                }\n            }\n        } else {\n            if (traf_sgpds) {\n                for(k = 0; k < traf_sgpds.length; k++){\n                    if (!traf_sgpds[k].used && traf_sgpds[k].version >= 2) {\n                        sample_group_key = traf_sgpds[k].grouping_type + \"/0\";\n                        sample_group_info = new SampleGroupInfo(traf_sgpds[k].grouping_type, 0);\n                        sample_group_info.is_fragment = true;\n                        if (!traf.sample_groups_info[sample_group_key]) {\n                            traf.sample_groups_info[sample_group_key] = sample_group_info;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    ISOFile.setSampleGroupProperties = function(trak, sample, sample_number, sample_groups_info) {\n        var k;\n        var index;\n        sample.sample_groups = [];\n        for(k in sample_groups_info){\n            sample.sample_groups[k] = {};\n            sample.sample_groups[k].grouping_type = sample_groups_info[k].grouping_type;\n            sample.sample_groups[k].grouping_type_parameter = sample_groups_info[k].grouping_type_parameter;\n            if (sample_number >= sample_groups_info[k].last_sample_in_run) {\n                if (sample_groups_info[k].last_sample_in_run < 0) {\n                    sample_groups_info[k].last_sample_in_run = 0;\n                }\n                sample_groups_info[k].entry_index++;\n                if (sample_groups_info[k].entry_index <= sample_groups_info[k].sbgp.entries.length - 1) {\n                    sample_groups_info[k].last_sample_in_run += sample_groups_info[k].sbgp.entries[sample_groups_info[k].entry_index].sample_count;\n                }\n            }\n            if (sample_groups_info[k].entry_index <= sample_groups_info[k].sbgp.entries.length - 1) {\n                sample.sample_groups[k].group_description_index = sample_groups_info[k].sbgp.entries[sample_groups_info[k].entry_index].group_description_index;\n            } else {\n                sample.sample_groups[k].group_description_index = -1; // special value for not defined\n            }\n            if (sample.sample_groups[k].group_description_index !== 0) {\n                var description;\n                if (sample_groups_info[k].fragment_description) {\n                    description = sample_groups_info[k].fragment_description;\n                } else {\n                    description = sample_groups_info[k].description;\n                }\n                if (sample.sample_groups[k].group_description_index > 0) {\n                    if (sample.sample_groups[k].group_description_index > 65535) {\n                        index = (sample.sample_groups[k].group_description_index >> 16) - 1;\n                    } else {\n                        index = sample.sample_groups[k].group_description_index - 1;\n                    }\n                    if (description && index >= 0) {\n                        sample.sample_groups[k].description = description.entries[index];\n                    }\n                } else {\n                    if (description && description.version >= 2) {\n                        if (description.default_group_description_index > 0) {\n                            sample.sample_groups[k].description = description.entries[description.default_group_description_index - 1];\n                        }\n                    }\n                }\n            }\n        }\n    };\n    ISOFile.process_sdtp = function(sdtp, sample, number) {\n        if (!sample) {\n            return;\n        }\n        if (sdtp) {\n            sample.is_leading = sdtp.is_leading[number];\n            sample.depends_on = sdtp.sample_depends_on[number];\n            sample.is_depended_on = sdtp.sample_is_depended_on[number];\n            sample.has_redundancy = sdtp.sample_has_redundancy[number];\n        } else {\n            sample.is_leading = 0;\n            sample.depends_on = 0;\n            sample.is_depended_on = 0;\n            sample.has_redundancy = 0;\n        }\n    };\n    /* Build initial sample list from  sample tables */ ISOFile.prototype.buildSampleLists = function() {\n        var i;\n        var trak;\n        for(i = 0; i < this.moov.traks.length; i++){\n            trak = this.moov.traks[i];\n            this.buildTrakSampleLists(trak);\n        }\n    };\n    ISOFile.prototype.buildTrakSampleLists = function(trak) {\n        var j;\n        var stco, stsc, stsz, stts, ctts, stss, stsd, subs, sbgps, sgpds, stdp;\n        var chunk_run_index, chunk_index, last_chunk_in_run, offset_in_chunk, last_sample_in_chunk;\n        var last_sample_in_stts_run, stts_run_index, last_sample_in_ctts_run, ctts_run_index, last_stss_index, subs_entry_index, last_subs_sample_index;\n        trak.samples = [];\n        trak.samples_duration = 0;\n        trak.samples_size = 0;\n        stco = trak.mdia.minf.stbl.stco || trak.mdia.minf.stbl.co64;\n        stsc = trak.mdia.minf.stbl.stsc;\n        stsz = trak.mdia.minf.stbl.stsz || trak.mdia.minf.stbl.stz2;\n        stts = trak.mdia.minf.stbl.stts;\n        ctts = trak.mdia.minf.stbl.ctts;\n        stss = trak.mdia.minf.stbl.stss;\n        stsd = trak.mdia.minf.stbl.stsd;\n        subs = trak.mdia.minf.stbl.subs;\n        stdp = trak.mdia.minf.stbl.stdp;\n        sbgps = trak.mdia.minf.stbl.sbgps;\n        sgpds = trak.mdia.minf.stbl.sgpds;\n        last_sample_in_stts_run = -1;\n        stts_run_index = -1;\n        last_sample_in_ctts_run = -1;\n        ctts_run_index = -1;\n        last_stss_index = 0;\n        subs_entry_index = 0;\n        last_subs_sample_index = 0;\n        ISOFile.initSampleGroups(trak, null, sbgps, sgpds);\n        if (typeof stsz === \"undefined\") {\n            return;\n        }\n        /* we build the samples one by one and compute their properties */ for(j = 0; j < stsz.sample_sizes.length; j++){\n            var sample = {};\n            sample.number = j;\n            sample.track_id = trak.tkhd.track_id;\n            sample.timescale = trak.mdia.mdhd.timescale;\n            sample.alreadyRead = 0;\n            trak.samples[j] = sample;\n            /* size can be known directly */ sample.size = stsz.sample_sizes[j];\n            trak.samples_size += sample.size;\n            /* computing chunk-based properties (offset, sample description index)*/ if (j === 0) {\n                chunk_index = 1; /* the first sample is in the first chunk (chunk indexes are 1-based) */ \n                chunk_run_index = 0; /* the first chunk is the first entry in the first_chunk table */ \n                sample.chunk_index = chunk_index;\n                sample.chunk_run_index = chunk_run_index;\n                last_sample_in_chunk = stsc.samples_per_chunk[chunk_run_index];\n                offset_in_chunk = 0;\n                /* Is there another entry in the first_chunk table ? */ if (chunk_run_index + 1 < stsc.first_chunk.length) {\n                    /* The last chunk in the run is the chunk before the next first chunk */ last_chunk_in_run = stsc.first_chunk[chunk_run_index + 1] - 1;\n                } else {\n                    /* There is only one entry in the table, it is valid for all future chunks*/ last_chunk_in_run = Infinity;\n                }\n            } else {\n                if (j < last_sample_in_chunk) {\n                    /* the sample is still in the current chunk */ sample.chunk_index = chunk_index;\n                    sample.chunk_run_index = chunk_run_index;\n                } else {\n                    /* the sample is in the next chunk */ chunk_index++;\n                    sample.chunk_index = chunk_index;\n                    /* reset the accumulated offset in the chunk */ offset_in_chunk = 0;\n                    if (chunk_index <= last_chunk_in_run) ;\n                    else {\n                        chunk_run_index++;\n                        /* Is there another entry in the first_chunk table ? */ if (chunk_run_index + 1 < stsc.first_chunk.length) {\n                            /* The last chunk in the run is the chunk before the next first chunk */ last_chunk_in_run = stsc.first_chunk[chunk_run_index + 1] - 1;\n                        } else {\n                            /* There is only one entry in the table, it is valid for all future chunks*/ last_chunk_in_run = Infinity;\n                        }\n                    }\n                    sample.chunk_run_index = chunk_run_index;\n                    last_sample_in_chunk += stsc.samples_per_chunk[chunk_run_index];\n                }\n            }\n            sample.description_index = stsc.sample_description_index[sample.chunk_run_index] - 1;\n            sample.description = stsd.entries[sample.description_index];\n            sample.offset = stco.chunk_offsets[sample.chunk_index - 1] + offset_in_chunk; /* chunk indexes are 1-based */ \n            offset_in_chunk += sample.size;\n            /* setting dts, cts, duration and rap flags */ if (j > last_sample_in_stts_run) {\n                stts_run_index++;\n                if (last_sample_in_stts_run < 0) {\n                    last_sample_in_stts_run = 0;\n                }\n                last_sample_in_stts_run += stts.sample_counts[stts_run_index];\n            }\n            if (j > 0) {\n                trak.samples[j - 1].duration = stts.sample_deltas[stts_run_index];\n                trak.samples_duration += trak.samples[j - 1].duration;\n                sample.dts = trak.samples[j - 1].dts + trak.samples[j - 1].duration;\n            } else {\n                sample.dts = 0;\n            }\n            if (ctts) {\n                if (j >= last_sample_in_ctts_run) {\n                    ctts_run_index++;\n                    if (last_sample_in_ctts_run < 0) {\n                        last_sample_in_ctts_run = 0;\n                    }\n                    last_sample_in_ctts_run += ctts.sample_counts[ctts_run_index];\n                }\n                sample.cts = trak.samples[j].dts + ctts.sample_offsets[ctts_run_index];\n            } else {\n                sample.cts = sample.dts;\n            }\n            if (stss) {\n                if (j == stss.sample_numbers[last_stss_index] - 1) {\n                    sample.is_sync = true;\n                    last_stss_index++;\n                } else {\n                    sample.is_sync = false;\n                    sample.degradation_priority = 0;\n                }\n                if (subs) {\n                    if (subs.entries[subs_entry_index].sample_delta + last_subs_sample_index == j + 1) {\n                        sample.subsamples = subs.entries[subs_entry_index].subsamples;\n                        last_subs_sample_index += subs.entries[subs_entry_index].sample_delta;\n                        subs_entry_index++;\n                    }\n                }\n            } else {\n                sample.is_sync = true;\n            }\n            ISOFile.process_sdtp(trak.mdia.minf.stbl.sdtp, sample, sample.number);\n            if (stdp) {\n                sample.degradation_priority = stdp.priority[j];\n            } else {\n                sample.degradation_priority = 0;\n            }\n            if (subs) {\n                if (subs.entries[subs_entry_index].sample_delta + last_subs_sample_index == j) {\n                    sample.subsamples = subs.entries[subs_entry_index].subsamples;\n                    last_subs_sample_index += subs.entries[subs_entry_index].sample_delta;\n                }\n            }\n            if (sbgps.length > 0 || sgpds.length > 0) {\n                ISOFile.setSampleGroupProperties(trak, sample, j, trak.sample_groups_info);\n            }\n        }\n        if (j > 0) {\n            trak.samples[j - 1].duration = Math.max(trak.mdia.mdhd.duration - trak.samples[j - 1].dts, 0);\n            trak.samples_duration += trak.samples[j - 1].duration;\n        }\n    };\n    /* Update sample list when new 'moof' boxes are received */ ISOFile.prototype.updateSampleLists = function() {\n        var i, j, k;\n        var default_sample_description_index, default_sample_duration, default_sample_size, default_sample_flags;\n        var last_run_position;\n        var box1, moof, traf, trak, trex;\n        var sample;\n        var sample_flags;\n        if (this.moov === undefined) {\n            return;\n        }\n        /* if the input file is fragmented and fetched in multiple downloads, we need to update the list of samples */ while(this.lastMoofIndex < this.moofs.length){\n            box1 = this.moofs[this.lastMoofIndex];\n            this.lastMoofIndex++;\n            if (box1.type == \"moof\") {\n                moof = box1;\n                for(i = 0; i < moof.trafs.length; i++){\n                    traf = moof.trafs[i];\n                    trak = this.getTrackById(traf.tfhd.track_id);\n                    trex = this.getTrexById(traf.tfhd.track_id);\n                    if (traf.tfhd.flags & BoxParser.TFHD_FLAG_SAMPLE_DESC) {\n                        default_sample_description_index = traf.tfhd.default_sample_description_index;\n                    } else {\n                        default_sample_description_index = trex ? trex.default_sample_description_index : 1;\n                    }\n                    if (traf.tfhd.flags & BoxParser.TFHD_FLAG_SAMPLE_DUR) {\n                        default_sample_duration = traf.tfhd.default_sample_duration;\n                    } else {\n                        default_sample_duration = trex ? trex.default_sample_duration : 0;\n                    }\n                    if (traf.tfhd.flags & BoxParser.TFHD_FLAG_SAMPLE_SIZE) {\n                        default_sample_size = traf.tfhd.default_sample_size;\n                    } else {\n                        default_sample_size = trex ? trex.default_sample_size : 0;\n                    }\n                    if (traf.tfhd.flags & BoxParser.TFHD_FLAG_SAMPLE_FLAGS) {\n                        default_sample_flags = traf.tfhd.default_sample_flags;\n                    } else {\n                        default_sample_flags = trex ? trex.default_sample_flags : 0;\n                    }\n                    traf.sample_number = 0;\n                    /* process sample groups */ if (traf.sbgps.length > 0) {\n                        ISOFile.initSampleGroups(trak, traf, traf.sbgps, trak.mdia.minf.stbl.sgpds, traf.sgpds);\n                    }\n                    for(j = 0; j < traf.truns.length; j++){\n                        var trun = traf.truns[j];\n                        for(k = 0; k < trun.sample_count; k++){\n                            sample = {};\n                            sample.moof_number = this.lastMoofIndex;\n                            sample.number_in_traf = traf.sample_number;\n                            traf.sample_number++;\n                            sample.number = trak.samples.length;\n                            traf.first_sample_index = trak.samples.length;\n                            trak.samples.push(sample);\n                            sample.track_id = trak.tkhd.track_id;\n                            sample.timescale = trak.mdia.mdhd.timescale;\n                            sample.description_index = default_sample_description_index - 1;\n                            sample.description = trak.mdia.minf.stbl.stsd.entries[sample.description_index];\n                            sample.size = default_sample_size;\n                            if (trun.flags & BoxParser.TRUN_FLAGS_SIZE) {\n                                sample.size = trun.sample_size[k];\n                            }\n                            trak.samples_size += sample.size;\n                            sample.duration = default_sample_duration;\n                            if (trun.flags & BoxParser.TRUN_FLAGS_DURATION) {\n                                sample.duration = trun.sample_duration[k];\n                            }\n                            trak.samples_duration += sample.duration;\n                            if (trak.first_traf_merged || k > 0) {\n                                sample.dts = trak.samples[trak.samples.length - 2].dts + trak.samples[trak.samples.length - 2].duration;\n                            } else {\n                                if (traf.tfdt) {\n                                    sample.dts = traf.tfdt.baseMediaDecodeTime;\n                                } else {\n                                    sample.dts = 0;\n                                }\n                                trak.first_traf_merged = true;\n                            }\n                            sample.cts = sample.dts;\n                            if (trun.flags & BoxParser.TRUN_FLAGS_CTS_OFFSET) {\n                                sample.cts = sample.dts + trun.sample_composition_time_offset[k];\n                            }\n                            sample_flags = default_sample_flags;\n                            if (trun.flags & BoxParser.TRUN_FLAGS_FLAGS) {\n                                sample_flags = trun.sample_flags[k];\n                            } else if (k === 0 && trun.flags & BoxParser.TRUN_FLAGS_FIRST_FLAG) {\n                                sample_flags = trun.first_sample_flags;\n                            }\n                            sample.is_sync = sample_flags >> 16 & 0x1 ? false : true;\n                            sample.is_leading = sample_flags >> 26 & 0x3;\n                            sample.depends_on = sample_flags >> 24 & 0x3;\n                            sample.is_depended_on = sample_flags >> 22 & 0x3;\n                            sample.has_redundancy = sample_flags >> 20 & 0x3;\n                            sample.degradation_priority = sample_flags & 0xFFFF;\n                            //ISOFile.process_sdtp(traf.sdtp, sample, sample.number_in_traf);\n                            var bdop = traf.tfhd.flags & BoxParser.TFHD_FLAG_BASE_DATA_OFFSET ? true : false;\n                            var dbim = traf.tfhd.flags & BoxParser.TFHD_FLAG_DEFAULT_BASE_IS_MOOF ? true : false;\n                            var dop = trun.flags & BoxParser.TRUN_FLAGS_DATA_OFFSET ? true : false;\n                            var bdo = 0;\n                            if (!bdop) {\n                                if (!dbim) {\n                                    if (j === 0) {\n                                        bdo = moof.start; // the position of the first byte of the enclosing Movie Fragment Box\n                                    } else {\n                                        bdo = last_run_position; // end of the data defined by the preceding *track* (irrespective of the track id) fragment in the moof\n                                    }\n                                } else {\n                                    bdo = moof.start;\n                                }\n                            } else {\n                                bdo = traf.tfhd.base_data_offset;\n                            }\n                            if (j === 0 && k === 0) {\n                                if (dop) {\n                                    sample.offset = bdo + trun.data_offset; // If the data-offset is present, it is relative to the base-data-offset established in the track fragment header\n                                } else {\n                                    sample.offset = bdo; // the data for this run starts the base-data-offset defined by the track fragment header\n                                }\n                            } else {\n                                sample.offset = last_run_position; // this run starts immediately after the data of the previous run\n                            }\n                            last_run_position = sample.offset + sample.size;\n                            if (traf.sbgps.length > 0 || traf.sgpds.length > 0 || trak.mdia.minf.stbl.sbgps.length > 0 || trak.mdia.minf.stbl.sgpds.length > 0) {\n                                ISOFile.setSampleGroupProperties(trak, sample, sample.number_in_traf, traf.sample_groups_info);\n                            }\n                        }\n                    }\n                    if (traf.subs) {\n                        trak.has_fragment_subsamples = true;\n                        var sample_index = traf.first_sample_index;\n                        for(j = 0; j < traf.subs.entries.length; j++){\n                            sample_index += traf.subs.entries[j].sample_delta;\n                            sample = trak.samples[sample_index - 1];\n                            sample.subsamples = traf.subs.entries[j].subsamples;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /* Try to get sample data for a given sample:\n   returns null if not found\n   returns the same sample if already requested\n */ ISOFile.prototype.getSample = function(trak, sampleNum) {\n        var buffer;\n        var sample = trak.samples[sampleNum];\n        if (!this.moov) {\n            return null;\n        }\n        if (!sample.data) {\n            /* Not yet fetched */ sample.data = new Uint8Array(sample.size);\n            sample.alreadyRead = 0;\n            this.samplesDataSize += sample.size;\n            Log.debug(\"ISOFile\", \"Allocating sample #\" + sampleNum + \" on track #\" + trak.tkhd.track_id + \" of size \" + sample.size + \" (total: \" + this.samplesDataSize + \")\");\n        } else if (sample.alreadyRead == sample.size) {\n            /* Already fetched entirely */ return sample;\n        }\n        /* The sample has only been partially fetched, we need to check in all buffers */ while(true){\n            var index = this.stream.findPosition(true, sample.offset + sample.alreadyRead, false);\n            if (index > -1) {\n                buffer = this.stream.buffers[index];\n                var lengthAfterStart = buffer.byteLength - (sample.offset + sample.alreadyRead - buffer.fileStart);\n                if (sample.size - sample.alreadyRead <= lengthAfterStart) {\n                    /* the (rest of the) sample is entirely contained in this buffer */ Log.debug(\"ISOFile\", \"Getting sample #\" + sampleNum + \" data (alreadyRead: \" + sample.alreadyRead + \" offset: \" + (sample.offset + sample.alreadyRead - buffer.fileStart) + \" read size: \" + (sample.size - sample.alreadyRead) + \" full size: \" + sample.size + \")\");\n                    DataStream.memcpy(sample.data.buffer, sample.alreadyRead, buffer, sample.offset + sample.alreadyRead - buffer.fileStart, sample.size - sample.alreadyRead);\n                    /* update the number of bytes used in this buffer and check if it needs to be removed */ buffer.usedBytes += sample.size - sample.alreadyRead;\n                    this.stream.logBufferLevel();\n                    sample.alreadyRead = sample.size;\n                    return sample;\n                } else {\n                    /* the sample does not end in this buffer */ if (lengthAfterStart === 0) return null;\n                    Log.debug(\"ISOFile\", \"Getting sample #\" + sampleNum + \" partial data (alreadyRead: \" + sample.alreadyRead + \" offset: \" + (sample.offset + sample.alreadyRead - buffer.fileStart) + \" read size: \" + lengthAfterStart + \" full size: \" + sample.size + \")\");\n                    DataStream.memcpy(sample.data.buffer, sample.alreadyRead, buffer, sample.offset + sample.alreadyRead - buffer.fileStart, lengthAfterStart);\n                    sample.alreadyRead += lengthAfterStart;\n                    /* update the number of bytes used in this buffer and check if it needs to be removed */ buffer.usedBytes += lengthAfterStart;\n                    this.stream.logBufferLevel();\n                /* keep looking in the next buffer */ }\n            } else {\n                return null;\n            }\n        }\n    };\n    /* Release the memory used to store the data of the sample */ ISOFile.prototype.releaseSample = function(trak, sampleNum) {\n        var sample = trak.samples[sampleNum];\n        if (sample.data) {\n            this.samplesDataSize -= sample.size;\n            sample.data = null;\n            sample.alreadyRead = 0;\n            return sample.size;\n        } else {\n            return 0;\n        }\n    };\n    ISOFile.prototype.getAllocatedSampleDataSize = function() {\n        return this.samplesDataSize;\n    };\n    /* Builds the MIME Type 'codecs' sub-parameters for the whole file */ ISOFile.prototype.getCodecs = function() {\n        var i;\n        var codecs = \"\";\n        for(i = 0; i < this.moov.traks.length; i++){\n            var trak = this.moov.traks[i];\n            if (i > 0) {\n                codecs += \",\";\n            }\n            codecs += trak.mdia.minf.stbl.stsd.entries[0].getCodec();\n        }\n        return codecs;\n    };\n    /* Helper function */ ISOFile.prototype.getTrexById = function(id) {\n        var i;\n        if (!this.moov || !this.moov.mvex) return null;\n        for(i = 0; i < this.moov.mvex.trexs.length; i++){\n            var trex = this.moov.mvex.trexs[i];\n            if (trex.track_id == id) return trex;\n        }\n        return null;\n    };\n    /* Helper function */ ISOFile.prototype.getTrackById = function(id) {\n        if (this.moov === undefined) {\n            return null;\n        }\n        for(var j = 0; j < this.moov.traks.length; j++){\n            var trak = this.moov.traks[j];\n            if (trak.tkhd.track_id == id) return trak;\n        }\n        return null;\n    };\n    // file:src/isofile-item-processing.js\n    ISOFile.prototype.items = [];\n    /* size of the buffers allocated for samples */ ISOFile.prototype.itemsDataSize = 0;\n    ISOFile.prototype.flattenItemInfo = function() {\n        var items = this.items;\n        var i, j;\n        var item;\n        var meta = this.meta;\n        if (meta === null || meta === undefined) return;\n        if (meta.hdlr === undefined) return;\n        if (meta.iinf === undefined) return;\n        for(i = 0; i < meta.iinf.item_infos.length; i++){\n            item = {};\n            item.id = meta.iinf.item_infos[i].item_ID;\n            items[item.id] = item;\n            item.ref_to = [];\n            item.name = meta.iinf.item_infos[i].item_name;\n            if (meta.iinf.item_infos[i].protection_index > 0) {\n                item.protection = meta.ipro.protections[meta.iinf.item_infos[i].protection_index - 1];\n            }\n            if (meta.iinf.item_infos[i].item_type) {\n                item.type = meta.iinf.item_infos[i].item_type;\n            } else {\n                item.type = \"mime\";\n            }\n            item.content_type = meta.iinf.item_infos[i].content_type;\n            item.content_encoding = meta.iinf.item_infos[i].content_encoding;\n        }\n        if (meta.iloc) {\n            for(i = 0; i < meta.iloc.items.length; i++){\n                var itemloc = meta.iloc.items[i];\n                item = items[itemloc.item_ID];\n                if (itemloc.data_reference_index !== 0) {\n                    Log.warn(\"Item storage with reference to other files: not supported\");\n                    item.source = meta.dinf.boxes[itemloc.data_reference_index - 1];\n                }\n                switch(itemloc.construction_method){\n                    case 0:\n                        break;\n                    case 1:\n                        Log.warn(\"Item storage with construction_method : not supported\");\n                        break;\n                    case 2:\n                        Log.warn(\"Item storage with construction_method : not supported\");\n                        break;\n                }\n                item.extents = [];\n                item.size = 0;\n                for(j = 0; j < itemloc.extents.length; j++){\n                    item.extents[j] = {};\n                    item.extents[j].offset = itemloc.extents[j].extent_offset + itemloc.base_offset;\n                    item.extents[j].length = itemloc.extents[j].extent_length;\n                    item.extents[j].alreadyRead = 0;\n                    item.size += item.extents[j].length;\n                }\n            }\n        }\n        if (meta.pitm) {\n            items[meta.pitm.item_id].primary = true;\n        }\n        if (meta.iref) {\n            for(i = 0; i < meta.iref.references.length; i++){\n                var ref1 = meta.iref.references[i];\n                for(j = 0; j < ref1.references.length; j++){\n                    items[ref1.from_item_ID].ref_to.push({\n                        type: ref1.type,\n                        id: ref1.references[j]\n                    });\n                }\n            }\n        }\n        if (meta.iprp) {\n            for(var k = 0; k < meta.iprp.ipmas.length; k++){\n                var ipma = meta.iprp.ipmas[k];\n                for(i = 0; i < ipma.associations.length; i++){\n                    var association = ipma.associations[i];\n                    item = items[association.id];\n                    if (item.properties === undefined) {\n                        item.properties = {};\n                        item.properties.boxes = [];\n                    }\n                    for(j = 0; j < association.props.length; j++){\n                        var propEntry = association.props[j];\n                        if (propEntry.property_index > 0 && propEntry.property_index - 1 < meta.iprp.ipco.boxes.length) {\n                            var propbox = meta.iprp.ipco.boxes[propEntry.property_index - 1];\n                            item.properties[propbox.type] = propbox;\n                            item.properties.boxes.push(propbox);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    ISOFile.prototype.getItem = function(item_id) {\n        var buffer;\n        var item;\n        if (!this.meta) {\n            return null;\n        }\n        item = this.items[item_id];\n        if (!item.data && item.size) {\n            /* Not yet fetched */ item.data = new Uint8Array(item.size);\n            item.alreadyRead = 0;\n            this.itemsDataSize += item.size;\n            Log.debug(\"ISOFile\", \"Allocating item #\" + item_id + \" of size \" + item.size + \" (total: \" + this.itemsDataSize + \")\");\n        } else if (item.alreadyRead === item.size) {\n            /* Already fetched entirely */ return item;\n        }\n        /* The item has only been partially fetched, we need to check in all buffers to find the remaining extents*/ for(var i = 0; i < item.extents.length; i++){\n            var extent = item.extents[i];\n            if (extent.alreadyRead === extent.length) {\n                continue;\n            } else {\n                var index = this.stream.findPosition(true, extent.offset + extent.alreadyRead, false);\n                if (index > -1) {\n                    buffer = this.stream.buffers[index];\n                    var lengthAfterStart = buffer.byteLength - (extent.offset + extent.alreadyRead - buffer.fileStart);\n                    if (extent.length - extent.alreadyRead <= lengthAfterStart) {\n                        /* the (rest of the) extent is entirely contained in this buffer */ Log.debug(\"ISOFile\", \"Getting item #\" + item_id + \" extent #\" + i + \" data (alreadyRead: \" + extent.alreadyRead + \" offset: \" + (extent.offset + extent.alreadyRead - buffer.fileStart) + \" read size: \" + (extent.length - extent.alreadyRead) + \" full extent size: \" + extent.length + \" full item size: \" + item.size + \")\");\n                        DataStream.memcpy(item.data.buffer, item.alreadyRead, buffer, extent.offset + extent.alreadyRead - buffer.fileStart, extent.length - extent.alreadyRead);\n                        /* update the number of bytes used in this buffer and check if it needs to be removed */ buffer.usedBytes += extent.length - extent.alreadyRead;\n                        this.stream.logBufferLevel();\n                        item.alreadyRead += extent.length - extent.alreadyRead;\n                        extent.alreadyRead = extent.length;\n                    } else {\n                        /* the sample does not end in this buffer */ Log.debug(\"ISOFile\", \"Getting item #\" + item_id + \" extent #\" + i + \" partial data (alreadyRead: \" + extent.alreadyRead + \" offset: \" + (extent.offset + extent.alreadyRead - buffer.fileStart) + \" read size: \" + lengthAfterStart + \" full extent size: \" + extent.length + \" full item size: \" + item.size + \")\");\n                        DataStream.memcpy(item.data.buffer, item.alreadyRead, buffer, extent.offset + extent.alreadyRead - buffer.fileStart, lengthAfterStart);\n                        extent.alreadyRead += lengthAfterStart;\n                        item.alreadyRead += lengthAfterStart;\n                        /* update the number of bytes used in this buffer and check if it needs to be removed */ buffer.usedBytes += lengthAfterStart;\n                        this.stream.logBufferLevel();\n                        return null;\n                    }\n                } else {\n                    return null;\n                }\n            }\n        }\n        if (item.alreadyRead === item.size) {\n            /* fetched entirely */ return item;\n        } else {\n            return null;\n        }\n    };\n    /* Release the memory used to store the data of the item */ ISOFile.prototype.releaseItem = function(item_id) {\n        var item = this.items[item_id];\n        if (item.data) {\n            this.itemsDataSize -= item.size;\n            item.data = null;\n            item.alreadyRead = 0;\n            for(var i = 0; i < item.extents.length; i++){\n                var extent = item.extents[i];\n                extent.alreadyRead = 0;\n            }\n            return item.size;\n        } else {\n            return 0;\n        }\n    };\n    ISOFile.prototype.processItems = function(callback) {\n        for(var i in this.items){\n            var item = this.items[i];\n            this.getItem(item.id);\n            if (callback && !item.sent) {\n                callback(item);\n                item.sent = true;\n                item.data = null;\n            }\n        }\n    };\n    ISOFile.prototype.hasItem = function(name) {\n        for(var i in this.items){\n            var item = this.items[i];\n            if (item.name === name) {\n                return item.id;\n            }\n        }\n        return -1;\n    };\n    ISOFile.prototype.getMetaHandler = function() {\n        if (!this.meta) {\n            return null;\n        } else {\n            return this.meta.hdlr.handler;\n        }\n    };\n    ISOFile.prototype.getPrimaryItem = function() {\n        if (!this.meta || !this.meta.pitm) {\n            return null;\n        } else {\n            return this.getItem(this.meta.pitm.item_id);\n        }\n    };\n    ISOFile.prototype.itemToFragmentedTrackFile = function(_options) {\n        var options = _options || {};\n        var item = null;\n        if (options.itemId) {\n            item = this.getItem(options.itemId);\n        } else {\n            item = this.getPrimaryItem();\n        }\n        if (item == null) return null;\n        var file = new ISOFile();\n        file.discardMdatData = false;\n        // assuming the track type is the same as the item type\n        var trackOptions = {\n            type: item.type,\n            description_boxes: item.properties.boxes\n        };\n        if (item.properties.ispe) {\n            trackOptions.width = item.properties.ispe.image_width;\n            trackOptions.height = item.properties.ispe.image_height;\n        }\n        var trackId = file.addTrack(trackOptions);\n        if (trackId) {\n            file.addSample(trackId, item.data);\n            return file;\n        } else {\n            return null;\n        }\n    };\n    // file:src/isofile-write.js\n    /* Rewrite the entire file */ ISOFile.prototype.write = function(outstream) {\n        for(var i = 0; i < this.boxes.length; i++){\n            this.boxes[i].write(outstream);\n        }\n    };\n    ISOFile.prototype.createFragment = function(track_id, sampleNumber, stream_) {\n        var trak = this.getTrackById(track_id);\n        var sample = this.getSample(trak, sampleNumber);\n        if (sample == null) {\n            sample = trak.samples[sampleNumber];\n            if (this.nextSeekPosition) {\n                this.nextSeekPosition = Math.min(sample.offset + sample.alreadyRead, this.nextSeekPosition);\n            } else {\n                this.nextSeekPosition = trak.samples[sampleNumber].offset + sample.alreadyRead;\n            }\n            return null;\n        }\n        var stream = stream_ || new DataStream();\n        stream.endianness = DataStream.BIG_ENDIAN;\n        var moof = this.createSingleSampleMoof(sample);\n        moof.write(stream);\n        /* adjusting the data_offset now that the moof size is known*/ moof.trafs[0].truns[0].data_offset = moof.size + 8; //8 is mdat header\n        Log.debug(\"MP4Box\", \"Adjusting data_offset with new value \" + moof.trafs[0].truns[0].data_offset);\n        stream.adjustUint32(moof.trafs[0].truns[0].data_offset_position, moof.trafs[0].truns[0].data_offset);\n        var mdat = new BoxParser.mdatBox();\n        mdat.data = sample.data;\n        mdat.write(stream);\n        return stream;\n    };\n    /* Modify the file and create the initialization segment */ ISOFile.writeInitializationSegment = function(ftyp, moov, total_duration, sample_duration) {\n        var i;\n        Log.debug(\"ISOFile\", \"Generating initialization segment\");\n        var stream = new DataStream();\n        stream.endianness = DataStream.BIG_ENDIAN;\n        ftyp.write(stream);\n        /* we can now create the new mvex box */ var mvex = moov.add(\"mvex\");\n        if (total_duration) {\n            mvex.add(\"mehd\").set(\"fragment_duration\", total_duration);\n        }\n        for(i = 0; i < moov.traks.length; i++){\n            mvex.add(\"trex\").set(\"track_id\", moov.traks[i].tkhd.track_id).set(\"default_sample_description_index\", 1).set(\"default_sample_duration\", sample_duration).set(\"default_sample_size\", 0).set(\"default_sample_flags\", 1 << 16);\n        }\n        moov.write(stream);\n        return stream.buffer;\n    };\n    ISOFile.prototype.save = function(name) {\n        var stream = new DataStream();\n        stream.endianness = DataStream.BIG_ENDIAN;\n        this.write(stream);\n        stream.save(name);\n    };\n    ISOFile.prototype.getBuffer = function() {\n        var stream = new DataStream();\n        stream.endianness = DataStream.BIG_ENDIAN;\n        this.write(stream);\n        return stream.buffer;\n    };\n    ISOFile.prototype.initializeSegmentation = function() {\n        var i;\n        var initSegs;\n        var trak;\n        var seg;\n        if (this.onSegment === null) {\n            Log.warn(\"MP4Box\", \"No segmentation callback set!\");\n        }\n        if (!this.isFragmentationInitialized) {\n            this.isFragmentationInitialized = true;\n            this.nextMoofNumber = 0;\n            this.resetTables();\n        }\n        initSegs = [];\n        for(i = 0; i < this.fragmentedTracks.length; i++){\n            var moov = new BoxParser.moovBox();\n            moov.mvhd = this.moov.mvhd;\n            moov.boxes.push(moov.mvhd);\n            trak = this.getTrackById(this.fragmentedTracks[i].id);\n            moov.boxes.push(trak);\n            moov.traks.push(trak);\n            seg = {};\n            seg.id = trak.tkhd.track_id;\n            seg.user = this.fragmentedTracks[i].user;\n            seg.buffer = ISOFile.writeInitializationSegment(this.ftyp, moov, this.moov.mvex && this.moov.mvex.mehd ? this.moov.mvex.mehd.fragment_duration : undefined, this.moov.traks[i].samples.length > 0 ? this.moov.traks[i].samples[0].duration : 0);\n            initSegs.push(seg);\n        }\n        return initSegs;\n    };\n    // file:src/box-print.js\n    /* \n * Copyright (c) Telecom ParisTech/TSI/MM/GPAC Cyril Concolato\n * License: BSD-3-Clause (see LICENSE file)\n */ BoxParser.Box.prototype.printHeader = function(output) {\n        this.size += 8;\n        if (this.size > MAX_SIZE) {\n            this.size += 8;\n        }\n        if (this.type === \"uuid\") {\n            this.size += 16;\n        }\n        output.log(output.indent + \"size:\" + this.size);\n        output.log(output.indent + \"type:\" + this.type);\n    };\n    BoxParser.FullBox.prototype.printHeader = function(output) {\n        this.size += 4;\n        BoxParser.Box.prototype.printHeader.call(this, output);\n        output.log(output.indent + \"version:\" + this.version);\n        output.log(output.indent + \"flags:\" + this.flags);\n    };\n    BoxParser.Box.prototype.print = function(output) {\n        this.printHeader(output);\n    };\n    BoxParser.ContainerBox.prototype.print = function(output) {\n        this.printHeader(output);\n        for(var i = 0; i < this.boxes.length; i++){\n            if (this.boxes[i]) {\n                var prev_indent = output.indent;\n                output.indent += \" \";\n                this.boxes[i].print(output);\n                output.indent = prev_indent;\n            }\n        }\n    };\n    ISOFile.prototype.print = function(output) {\n        output.indent = \"\";\n        for(var i = 0; i < this.boxes.length; i++){\n            if (this.boxes[i]) {\n                this.boxes[i].print(output);\n            }\n        }\n    };\n    BoxParser.mvhdBox.prototype.print = function(output) {\n        BoxParser.FullBox.prototype.printHeader.call(this, output);\n        output.log(output.indent + \"creation_time: \" + this.creation_time);\n        output.log(output.indent + \"modification_time: \" + this.modification_time);\n        output.log(output.indent + \"timescale: \" + this.timescale);\n        output.log(output.indent + \"duration: \" + this.duration);\n        output.log(output.indent + \"rate: \" + this.rate);\n        output.log(output.indent + \"volume: \" + (this.volume >> 8));\n        output.log(output.indent + \"matrix: \" + this.matrix.join(\", \"));\n        output.log(output.indent + \"next_track_id: \" + this.next_track_id);\n    };\n    BoxParser.tkhdBox.prototype.print = function(output) {\n        BoxParser.FullBox.prototype.printHeader.call(this, output);\n        output.log(output.indent + \"creation_time: \" + this.creation_time);\n        output.log(output.indent + \"modification_time: \" + this.modification_time);\n        output.log(output.indent + \"track_id: \" + this.track_id);\n        output.log(output.indent + \"duration: \" + this.duration);\n        output.log(output.indent + \"volume: \" + (this.volume >> 8));\n        output.log(output.indent + \"matrix: \" + this.matrix.join(\", \"));\n        output.log(output.indent + \"layer: \" + this.layer);\n        output.log(output.indent + \"alternate_group: \" + this.alternate_group);\n        output.log(output.indent + \"width: \" + this.width);\n        output.log(output.indent + \"height: \" + this.height);\n    }; // file:src/mp4box.js\n    /*\n * Copyright (c) 2012-2013. Telecom ParisTech/TSI/MM/GPAC Cyril Concolato\n * License: BSD-3-Clause (see LICENSE file)\n */ var MP4Box = {};\n    MP4Box.createFile = function(_keepMdatData, _stream) {\n        /* Boolean indicating if bytes containing media data should be kept in memory */ var keepMdatData = _keepMdatData !== undefined ? _keepMdatData : true;\n        var file = new ISOFile(_stream);\n        file.discardMdatData = keepMdatData ? false : true;\n        return file;\n    };\n    {\n        exports.createFile = MP4Box.createFile;\n    }\n})(mp4box_all);\n/**\n * Taken from https://github.com/w3c/webcodecs/blob/main/samples/mp4-decode/mp4_demuxer.js\n */ var Writer = /*#__PURE__*/ function() {\n    function Writer(size) {\n        _classCallCheck(this, Writer);\n        this.data = new Uint8Array(size);\n        this.idx = 0;\n        this.size = size;\n    }\n    _createClass(Writer, [\n        {\n            key: \"getData\",\n            value: function getData() {\n                if (this.idx !== this.size) throw new Error(\"Mismatch between size reserved and sized used\");\n                return this.data.slice(0, this.idx);\n            }\n        },\n        {\n            key: \"writeUint8\",\n            value: function writeUint8(value) {\n                this.data.set([\n                    value\n                ], this.idx);\n                this.idx += 1;\n            }\n        },\n        {\n            key: \"writeUint16\",\n            value: function writeUint16(value) {\n                var arr = new Uint16Array(1);\n                arr[0] = value;\n                var buffer = new Uint8Array(arr.buffer);\n                this.data.set([\n                    buffer[1],\n                    buffer[0]\n                ], this.idx);\n                this.idx += 2;\n            }\n        },\n        {\n            key: \"writeUint8Array\",\n            value: function writeUint8Array(value) {\n                this.data.set(value, this.idx);\n                this.idx += value.length;\n            }\n        }\n    ]);\n    return Writer;\n}();\n/**\n * Taken from https://github.com/w3c/webcodecs/blob/main/samples/mp4-decode/mp4_demuxer.js\n *\n * @param avccBox\n * @returns {*}\n */ var getExtradata = function getExtradata(avccBox) {\n    var i;\n    var size = 7;\n    for(i = 0; i < avccBox.SPS.length; i += 1){\n        // nalu length is encoded as a uint16.\n        size += 2 + avccBox.SPS[i].length;\n    }\n    for(i = 0; i < avccBox.PPS.length; i += 1){\n        // nalu length is encoded as a uint16.\n        size += 2 + avccBox.PPS[i].length;\n    }\n    var writer = new Writer(size);\n    writer.writeUint8(avccBox.configurationVersion);\n    writer.writeUint8(avccBox.AVCProfileIndication);\n    writer.writeUint8(avccBox.profile_compatibility);\n    writer.writeUint8(avccBox.AVCLevelIndication);\n    // eslint-disable-next-line no-bitwise\n    writer.writeUint8(avccBox.lengthSizeMinusOne + (63 << 2));\n    // eslint-disable-next-line no-bitwise\n    writer.writeUint8(avccBox.nb_SPS_nalus + (7 << 5));\n    for(i = 0; i < avccBox.SPS.length; i += 1){\n        writer.writeUint16(avccBox.SPS[i].length);\n        writer.writeUint8Array(avccBox.SPS[i].nalu);\n    }\n    writer.writeUint8(avccBox.nb_PPS_nalus);\n    for(i = 0; i < avccBox.PPS.length; i += 1){\n        writer.writeUint16(avccBox.PPS[i].length);\n        writer.writeUint8Array(avccBox.PPS[i].nalu);\n    }\n    return writer.getData();\n};\n/**\n * decodeVideo takes an url to a mp4 file and converts it into frames.\n *\n * The steps for this are:\n *  1. Determine the codec for this video file and demux it into chunks.\n *  2. Read the chunks with VideoDecoder as fast as possible.\n *  3. Return an array of frames that we can efficiently draw to a canvas.\n *\n * @param src\n * @param VideoDecoder\n * @param EncodedVideoChunk\n * @param emitFrame\n * @param debug\n * @returns {Promise<unknown>}\n */ var decodeVideo = function decodeVideo(src, emitFrame, _ref) {\n    var VideoDecoder1 = _ref.VideoDecoder, EncodedVideoChunk1 = _ref.EncodedVideoChunk, debug = _ref.debug;\n    return new Promise(function(resolve, reject) {\n        if (debug) console.info(\"Decoding video from\", src);\n        try {\n            // Uses mp4box for demuxing\n            var mp4boxfile = mp4box_all.createFile();\n            // Holds the codec value\n            var codec;\n            // Creates a VideoDecoder instance\n            var decoder = new VideoDecoder1({\n                output: function output(frame) {\n                    createImageBitmap(frame, {\n                        resizeQuality: \"low\"\n                    }).then(function(bitmap) {\n                        emitFrame(bitmap);\n                        frame.close();\n                        if (decoder.decodeQueueSize <= 0) {\n                            // Give it an extra half second to finish everything\n                            setTimeout(function() {\n                                if (decoder.state !== \"closed\") {\n                                    decoder.close();\n                                    resolve();\n                                }\n                            }, 500);\n                        }\n                    });\n                },\n                error: function error(e) {\n                    // eslint-disable-next-line no-console\n                    console.error(e);\n                    reject(e);\n                }\n            });\n            mp4boxfile.onReady = function(info) {\n                if (info && info.videoTracks && info.videoTracks[0]) {\n                    var _info$videoTracks = _slicedToArray(info.videoTracks, 1);\n                    codec = _info$videoTracks[0].codec;\n                    if (debug) console.info(\"Video with codec:\", codec);\n                    // Gets the avccbox used for reading extradata\n                    var avccBox = mp4boxfile.moov.traks[0].mdia.minf.stbl.stsd.entries[0].avcC;\n                    var extradata = getExtradata(avccBox);\n                    // configure decoder\n                    decoder.configure({\n                        codec: codec,\n                        description: extradata\n                    });\n                    // Setup mp4box file for breaking it into chunks\n                    mp4boxfile.setExtractionOptions(info.videoTracks[0].id);\n                    mp4boxfile.start();\n                } else reject(new Error(\"URL provided is not a valid mp4 video file.\"));\n            };\n            mp4boxfile.onSamples = function(track_id, ref1, samples) {\n                for(var i = 0; i < samples.length; i += 1){\n                    var sample = samples[i];\n                    var type = sample.is_sync ? \"key\" : \"delta\";\n                    var chunk = new EncodedVideoChunk1({\n                        type: type,\n                        timestamp: sample.cts,\n                        duration: sample.duration,\n                        data: sample.data\n                    });\n                    decoder.decode(chunk);\n                }\n            };\n            // Fetches the file into arraybuffers\n            fetch(src).then(function(res) {\n                var reader = res.body.getReader();\n                var offset = 0;\n                function appendBuffers(_ref2) {\n                    var done = _ref2.done, value = _ref2.value;\n                    if (done) {\n                        mp4boxfile.flush();\n                        return null;\n                    }\n                    var buf = value.buffer;\n                    buf.fileStart = offset;\n                    offset += buf.byteLength;\n                    mp4boxfile.appendBuffer(buf);\n                    return reader.read().then(appendBuffers);\n                }\n                return reader.read().then(appendBuffers);\n            });\n        } catch (e) {\n            reject(e);\n        }\n    });\n};\n/**\n * The main function for decoding video. Deals with the polyfill cases first,\n * then calls our decodeVideo.\n *\n * @param src\n * @param emitFrame\n * @param debug\n * @returns {Promise<never>|Promise<void>|*}\n */ var videoDecoder = function(src, emitFrame, debug) {\n    // If our browser supports WebCodecs natively\n    if (typeof VideoDecoder === \"function\" && typeof EncodedVideoChunk === \"function\") {\n        if (debug) console.info(\"WebCodecs is natively supported, using native version...\");\n        return decodeVideo(src, emitFrame, {\n            VideoDecoder: VideoDecoder,\n            EncodedVideoChunk: EncodedVideoChunk,\n            debug: debug\n        });\n    }\n    // Otherwise, resolve nothing\n    if (debug) console.info(\"WebCodecs is not available in this browser.\");\n    return Promise.resolve();\n};\n/**\n *   ____                 _ _     __     ___     _\n *  / ___|  ___ _ __ ___ | | |_   \\ \\   / (_) __| | ___  ___\n *  \\___ \\ / __| '__/ _ \\| | | | | \\ \\ / /| |/ _` |/ _ \\/ _ \\\n *   ___) | (__| | | (_) | | | |_| |\\ V / | | (_| |  __/ (_) |\n *  |____/ \\___|_|  \\___/|_|_|\\__, | \\_/  |_|\\__,_|\\___|\\___/\n *                            |___/\n *\n * Responsive scrollable videos without obscure video encoding requirements.\n * Compatible with React, Svelte, Vue, and plain HTML.\n */ var ScrollyVideo = /*#__PURE__*/ function() {\n    function ScrollyVideo(_ref) {\n        var _this = this;\n        var src = _ref.src, scrollyVideoContainer = _ref.scrollyVideoContainer, _ref$cover = _ref.cover, cover = _ref$cover === void 0 ? true : _ref$cover, _ref$sticky = _ref.sticky, sticky = _ref$sticky === void 0 ? true : _ref$sticky, _ref$full = _ref.full, full = _ref$full === void 0 ? true : _ref$full, _ref$trackScroll = _ref.trackScroll, trackScroll = _ref$trackScroll === void 0 ? true : _ref$trackScroll, _ref$transitionSpeed = _ref.transitionSpeed, transitionSpeed = _ref$transitionSpeed === void 0 ? 8 : _ref$transitionSpeed, _ref$frameThreshold = _ref.frameThreshold, frameThreshold = _ref$frameThreshold === void 0 ? 0.1 : _ref$frameThreshold, _ref$useWebCodecs = _ref.useWebCodecs, useWebCodecs = _ref$useWebCodecs === void 0 ? true : _ref$useWebCodecs, _ref$debug = _ref.debug, debug = _ref$debug === void 0 ? false : _ref$debug;\n        _classCallCheck(this, ScrollyVideo);\n        // Make sure that we have a DOM\n        if ((typeof document === \"undefined\" ? \"undefined\" : _typeof(document)) !== \"object\") {\n            console.error(\"ScrollyVideo must be initiated in a DOM context\");\n            return;\n        }\n        // Make sure the basic arguments are set for scrollyvideo\n        if (!scrollyVideoContainer) {\n            console.error(\"scrollyVideoContainer must be a valid DOM object\");\n            return;\n        }\n        if (!src) {\n            console.error(\"Must provide valid video src to ScrollyVideo\");\n            return;\n        }\n        // Save the container. If the container is a string we get the element\n        // eslint-disable-next-line no-undef\n        if (scrollyVideoContainer instanceof Element) this.container = scrollyVideoContainer;\n        else if (typeof scrollyVideoContainer === \"string\") {\n            // eslint-disable-next-line no-undef\n            this.container = document.getElementById(scrollyVideoContainer);\n            if (!this.container) throw new Error(\"scrollyVideoContainer must be a valid DOM object\");\n        } else {\n            throw new Error(\"scrollyVideoContainer must be a valid DOM object\");\n        }\n        // Save the constructor options\n        this.src = src;\n        this.transitionSpeed = transitionSpeed;\n        this.frameThreshold = frameThreshold;\n        this.useWebCodecs = useWebCodecs;\n        this.cover = cover;\n        this.sticky = sticky;\n        this.full = full;\n        this.trackScroll = trackScroll;\n        this.debug = debug;\n        // Create the initial video object. Even if we are going to use webcodecs,\n        // we start with a paused video object\n        // eslint-disable-next-line no-undef\n        this.video = document.createElement(\"video\");\n        this.video.src = src;\n        this.video.preload = \"auto\";\n        this.video.tabIndex = 0;\n        this.video.autobuffer = true;\n        this.video.playsInline = true;\n        this.video.muted = true;\n        this.video.pause();\n        this.video.load();\n        // Adds the video to the container\n        this.container.appendChild(this.video);\n        // Setting CSS properties for sticky\n        if (sticky) {\n            this.container.style.display = \"block\";\n            this.container.style.position = \"sticky\";\n            this.container.style.top = \"0\";\n        }\n        // Setting CSS properties for full\n        if (full) {\n            this.container.style.width = \"100%\";\n            this.container.style.height = \"100vh\";\n            this.container.style.overflow = \"hidden\";\n        }\n        // Setting CSS properties for cover\n        if (cover) this.setCoverStyle(this.video);\n        // Detect webkit (safari), because webkit requires special attention\n        var browserEngine = new UAParser().getEngine();\n        // eslint-disable-next-line no-undef\n        this.isSafari = browserEngine.name === \"WebKit\";\n        if (debug && this.isSafari) console.info(\"Safari browser detected\");\n        // Initialize state variables\n        this.currentTime = 0; // Saves the currentTime of the video, synced with this.video.currentTime\n        this.targetTime = 0; // The target time before a transition happens\n        this.canvas = null; // The canvas for drawing the frames decoded by webCodecs\n        this.context = null; // The canvas context\n        this.frames = []; // The frames decoded by webCodecs\n        this.frameRate = 0; // Calculation of frameRate so we know which frame to paint\n        // Add scroll listener for responding to scroll position\n        this.updateScrollPercentage = function(jump) {\n            // Used for internally setting the scroll percentage based on built-in listeners\n            var containerBoundingClientRect = _this.container.parentNode.getBoundingClientRect();\n            // Calculate the current scroll percent of the video\n            var scrollPercent = -containerBoundingClientRect.top / (containerBoundingClientRect.height - window.innerHeight);\n            if (_this.debug) console.info(\"ScrollyVideo scrolled to\", scrollPercent);\n            // Set the target time percent\n            _this.setTargetTimePercent(scrollPercent, jump);\n        };\n        // Add our event listeners for handling changes to the window or scroll\n        if (this.trackScroll) {\n            // eslint-disable-next-line no-undef\n            window.addEventListener(\"scroll\", this.updateScrollPercentage);\n            // Set the initial scroll percentage\n            this.video.addEventListener(\"loadedmetadata\", function() {\n                return _this.updateScrollPercentage(true);\n            }, {\n                once: true\n            });\n        } else {\n            this.video.addEventListener(\"loadedmetadata\", function() {\n                return _this.setTargetTimePercent(0, true);\n            }, {\n                once: true\n            });\n        }\n        // Add resize function\n        this.resize = function() {\n            if (_this.debug) console.info(\"ScrollyVideo resizing...\");\n            // On resize, we need to reset the cover style\n            if (_this.cover) _this.setCoverStyle(_this.canvas || _this.video);\n            // Then repaint the canvas, if we are in useWebcodecs\n            _this.paintCanvasFrame(Math.floor(_this.currentTime * _this.frameRate));\n        };\n        // eslint-disable-next-line no-undef\n        window.addEventListener(\"resize\", this.resize);\n        this.video.addEventListener(\"progress\", this.resize);\n        // Calls decode video to attempt webcodecs method\n        this.decodeVideo();\n    }\n    /**\n   * Sets the style of the video or canvas to \"cover\" it's container\n   *\n   * @param el\n   */ _createClass(ScrollyVideo, [\n        {\n            key: \"setCoverStyle\",\n            value: function setCoverStyle(el) {\n                if (this.cover) {\n                    /* eslint-disable no-param-reassign */ el.style.position = \"absolute\";\n                    el.style.top = \"50%\";\n                    el.style.left = \"50%\";\n                    el.style.transform = \"translate(-50%, -50%)\";\n                    el.style.minWidth = \"101%\";\n                    el.style.minHeight = \"101%\";\n                    // Gets the width and height of the container\n                    var _this$container$getBo = this.container.getBoundingClientRect(), containerWidth = _this$container$getBo.width, containerHeight = _this$container$getBo.height;\n                    // Gets the width and height of the video frames\n                    var width = el.videoWidth || el.width;\n                    var height = el.videoHeight || el.height;\n                    if (this.debug) console.info(\"Container dimensions:\", [\n                        containerWidth,\n                        containerHeight\n                    ]);\n                    if (this.debug) console.info(\"Element dimensions:\", [\n                        width,\n                        height\n                    ]);\n                    // Determines which axis needs to be 100% and which needs to be scaled\n                    if (containerWidth / containerHeight > width / height) {\n                        el.style.width = \"100%\";\n                        el.style.height = \"auto\";\n                    } else {\n                        el.style.height = \"100%\";\n                        el.style.width = \"auto\";\n                    }\n                /* eslint-enable no-param-reassign */ }\n            }\n        },\n        {\n            key: \"decodeVideo\",\n            value: function decodeVideo() {\n                var _this2 = this;\n                if (this.useWebCodecs && this.src) {\n                    videoDecoder(this.src, function(frame) {\n                        _this2.frames.push(frame);\n                    }, this.debug)[\"catch\"](function() {\n                        if (_this2.debug) console.error(\"Error encountered while decoding video\");\n                        // Remove all decoded frames if a failure happens during decoding\n                        _this2.frames = [];\n                        // Force a video reload when videoDecoder fails\n                        _this2.video.load();\n                    }).then(function() {\n                        // If no frames, something went wrong\n                        if (_this2.frames.length === 0) {\n                            if (_this2.debug) console.error(\"No frames were received from webCodecs\");\n                            return;\n                        }\n                        // Calculate the frameRate based on number of frames and the duration\n                        _this2.frameRate = _this2.frames.length / _this2.video.duration;\n                        if (_this2.debug) console.info(\"Received\", _this2.frames.length, \"frames\");\n                        // Remove the video and add the canvas\n                        // eslint-disable-next-line no-undef\n                        _this2.canvas = document.createElement(\"canvas\");\n                        _this2.context = _this2.canvas.getContext(\"2d\");\n                        // Hide the video and add the canvas to the container\n                        _this2.video.style.display = \"none\";\n                        _this2.container.appendChild(_this2.canvas);\n                        if (_this2.cover) _this2.setCoverStyle(_this2.canvas);\n                        // Paint our first frame\n                        _this2.paintCanvasFrame(Math.floor(_this2.currentTime * _this2.frameRate));\n                    });\n                }\n            }\n        },\n        {\n            key: \"paintCanvasFrame\",\n            value: function paintCanvasFrame(frameNum) {\n                if (this.canvas) {\n                    // Get the frame and paint it to the canvas\n                    var currFrame = this.frames[frameNum];\n                    if (currFrame) {\n                        if (this.debug) console.info(\"Painting frame\", frameNum);\n                        // Make sure the canvas is scaled properly, similar to setCoverStyle\n                        this.canvas.width = currFrame.width;\n                        this.canvas.height = currFrame.height;\n                        var _this$container$getBo2 = this.container.getBoundingClientRect(), width = _this$container$getBo2.width, height = _this$container$getBo2.height;\n                        if (width / height > currFrame.width / currFrame.height) {\n                            this.canvas.style.width = \"100%\";\n                            this.canvas.style.height = \"auto\";\n                        } else {\n                            this.canvas.style.height = \"100%\";\n                            this.canvas.style.width = \"auto\";\n                        }\n                        // Draw the frame to the canvas context\n                        this.context.drawImage(currFrame, 0, 0, currFrame.width, currFrame.height);\n                    }\n                }\n            }\n        },\n        {\n            key: \"transitionToTargetTime\",\n            value: function transitionToTargetTime(jump) {\n                var _this3 = this;\n                if (this.debug) {\n                    console.info(\"Transitioning targetTime:\", this.targetTime, \"currentTime:\", this.currentTime);\n                }\n                // If we are already close enough to our target, pause the video and return.\n                // This is the base case of the recursive function\n                if (// eslint-disable-next-line no-restricted-globals\n                isNaN(this.targetTime) || Math.abs(this.currentTime - this.targetTime) < this.frameThreshold) {\n                    this.video.pause();\n                    this.transitioning = false;\n                    return;\n                }\n                // Make sure we don't go out of time bounds\n                if (this.targetTime > this.video.duration) this.targetTime = this.video.duration;\n                if (this.targetTime < 0) this.targetTime = 0;\n                // How far forward we need to transition\n                var transitionForward = this.targetTime - this.currentTime;\n                if (this.canvas) {\n                    // Update currentTime and paint the closest frame\n                    this.currentTime += transitionForward / (256 / this.transitionSpeed);\n                    // If jump, we go directly to the frame\n                    if (jump) this.currentTime = this.targetTime;\n                    this.paintCanvasFrame(Math.floor(this.currentTime * this.frameRate));\n                } else if (jump || this.isSafari || this.targetTime - this.currentTime < 0) {\n                    // We can't use a negative playbackRate, so if the video needs to go backwards,\n                    // We have to use the inefficient method of modifying currentTime rapidly to\n                    // get an effect.\n                    this.video.pause();\n                    this.currentTime += transitionForward / (64 / this.transitionSpeed);\n                    // If jump, we go directly to the frame\n                    if (jump) this.currentTime = this.targetTime;\n                    this.video.currentTime = this.currentTime;\n                } else {\n                    // Otherwise, we play the video and adjust the playbackRate to get a smoother\n                    // animation effect.\n                    var playbackRate = Math.max(Math.min(transitionForward * 4, this.transitionSpeed, 16), 1);\n                    if (this.debug) console.info(\"ScrollyVideo playbackRate:\", playbackRate);\n                    // eslint-disable-next-line no-restricted-globals\n                    if (!isNaN(playbackRate)) {\n                        this.video.playbackRate = playbackRate;\n                        this.video.play();\n                    }\n                    // Set the currentTime to the video's currentTime\n                    this.currentTime = this.video.currentTime;\n                }\n                // Recursively calls ourselves until the animation is done.\n                // eslint-disable-next-line no-undef\n                if (typeof requestAnimationFrame === \"function\") {\n                    // eslint-disable-next-line no-undef\n                    requestAnimationFrame(function() {\n                        return _this3.transitionToTargetTime();\n                    });\n                }\n            }\n        },\n        {\n            key: \"setTargetTimePercent\",\n            value: function setTargetTimePercent(setPercentage, jump) {\n                // The time we want to transition to\n                this.targetTime = Math.max(Math.min(setPercentage, 1), 0) * (this.frames.length && this.frameRate ? this.frames.length / this.frameRate : this.video.duration);\n                // If we are close enough, return early\n                if (!jump && Math.abs(this.currentTime - this.targetTime) < this.frameThreshold) return;\n                // If we are already transitioning, bail early\n                if (!jump && this.transitioning) return;\n                // Play the video if we are in video mode\n                if (!this.canvas && !this.video.paused) this.video.play();\n                // Set transitioning state to true and begin transition\n                this.transitioning = true;\n                this.transitionToTargetTime(jump);\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function destroy() {\n                if (this.debug) console.info(\"Destroying ScrollyVideo\");\n                // eslint-disable-next-line no-undef\n                if (this.trackScroll) window.removeEventListener(\"scroll\", this.updateScrollPercentage);\n                // eslint-disable-next-line no-undef\n                window.removeEventListener(\"resize\", this.resize);\n                // Clear component\n                if (this.container) this.container.innerHTML = \"\";\n            }\n        }\n    ]);\n    return ScrollyVideo;\n}();\nvar _excluded = [\n    \"videoPercentage\"\n];\nfunction ScrollyVideoComponent(props) {\n    // variable to hold the DOM element\n    var containerElement = React.useRef(null);\n    // ref to hold the scrollyVideo object\n    var scrollyVideoRef = React.useRef(null);\n    // Store the props so we know when things change\n    var _useState = React.useState(\"\"), _useState2 = _slicedToArray(_useState, 2), lastPropsString = _useState2[0], setLastPropsString = _useState2[1];\n    React.useEffect(function() {\n        if (containerElement) {\n            // separate out the videoPercentage prop\n            var videoPercentage = props.videoPercentage, restProps = _objectWithoutProperties(props, _excluded);\n            if (JSON.stringify(restProps) !== lastPropsString) {\n                // if scrollyvideo already exists and any parameter is updated, destroy and recreate.\n                if (scrollyVideoRef.current && scrollyVideoRef.current.destroy) scrollyVideoRef.current.destroy();\n                scrollyVideoRef.current = new ScrollyVideo(_objectSpread2({\n                    scrollyVideoContainer: containerElement.current\n                }, props));\n                // Save the new props\n                setLastPropsString(JSON.stringify(restProps));\n            }\n            // If we need to update the target time percent\n            if (scrollyVideoRef.current && typeof videoPercentage === \"number\" && videoPercentage >= 0 && videoPercentage <= 1) {\n                scrollyVideoRef.current.setTargetTimePercent(videoPercentage);\n            }\n        }\n        // Cleanup the component on unmount\n        return function() {\n            if (scrollyVideoRef.current && scrollyVideoRef.current.destroy) scrollyVideoRef.current.destroy();\n        };\n    }, [\n        containerElement,\n        props\n    ]);\n    return /*#__PURE__*/ React__default[\"default\"].createElement(\"div\", {\n        ref: containerElement\n    });\n}\nmodule.exports = ScrollyVideoComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scrolly-video/dist/ScrollyVideo.cjs.jsx\n");

/***/ })

};
;